NIO.2 (New I/O) API：
	加強了文件系統和文件 I/O 操作，提供了更強大、更靈活的 API。


temp file : 臨時文件建立與刪除
	try (OutputStream out = Files.newOutputStream(Files.createTempFile("prefix-", ".suffix"))) {
		// 使用臨時文件進行文件操作
	} // 臨時文件在這裡被自動刪除

========================================================================================================================
================================= nio2 Path ============================================================================
	https://codertw.com/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80/282/#outline__1_1
	https://stackoverflow.com/questions/189094/how-to-scan-a-folder-in-java
	https://docs.oracle.com/javase/tutorial/essential/io/walk.html
	https://docs.oracle.com/javase/tutorial/displayCode.html?code=https://docs.oracle.com/javase/tutorial/essential/io/examples/Copy.java
	https://jakubstas.com/paths_in_nio_2/#.Yag_UNBBw5v
	https://www.baeldung.com/java-io-vs-nio
	https://ithelp.ithome.com.tw/articles/10102562
	https://programdoubledragon.blogspot.com/2018/12/java-nio2.html=
========================================================================================================================
================================= Path =================================================================================
========================================================================================================================
路徑處理有關
	取得檔名
		String filename = path.getFileName().toString();  // 傳回 最後一層的路徑元件(包含副檔名)
		
	get Path by string
		Path path = Paths.get(...)

	Path 路經階層
		int levels = path.getNameCount();

	取得上一層
		path.getParent();

	取得 Path 其兄弟路徑
		siblingFileName = sourcePath.getFileName() + "xxxx";
		Path siblingPath = sourcePath.resolveSibling(siblingFileName);

	取得 Path 其延伸路徑
		假設有路徑為 xxxx，取得其延伸路徑為 xxxx/yyy
		Path path = Paths.get("xxxx")
		String extendDir = "yyy";
		Path extendPath = sourcePath.resolve(extendDir);

	Path 標準正常化 : 要目的是消除路徑中的冗餘部分，並將其轉換為標準形式。它執行以下操作：
		path.normalize()
			1.移除路徑中的多餘分隔符：它將路徑中連續的多個分隔符替換為單個分隔符。例如，/dir//file.txt將被規範化為/dir/file.txt。

			2.處理.（當前目錄）和..（上級目錄）：它解析路徑中的.和..符號，並將其轉換為對應的實際目錄。例如，/dir/./file.txt將被規範化為/dir/file.txt，而/dir/../file.txt將被規範化為/file.txt。

			3.處理符號鏈接：如果路徑中存在符號鏈接，它將嘗試解析符號鏈接，將其轉換為實際目標路徑。

		注意事項: 只進行路徑的規範化處理，並不檢查路徑是否存在或是否有效。它僅對路徑字符串進行處理，並不對底層文件系統進行任何操作
		功能類似於 spring 裡的 StringUtils.cleanPath，但功能略於它

	走訪 path
		Path directory = Paths.get("your_directory_path");
			try (Stream<Path> walk = Files.walk(directory)) {
				walk.filter(Files::isRegularFile) // 過濾出普通文件
					.filter(path -> {
						String fileName = path.getFileName().toString();
						return fileName.endsWith("axx") || fileName.endsWith("bxx");
					})
					.forEach(path -> System.out.println("文件名：" + path));
			} catch (IOException e) {
				e.printStackTrace();
			}

	類似 rm -rf ${path}，但不是離開程序後才刪除，不適用於單元測試
		public class DirectoryRemover {
			public static void main(String[] args) throws IOException {
				String directoryPath = "/path/to/directory";
				removeDirectory(directoryPath);
			}

			private static void removeDirectory(String directoryPath) throws IOException {
				Path directory = Paths.get(directoryPath);

				if (!Files.exists(directory)) {
					System.out.println("Directory does not exist: " + directoryPath);
					return;
				}

				Files.walkFileTree(directory, new SimpleFileVisitor<Path>() {
					@Override
					public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {
						Files.delete(file);
						System.out.println("Deleted file: " + file);
						return FileVisitResult.CONTINUE;
					}

					@Override
					public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException {
						Files.delete(dir);
						System.out.println("Deleted directory: " + dir);
						return FileVisitResult.CONTINUE;
					}
				});

				System.out.println("Directory and its contents have been removed: " + directoryPath);
			}
		}
		等於 org.springframework.util.FileSystemUtils.deleteRecursively(path)

	檔案轉成路徑
		File file = new File(....);
		Path path = file.toPath();

	取得倒數第二層路徑名稱
		public static void main(String[] args) {
			Path path = Paths.get("/a/b/c/d/e");

			// 取得倒數第 2 層名稱（也就是 d）
			int nameCount = path.getNameCount();
			String name = path.getName(nameCount - 2).toString();

			System.out.println(name);  // 輸出：d
		}

========================================================================================================================
================================= nio2 Files ===========================================================================
========================================================================================================================
檔案處理有關
	https://www.baeldung.com/java-file-directory-exists
	Path check is exists
		Path path = Paths.get("does-not-exist.txt");
		assertFalse(Files.exists(path));

		Path tempFile = Files.createTempFile("baeldung", "exist-article");
		assertTrue(Files.exists(tempFile));

		Path tempDirectory = Files.createTempDirectory("baeldung-exists");
		assertTrue(Files.exists(tempDirectory));

	Path 是否為目錄
		Files.isDirectory(path);

	Path 是否為檔案
		Files.isRegularFile(path);

	Path 檔案大小
		Files.size();

	是否存在 path
		boolean exist = Files.exists(path);

	Path 轉成檔案
		File path.toFile();

	生成暫存預設位置下檔案
		Files.createTempFile("prefix-", ".suffix");

	生成指定位置下的暫存檔案
		Files.createTempFile(Paths.get("tmpDir"), "prefix-", ".suffix");

	路徑轉成檔案字元處理
		try (BufferedReader reader = Files.newBufferedReader(path)) {

========================================================================================================================
================================= nio2 Path to File ===========================================================================
========================================================================================================================
1.寫到 Path 路徑下的字串結果內容
	import java.nio.file.Files;
	import java.nio.file.Path;
	import java.nio.file.Paths;
	import java.nio.charset.StandardCharsets;
	import java.io.IOException;

	public class WriteToFileExample {
		public static void main(String[] args) {
			Path path = Paths.get("/your/target/path/output.txt");
			String content = "這是要寫入的內容";

			try {
				// 若檔案不存在會自動建立，預設為覆寫模式
				Files.write(path, content.getBytes(StandardCharsets.UTF_8));
				// 若要附加寫入（不覆蓋舊資料）
				// Files.write(path, content.getBytes(StandardCharsets.UTF_8), StandardOpenOption.APPEND, StandardOpenOption.CREATE);
				System.out.println("寫入成功！");
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}

	常見注意事項：
		* StandardCharsets.UTF_8 是建議的編碼方式，避免亂碼。
		* 檔案路徑若不存在的話，目錄需先存在，否則會拋出 NoSuchFileException。
		* 若要確保目錄存在，可加上：
			Files.createDirectories(path.getParent());
				* 若目錄已存在：會忽略，不拋出例外。
				* 若目錄不存在：會自動遞迴建立所有必要的目錄。
				* 若路徑中任何一層是檔案（非目錄）：會拋出 FileAlreadyExistsException。

2.讀取路徑下內容回傳 byte[]
	byte[] content = Files.readAllBytes(path);
		這是最直接且效能不錯的方式，適用於小至中型檔案。 建議不要超過幾百 MB

3.從一個檔案的 Path 複製到另一個 Path
	Files.copy(sourcePath, targetPath);
	📌 常用選項 StandardCopyOption：
		| 選項                       | 說明                                         |
		| -------------------------- | -------------------------------------------- |
		| `REPLACE_EXISTING`         | 若目標已存在，則覆蓋                         |
		| `COPY_ATTRIBUTES`          | 連同原檔案的 metadata 一起複製（例如時間戳） |
		| `ATOMIC_MOVE`（用於 move） | 原子移動（用於 `Files.move()`）              |

4.從 inputStream 寫入到 targetPath
	Path targetPath = Paths.get("/opt/tmp/output.txt");

	// 假設這是你要寫入的 InputStream（可替換為任何來源，例如 MultipartFile.getInputStream()）
	try (InputStream inputStream = Files.newInputStream(Paths.get("/opt/tmp/source.txt"))) {
		Files.copy(inputStream, targetPath, StandardCopyOption.REPLACE_EXISTING);
	}

5.Path 讀取出 inputStream 形式
	InputStream in = Files.newInputStream(path);

6.srcPath 壓縮到 zipPath
	import java.io.*;
	import java.nio.file.*;
	import java.util.zip.*;

	public class ZipFolder {
		public static void zipDirectory(Path sourceDir, Path zipPath) throws IOException {
			try (
				OutputStream fos = Files.newOutputStream(zipPath);
				BufferedOutputStream bos = new BufferedOutputStream(fos);
				ZipOutputStream zos = new ZipOutputStream(bos)
			) {
				Path basePath = sourceDir;

				Files.walk(sourceDir)
					.filter(Files::isRegularFile)
					.forEach(path -> {
						try {
							// 取得 zip 內的相對路徑，例如 meta/meta.xml
							Path relativePath = basePath.relativize(path);
							ZipEntry zipEntry = new ZipEntry(relativePath.toString().replace("\\", "/"));
							zos.putNextEntry(zipEntry);

							// 寫入檔案內容
							Files.copy(path, zos);
							zos.closeEntry();
						} catch (IOException e) {
							throw new UncheckedIOException("壓縮檔案失敗: " + path, e);
						}
					});
			}
		}

		// 範例使用
		public static void main(String[] args) throws IOException {
			String uuid = "12345678";
			Path sourceDir = Paths.get("/opt/tmp/" + uuid);
			Path zipPath = Paths.get("/opt/tmp/" + uuid + ".zip");

			zipDirectory(sourceDir, zipPath);
			System.out.println("壓縮完成！");
		}
	}

7.取得 Path 路徑下所有檔案的檔名
	Path dirPath = Paths.get("/opt/tmp/uuid"); // 替換為你要的目錄路徑

	List<String> fileNames = new ArrayList<>();
	try (Stream<Path> paths = Files.walk(dirPath)) {
		fileNames = paths
			.filter(Files::isRegularFile)
			.map(path -> path.getFileName().toString())
			.collect(Collectors.toList());
	} catch (IOException e) {
		e.printStackTrace(); // 或記錄錯誤日誌
	}

========================================================================================================================
zip a file
	https://mkyong.com/java/how-to-compress-files-in-zip-format/


