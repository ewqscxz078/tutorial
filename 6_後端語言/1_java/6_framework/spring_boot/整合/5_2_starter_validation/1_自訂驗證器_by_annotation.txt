ref chatGPT
	依賴 spring-boot-starter-validation
	一般推薦使用 annotation 方式
		適用於基於註解的字段驗證，簡單且直觀。

	1. 創建自訂驗證註解
		import javax.validation.Constraint;
		import javax.validation.Payload;
		import java.lang.annotation.ElementType;
		import java.lang.annotation.Retention;
		import java.lang.annotation.RetentionPolicy;
		import java.lang.annotation.Target;

		@Constraint(validatedBy = { MyCustomValidator.class })
		@Target({ ElementType.FIELD, ElementType.METHOD, ElementType.PARAMETER, ElementType.ANNOTATION_TYPE })
		@Retention(RetentionPolicy.RUNTIME)
		public @interface MyCustomConstraint {
			String message() default "Invalid value";

			Class<?>[] groups() default {};

			Class<? extends Payload>[] payload() default {};
		}

	2. 創建自訂驗證器
		import javax.validation.ConstraintValidator;
		import javax.validation.ConstraintValidatorContext;

		public class MyCustomValidator implements ConstraintValidator<MyCustomConstraint, String> {

			@Override
			public void initialize(MyCustomConstraint constraintAnnotation) {
				// 初始化邏輯，如果需要的話
			}

			@Override
			public boolean isValid(String value, ConstraintValidatorContext context) {
				// 實作自訂的驗證邏輯
				// 例如，檢查值是否符合某個模式或規則
				if (value == null) {
					return false;
				}
				return value.matches("[a-zA-Z]+"); // 假設我們只允許英文字母
			}
		}

	3. 使用自訂驗證註解
		public class User {

			@MyCustomConstraint
			private String username;

			// getters and setters
		}


	4. 測試驗證
		import org.springframework.validation.annotation.Validated;
		import org.springframework.web.bind.annotation.GetMapping;
		import org.springframework.web.bind.annotation.RequestParam;
		import org.springframework.web.bind.annotation.RestController;

		@RestController
		@Validated
		public class UserController {

			@GetMapping("/validate")
			public String validateUsername(@RequestParam @MyCustomConstraint String username) {
				return "Valid username";
			}
		}
