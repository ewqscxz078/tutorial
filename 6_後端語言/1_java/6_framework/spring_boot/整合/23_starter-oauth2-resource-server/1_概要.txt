ref ChatGPT

1. Resource Server 定義

	在 OAuth2 架構裡：
		* Resource Server = 提供受保護 API 的系統
		* 它的責任是 驗證來自 Client 的 Access Token (JWT)，並根據其中的 scope/claims 決定授權。

	換句話說，它就是「最後真正持有資源的服務」。

2. 典型流程 (Client → Gateway → Resource Server)
	1.Client
		* 使用 WebClient 或其他 HTTP client
		* 先從 Auth Server 取得 Access Token (JWT)
		* 帶著 Authorization: Bearer <jwt> 呼叫 Gateway

	Gateway
		* 通常扮演 Reverse Proxy + Policy Enforcement Point
		* 常見做法：
			* 直接在 Gateway 驗證 JWT，然後再將 userId、roles 等資訊用 header (如 X-User-Id, X-Roles) 傳給後端
			* 或者只是 pass-through，把原始 JWT 傳給 Resource Server 讓它自己驗證

		* 視設計選擇：有的團隊會把 JWT 驗證集中在 Gateway，後端只做授權；
			也有的會 每個 Resource Server 都獨立驗證 JWT。

	Resource Server
		* 如果採用「集中驗證」，它就只信任 Gateway 傳來的 header，不再重複驗證 JWT
		* 如果採用「分散驗證」，它自己也會驗證 JWT (Spring Boot 的 spring.security.oauth2.resourceserver.jwt)

✅ 只在 Gateway 驗證就夠的情況
	（後端 Resource Server 不需要再驗證 JWT，只信任 Gateway）
	* 所有流量都必須經過 Gateway
		* 例如：內外流量都走 Gateway，後端服務沒有對外開口。
		* 可以透過 防火牆 / service mesh / k8s network policy 確保後端 API 不會被繞過。

	* 授權邏輯集中在 Gateway
		* Gateway 驗證 JWT 後，抽取出必要資訊（X-User-Id、X-Roles、X-Scopes 等 header）再傳給後端。
		* 後端只需要做 業務邏輯授權判斷（例：role=admin 才能刪除資料）。

	* 減少重複驗證的負擔
		* Resource Server 數量很多時，把驗證都集中在 Gateway，可以降低重複查詢 JWK 的開銷。

✅ Resource Server 也要驗證 JWT 的情況
	（即使 Gateway 已經驗證，後端也要自己驗證）
	* 後端服務有可能被繞過 Gateway 直接存取
		* 例如：後端服務暴露在內部網路，某些情況下可能被惡意程式或內部人員直接呼叫。
		* 為了安全，後端必須能獨立驗證 JWT。

	* 系統需要更強的「零信任」模型
		* 不想單純依賴 Gateway，而是要求 每個 hop 都必須驗證。
		* 這樣即使 Gateway 被攻陷，後端服務仍有防護。

	* 需要驗證 JWT 的完整性 / 內容
		* 例如：後端業務邏輯需要根據 JWT 裡的 claims（aud, scope, exp 等）做驗證。
		* 如果只看 Gateway 傳來的 header，有可能遭到 header 竄改攻擊。
		* 自己驗證能確保這些資訊真的是 Auth Server 簽發的。

	* 多入口架構
		* 除了 Gateway，還有其他通道會打進 Resource Server（例如：另一個內部系統直連）。
		* 這種情況下 Resource Server 必須具備獨立驗證能力。

⚖️ 實務建議
	小規模 / 強制所有流量都走 Gateway
		→ 可以考慮 只在 Gateway 驗證，後端只做授權判斷。

	中大型 / 分散式 / 零信任環境
		→ 建議 Gateway 與 Resource Server 都驗證：
		* Gateway 驗證：攔截非法請求（減少後端壓力）
		* Resource Server 驗證：確保即使繞過 Gateway 也無法直接存取