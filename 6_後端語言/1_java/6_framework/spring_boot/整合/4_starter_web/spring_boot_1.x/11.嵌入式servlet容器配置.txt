1.ConfigurableEmabeddedServletContainer
2.EmabeddedServletContainerCustomizer
3.註冊 Servlet、Filter、Listener
	由於SpringBoot默認是以jar包方式嵌入式的Servlet容器來啟動SpringBoot的web應用，沒有web.xml
	自行 spring boot configuration ioc 註冊
		ServletRegistrationBean
		FilterRegistrationBean
		ServletListenerRegistrationBean

	SpringBoot幫我們自動SpringMVC的時候，自動註冊SpringMVC的前端 DispatcherServlet
		DispatcherServletAutoConfiguration
		默認攔截: / 所有請求;包靜態資源，但不含jsp請求;
			/* 會攔截 包含jsp請求

4.使用其他 servlet 容器
	// 預設 tomcat
	jetty (適合應用長鏈結 long time connection: 如聊天系統)
	Undertow(不支持 jsp，高併發)

問題
	1.如何訂製和修改 Servlet 容器 的相關配置
		1.1.修改server有關配置(ServerProperties 也是 EmabeddedServletContainerCustomizer)
			server.port=8081
			server.context-path=/crud
			server.tomcat.uri-encoding=UTF-8

			// 通用 servlet 容器配置
			server.xxx
			// Tomcat 的設置
			server.tomcat.xxx
		1.2.編寫一個 EmabeddedServletContainerCustomizer : 嵌入式的servlet容器的訂製器，來配置servlet的配置
			src/main/java/.../config/MyConfig.java

				@Configuration
				public class MyConfig extends WebMvcConfigurationAdapter {

					@Bean
					public EmabeddedServletContainerCustomizer emabeddedServletContainerCustomizer(){
						return new EmabeddedServletContainerCustomizer(){
							@Override
							public void customize(ConfigurableEmabeddedServletContainer container){
								container.setPort(8083);
							}
						}

					}
				}

	2.如何註冊Servlet、Filter、Listener，以前是 web.xml
		src/main/java/.../servlet/MyServlet.java
			public class MyServlet extends HttpServlet {
				@Override
				protected void doGet(HttpServletRequest request, HttpServletRespose respose) throws ServletException, IOException{
					doPost();
				}

				@Override
				protected void doPost(HttpServletRequest request, HttpServletRespose respose) throws ServletException, IOException{
					respose.getWriter().write( s:"Hello MyServlet");
				}
			}

		src/main/java/.../filter/MyFilter.java
			public class MyFilter implements Filter {
				@Override
				public void init(FilterConfig config) throws ServletException{

				}

				@Override
				public void doFilter(ServletRequest request, ServletRespose respose,FilterChain chain) throws IOException{
					System.out.println("MyFilter process...");
					chain.doFilter(request, respose);
				}

				@Override
				public void destory(){
				}
			}
		src/main/java/.../listener/MyListener.java
			public class MyListener implements ServletContextListener {
				@Override
				public void contextInitialed(ServletContextEvent sce) {
					System.out.println("contextInitialed ... web應用啟動");
				}

				@Override
				public void contextDestory(){
					System.out.println("contextDestoryed ... 當前web應用啟動銷毀");
				}
			}
		src/main/java/.../config/MyServerConfig.java
			@Configuration
			public class MyServerConfig extends WebMvcConfigurationAdapter {

				// 註冊三大組件之一 Servlet
				public ServletRegistrationBean myServlet(){
					ServletRegistrationBean registrationBean = new ServletRegistrationBean(new MyServlet(), ...urlMapping:"/myServlet");
					return registrationBean;
				}

				// 註冊三大組件之一 Filter
				public FilterRegistrationBean myFilter(){
					FilterRegistrationBean registrationBean = new FilterRegistrationBean();
					registrationBean.setFilter(new MyFilter());
					registrationBean.setUrlPatterns(Arrays.aslist("/hello","/myServlet"));
					return registrationBean;
				}

				// 註冊三大組件之一 Listener
				public ServletListenerRegistrationBean myListener(){
					ServletListenerRegistrationBean registrationBean = new ServletListenerRegistrationBean<MyListener>(new MyListener());
					return registrationBean;
				}

				@Bean
				public EmabeddedServletContainerCustomizer emabeddedServletContainerCustomizer(){
					return new EmabeddedServletContainerCustomizer(){
						@Override
						public void customize(ConfigurableEmabeddedServletContainer container){
							container.setPort(8083);
						}
					}
				}
			}

	3.SpringBoot能不能支持其他 Servlet 容器?
		pom.xml
			exclude tomcat
				<groupId>spring-boot-starter-tomcat</groupId>
				<artifactId>org.springframework.boot</artifactId>

			dependency jetty
				<groupId>spring-boot-starter-jetty</groupId>
				<artifactId>org.springframework.boot</artifactId>
			dependency Undertow
				<groupId>spring-boot-starter-undertow</groupId>
				<artifactId>org.springframework.boot</artifactId>