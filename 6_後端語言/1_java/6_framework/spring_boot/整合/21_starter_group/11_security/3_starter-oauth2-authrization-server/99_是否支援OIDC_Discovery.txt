ref chatGPT

一、如何判斷 AS 是否完整支援 OIDC Discovery
	一個完整支援的 Authorization Server 應該在：
		{issuerUri}/.well-known/openid-configuration
	
	上能回出 JSON，裡面至少有：
		{
		  "issuer": "https://as.example.com",
		  "token_endpoint": "https://as.example.com/oauth2/token",
		  "jwks_uri": "https://as.example.com/oauth2/jwks",
		  ...
		}
	你可以檢查方式：
		curl -k https://as.cloud.example.com/.well-known/openid-configuration | jq .
	正常情況會看到：
		* issuer 值與你預期一致。
		* token_endpoint 與 jwks_uri 都存在。
		* HTTP 狀態碼 200。
	異常或「不完整支援」的常見情況：
		| 現象                                      | 判斷                                                                        |
		| --------------------------------------- | ------------------------------------------------------------------------- |
		| 回 404 / 403                             | 沒啟用 Discovery（有些舊版 Spring Authorization Server、Keycloak custom realm 未開啟） |
		| 回 JSON 但缺 `jwks_uri` 或 `token_endpoint` | 半支援（例如自訂 Spring AS 只 expose `/oauth2/jwks`）                               |
		| `issuer` 欄位和實際 URL 不一致                  | 部署 behind proxy/CDN 時未修正 base URL                                         |
		| 需要 Authorization Header 才能查             | 被誤設成需認證 API（錯誤配置）                                                         |
		→ 一旦出現以上狀況，就該在 seed 顯式設定 tokenUri / jwksUri。

二、如何決定哪些 zone 要顯式指定端點
	判斷原則是「Discovery 是否能在該 zone 被安全、可靠地呼叫」：
		| Zone                       | 狀況                                         | 建議設定                                                               |
		| -------------------------- | ------------------------------------------ | ------------------------------------------------------------------ |
		| **雲端（Cloud）**             | AS 位於公開域，Discovery 可正常取得                   | 僅 `issuerUri` 即可                                                   |
		| **雲到地 (C2P)**             | 雲側可達地端 AS，但地端 AS 通常在私網域，Discovery 可能被防火牆阻擋 | 顯式設定 `tokenEndpoint`（走 mTLS / gateway URL）與 `jwksUri`（走 CDN 或反向代理） |
		| **地端 (C2PE)**              | 在封閉網段或內網內，CI/CD、其他 zone 無法打到 `.well-known` | 建議顯式設定兩個 URI；Discovery fallback 可能永遠失敗                             |
		| **測試 / 模擬環境**            | 常用 Docker Compose / localhost              | 用 issuerUri 即可，Discovery 通常可通過                                     |
		| **異地多 AS 拓撲（多 issuer）** | 各 zone 可能同網域不同 path                        | 顯式給端點最穩，避免 discovery cache 污染                                      |


三、實務建議：自動診斷 + Fallback 機制
	seed CLI / catalog loader 可以幫忙自動「探測 + 記錄」，這樣你不需人工猜
		for (IssuerDefinition issuer : seed.getIssuers()) {
			if (issuer.getTokenEndpoint() == null || issuer.getJwksUri() == null) {
				try {
					var discovery = webClient.get()
						.uri(issuer.getIssuerUri() + "/.well-known/openid-configuration")
						.retrieve()
						.bodyToMono(Map.class)
						.block(Duration.ofSeconds(5));

					log.info("✅ Discovery OK for {}", issuer.getAlias());
					issuer.fillFromDiscovery(discovery);

				} catch (Exception e) {
					log.warn("⚠️ Discovery failed for {} ({}): {}", issuer.getAlias(),
						issuer.getIssuerUri(), e.getMessage());
					// 標註 warning，或允許 --allow-missing-discovery=false 強制失敗
				}
			}
		}

	再把診斷結果輸出成報表，例如：
		[validate] as.cloud.example.com   ✅ Discovery OK
		[validate] as.c2p.example.com     ⚠️ Missing token_endpoint (use seed override)
		[validate] as.edge.example.com    ❌ Not reachable (add tokenUri/jwksUri)

四、實戰命名建議（整理）
	| 欄位             | 必填     | 來源                          | 備註                    |
	| --------------- | ------- | --------------------------- | --------------------- |
	| `issuerUri`     | ✅      | 唯一識別一個 AS                   | 可用於 discovery         |
	| `tokenEndpoint` | ⬜（可選） | 需 discovery / seed override | 若有 mTLS gateway 建議顯式填 |
	| `jwksUri`       | ⬜（可選） | 需 discovery / seed override | 若 JWKS 經 CDN 建議顯式填    |


五、總結：決策樹
	每個 issuer 檢查：
	 ├─ 能透過 .well-known/openid-configuration 成功拿到 token_endpoint + jwks_uri ?
	 │    ├─ 是 → seed 只填 issuerUri
	 │    └─ 否 → seed 顯式填 tokenEndpoint、jwksUri
	 │
	 └─ 該 zone 無法直接呼叫 AS (air-gap / proxy / NAT / firewall) ?
		  └─ 是 → seed 必填 tokenEndpoint、jwksUri（指定 gateway / CDN URL）

一般 spring boot 預設支援 OIDC Discovery，但因為環境與其他需求關係需要顯示設定/覆蓋
	結論
		| 使用情境                                                             | 建議設定                             |
		| ---------------------------------------------------------------- | -------------------------------- |
		| 單一環境（local / sit / prod），AS = Spring Authorization Server，內網皆可直連 | **只要 issuerUri 即可**              |
		| 有 zone 隔離（C / C2P / C2PE），或要透過 proxy、gateway、CDN                 | **顯式列出 tokenEndpoint / jwksUri** |
		| 有自訂 path、mTLS、CDN、或灰度需求                                          | **顯式列出**                         |
		| 自動化 CLI seed 初始化器想加上 fallback 機制                                 | **允許這三欄都出現，但都可選擇性補齊**            |

	① 雲↔地 多區架構時，「issuerUri」不一定能被所有 zone 正確 resolve
		| 區域          | URL                                                        | 可達性                      |
		| ------------ | ---------------------------------------------------------- | ------------------------ |
		| 雲端服務       | [https://auth.cloud.internal](https://auth.cloud.internal) | ✅                        |
		| 地端服務       | [https://auth.onprem.local](https://auth.onprem.local)     | 🚫 無法直接連雲端 `.well-known` |
		| C2P Gateway  | [https://as.c2p.cloudedge](https://as.c2p.cloudedge)       | ✅ 但內部再轉 proxy            |
		→ 所以就算 Auth Server 支援 Discovery，
			也有可能下游 client 在該 zone 打不到 .well-known/openid-configuration。
			這時 seed 檔顯式列出 tokenEndpoint / jwksUri 就變成一種「zone 級別的 cache」。
	
	② 某些安全性設定會關閉或遮蔽 Discovery
		例子：
			* 你若在 SecurityFilterChain 調整過 /oauth2/** 的權限，意外把 .well-known/openid-configuration 也納入 security filter → 403。
			* 你若有 external reverse proxy（例如 Nginx 只代理 /oauth2/token 而沒有 /oauth2/jwks）→ Discovery JSON 缺欄位。
			* 你若用 custom ProviderSettings 變更 endpoint path → Discovery JSON 不完整。
			* 或者某些企業防火牆會擋 .well-known。

		所以我建議 seed 允許覆蓋，但不是必填。
	
	③ 有時需要指定「替代端點」（mTLS / edge / CDN）
		例如：
			* token_endpoint 走 mTLS → https://mtls.auth.local/oauth2/token
			* jwks_uri 放 CDN → https://cdn.example.com/.well-known/jwks.json
		這兩個都不在同一個 issuer 網域下，所以不能完全依賴 Discovery。
	
	④ 災難回復或版本切換時的「固定化」
		當你要做：
			* 灰度部署新 Auth Server（新版本或新 cluster）；
			* 將舊 issuerUri 指向新主機前；
			* 想要暫時固定 JWKS URL 不變（方便 CDN 快取）；
		這時若一律靠 Discovery → 你會被 dynamic 結果綁死。
		而 seed 裡顯式寫明 endpoint，可以確保「client 配置在切換過程不受影響」。