ref ChatGPT

1.jwk oauth2_authorization 紀錄的使用狀況
2.建議持久化 oauth2_registered_client 的資料

最少需要的資料表

	1.oauth2_auth_server jwk rotation 用
		jwk_rotation_policy * ref 3_8_資料表_jwk_rotation
		jwk_key *
		jwk_meta 快取版本控制用
		jwk_rotation_event * ref 3_8_資料表_jwk_rotation
		jwk_denylist *
		總結建議
			* 最小可行：jwk_key + jwk_denylist（KID 與 JTI 兩種型態都支援）。
			* 需要熱調策略/合規審計：再加 jwk_rotation_policy、jwk_rotation_event。
			* 分散式一致的 JWKS/ETag：傾向放 分散式快取（而非 DB 表）。

	2.oauth2_Registered_Client 相關（必要）
		客戶註冊資訊
			1) Registered Client（客戶註冊資訊），ref RegisteredClient
				oauth2_registered_client_secret_policy		   	# 主表 policy of client_secret
				oauth2_registered_client_secret_rotation 		# client_secret 紀錄表 : 旋轉 client_secret 用

				oauth2_registered_client : 主表
					子表
						oauth2_client_auth_method				# （若需要同時允許多種）
							對應 spring-security-oauth2-authorization-server.RegisteredClient.Set<ClientAuthenticationMethod> clientAuthenticationMethods
						oauth2_client_grant_type				# 例：authorization_code, client_credentials, refresh_token, device_code
							對應 spring-security-oauth2-authorization-server.RegisteredClient.Set<AuthorizationGrantType> authorizationGrantTypes
						oauth2_client_redirect_uri  			# 認證模式需要用到
							對應 spring-security-oauth2-authorization-server.RegisteredClient.Set<String> redirectUris
						oauth2_client_post_logout_redirect_uri	# 認證模式需要用到 （如用 OIDC RP-Logout）
							對應 spring-security-oauth2-authorization-server.RegisteredClient.Set<String> postLogoutRedirectUris
						oauth2_client_scope                     # 僅客戶端「宣告」可申請的範圍
							對應 spring-security-oauth2-authorization-server.RegisteredClient.Set<String> scopes

					其他延伸	
						oauth2_client_resource_indicator		# （如採用 RFC 8707 resource indicators）
						oauth2_client_audience                  # （如採用 audience 驗證）
			
			2) Token / JWT 設定（每 Client 可覆寫）
				oauth2_client_token_settings
				oauth2_client_jwt_settings
					子表
						oauth2_client_jwe_settings              # option

			* 放 client 的靜態設定：client_id、client_secret（或其它認證方式）、授權模式（client_credentials）、scope、token/ID Token 的設定（存活時間、是否使用自含式 JWT、簽章演算法等）。
		
	// 3.oauth2_authorization（強烈建議）
		* 放「已核發的存取權杖」及其狀態與附加資訊：access_token（含到期時間、claims）、refresh_token（若有）、attributes/metadata 等。
		* 即使是 M2M，多數系統還是會保留這張表以便稽核、撤銷、疑難排除。

	// 4.oauth2_authorization_consent（M2M 通常不需要）
		* 以使用者同意為核心的情境才會用到；client_credentials 不會用。

	5.key rotation 排程用的 shedlock table 確保一個排程執行
		shedlock

	非 RegisteredClient 用的 table 「用在什麼時候、給誰用」
		1.這幾張是「發行時的政策/規則」：
			audience 決策、簽章選擇、加密策略、Claims 對映，不進 RegisteredClient，而是被 Service 在授權/發 Token/回應組裝時查表使用。
		2.好處是把客戶端註冊（穩定資料）與發行策略（常變動、可覆寫、可審核）解耦，後續要擴 OIDC/多 Issuer/多 alg/JWE 都能加規則而不用改 RegisteredClient 結構

			oauth2_client_resource_indicator
				* 做什麼：列出此 client 允許帶的 resource（RFC 8707）。
				* 什麼時候查：
					* /authorize（授權碼）或 /token（client_credentials）收到 resource 參數時，用來驗證白名單。
				* 誰用：你自訂的 AudienceService / 請求驗證器（AuthorizationEndpoint/TokenEndpoint 的 validator）。

			oauth2_client_audience
				* 做什麼：宣告 client 能拿到的受眾（audience）白名單。
				* 什麼時候查：
					* 決定 Access Token 的 aud 時，將請求的 resource或scope 推導的預設 audience與此白名單取交集。
				* 誰用：AudienceService（在 OAuth2TokenCustomizer<JwtEncodingContext> 被呼叫）。
			
			oauth2_scope_resource
				* 做什麼：把 scope 映射到預設 audience（當請求沒帶 resource 時）。
				* 什麼時候查：計算預設 audience；同上由 AudienceService 使用。
			
			oauth2_resource
				* 做什麼：資源伺服器主檔（aud、描述、可選 jwks_uri）。
				* 什麼時候查：
					* 驗證 aud 是否存在/啟用；
					* 若你要做 JWE 給資源端（罕見），可用 jwks_uri 取 RS 公鑰。
				* 誰用：AudienceService（存在性/啟用檢查）、JwePolicyService（若做加密）。

			token_signing_selection
				* 做什麼：決定 哪種 alg/purpose 用來簽哪一類 token（access_token/id_token/userinfo/introspection），可做 GLOBAL 或 CLIENT 覆寫，並有 priority。
				* 什麼時候查：
					* 發 Token 前，決定要用的簽章 alg 與（間接）kid；
					* 之後去你的 jwk_key 表挑該 alg 的 ACTIVE key。
				* 誰用：SigningSelector（你自訂的服務），被 JWKSource / JwtEncoder 呼叫。
			
			oauth2_client_jwe_settings
				* 做什麼：客戶端層級的加密策略（要不要加密、enc_alg/enc_enc、哪些回應要加密：id_token / userinfo / introspection…）。
				* 什麼時候查：
					* 你決定要把 ID Token 或其他回應做 JWE 時。SAS 預設只簽不加密，做 JWE 需自訂 encoder/回應器。
				* 誰用：JwePolicyService（由 OAuth2TokenCustomizer 或自訂 JwtEncoder/response handler 採用）。
			
			jwt_claim_mapping
				* 做什麼：可配置的 自訂 claims 規則（依 issuer/client/scope/grant_type/token_type…）。source/expression 可用 FIXED/USER_ATTR/SQL/HTTP/SPEL 等。
				* 什麼時候查：
					* 發 Token（特別是 Access Token、也可含 ID Token）時組 claims。
				* 誰用：ClaimRuleService，在 OAuth2TokenCustomizer<JwtEncodingContext> 內被呼叫，將結果 ctx.getClaims().claim(k,v)。

			一圖流：整體掛點
				* /authorize（如用授權碼）：AudienceService 驗 resource → 決議 audiences → 存進 Authorization attributes
				* /token：
					* SigningSelector 查 token_signing_selection → 選 alg（→ 你 jwk_key 挑 ACTIVE key）
					* AudienceService 決 aud（resource/scope + client 白名單）
					* ClaimRuleService 根據 jwt_claim_mapping 塞自訂 claims
					* （可選）JwePolicyService 依 oauth2_client_jwe_settings 決定是否改走 JWE encoder

				* /userinfo / introspection：同樣可用 jwt_claim_mapping 與（可選）oauth2_client_jwe_settings