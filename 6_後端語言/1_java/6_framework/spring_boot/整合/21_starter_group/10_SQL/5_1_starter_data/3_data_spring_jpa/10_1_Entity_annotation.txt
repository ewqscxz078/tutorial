https://ithelp.ithome.com.tw/articles/10318566?sc=rss.qu

@Entity
	被視為一個可持久化的實體，它的實例可以被存儲到數據庫中，並且可以通過JPA進行管理
@Table
	可以指定表名(name)、索引(indexes)、唯一約束(uniqueConstraints)等
@Id
	指定實體類別中的一個欄位作為主鍵，該欄位將映射到數據庫表的主鍵欄位。
@GeneratedValue
	設定主鍵的生成策略，可以是自動增長、UUID、序列等方式
		GenerationType.IDENTITY：
			由數據庫自動增長來生成主鍵值（適用於支持自動增長的數據庫，如 MySQL 的 AUTO_INCREMENT）。
		GenerationType.AUTO：
			由 JPA 驅動自動選擇適合的主鍵生成策略（這是預設值）。
		GenerationType.SEQUENCE：
			使用數據庫的序列來生成主鍵值（適用於支持序列的數據庫，如 Oracle）。
		GenerationType.TABLE：
			使用一個特定的數據庫表來保存主鍵的生成狀態。
		GenerationType.UUID：
			使用 UUID（通用唯一標識符）來生成主鍵值。

		https://www.baeldung.com/java-hibernate-uuid-primary-key
			JPA/Jakarta Specification
				@Id
				@GeneratedValue(strategy = GenerationType.UUID)
			Hibernate 6.2 之前
				@Id
				@GeneratedValue(generator = "UUID")
				@GenericGenerator(
					name = "UUID",
					strategy = "org.hibernate.id.UUIDGenerator"
				)

@Column
	指定列名、長度、是否允許為空等
		name：
			用於指定該屬性在數據庫表中對應的列名稱。默認情況下，列名將與屬性名稱相同。
		unique：
			屬性是否唯一
		nullable：
			指示該屬性是否可以為空（true 表示可為空，false 表示不可為空）。默認值為 true。
		length：
			用於指定列的最大長度（僅適用於 String 屬性）。
		precision 和 scale：
			用於指定數值類型屬性的精度和小數位數。

	@Basic(fetch = FetchType.LAZY)
		* 對大型欄位（尤其是密鑰）常見做法：只有用到時才抓，避免每次 query 都把整個密文載回。
		* Hibernate 會幫你用 bytecode enhancement 或者 secondary select 延遲載入。
		* ⚠️ 前提是你有啟用 Hibernate 的 lazy load enhancement，否則有時會被忽略。

	常見資料庫欄位轉換
		db varchar/char 轉 java String
			@Column(name="db_column_name", length = ${資料庫.table.column_size})
		db int 轉 java int
			@Column(name="db_column_name") // 讓其底層自動判定轉換
		db bigint 轉 java long
			@Column(name="db_column_name") // 讓其底層自動判定轉換
		db datetime 轉 java date
			@Column(name="db_column_name", columnDefinition = "datetime")
				指定了資料庫中列的類型為 datetime 類型，而不是讓 JPA 自動選擇適當的類型
			或
			@Temporal(TemporalType.TIMESTAMP)
			@Column(name = "db_column_name")
				JPA 會根據資料庫類型自動選擇適當的對應策略，你不需要直接指定資料庫中列的類型

		db VARBINARY(MAX)
			@Lob
				* 告訴 JPA 這個欄位是大型物件（binary LOB）。
				* 在 Hibernate + MSSQL 上，會把 byte[] → VARBINARY(MAX) 對應正確。
				* 如果你沒加 @Lob，單純的 byte[] 預設會變成 VARBINARY(255)（長度有限制）。
			
			如果你完全不想依賴 @Lob，也可以直接指定：
				@Column(name = "private_pkcs8", columnDefinition = "VARBINARY(MAX)")
				private byte[] privatePkcs8;			

@Transient
	指定某 entity 欄位不轉換到資料庫


@OneToOne
	建立實體類別之間的一對一關係映射

@OneToMany
	建立一對多的關係映射，在一端實體類別中使用該註解，表示一個對多的關係，可以將多個子實體關聯到同一個父實體

@ManyToOne
	建立多對一的關係映射，在多端實體類別中使用該註解，表示多個子實體關聯到同一個父實體

@ManyToMany
	建立多對多的關係映射，需要中介表來存儲關聯關係，用於表示一個實體可以關聯多個其他實體

@JoinColumn
	設定關聯表之間的外鍵映射。在多對一或一對多關係中，用於指定關聯的外鍵欄位。


