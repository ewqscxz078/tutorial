https://www.youtube.com/watch?v=yFI4QwPZMew&list=PLmOn9nNkQxJFKh2PMfWbGT7RVuMowsx-u&index=80&ab_channel=%E5%B0%9A%E7%A1%85%E8%B0%B7IT%E5%9F%B9%E8%AE%AD%E5%AD%A6%E6%A0%A1

https://www.baeldung.com/spring-boot-admin
https://cloud.tencent.com/developer/article/1936666
https://docs.spring-boot-admin.com/2.7.10/#_securing_spring_boot_admin_server


說明文件
	https://codecentric.github.io/spring-boot-admin/current/


Spring Boot Admin server
	pom.xml
		<dependency>
			<groupId>de.codecentric</groupId>
			<artifactId>spring-boot-admin-starter-server</artifactId>
			<!-- <version>2.4.0-SNAPSHOT</version> -->
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

	SpringBootAdminApplication.java
		@SpringBootApplication
		@EnableAdminServer
		public class SpringBootAdminApplication {
			public static void main(String[] args) {
				SpringApplication.run(SpringBootAdminApplication.class, args);
			}
		}


Spring Boot Admin Client
	pom.xml
		<dependency>
			<groupId>de.codecentric</groupId>
			<artifactId>spring-boot-admin-starter-client</artifactId>
			<!-- <version>2.4.0-SNAPSHOT</version> -->
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>

	application.yml
		# open all endpoints actuator/**
		management.endpoints.web.exposure.include: *
		management.endpoint.health.show-details: always

	SecurityPermitAllConfig.java
		@Configuration
		public static class SecurityPermitAllConfig extends WebSecurityConfigurerAdapter {
			@Override
			protected void configure(HttpSecurity http) throws Exception {
				http.authorizeRequests().anyRequest().permitAll()
					.and().csrf().disable();
			}
		}

開啟 Spring Boot Admin server 啟動
	http://localhost:8888/

https://www.baeldung.com/spring-boot-admin
Security Configuration
	Spring Boot Admin server
		pom.xml
			<dependency>
				<groupId>de.codecentric</groupId>
				<artifactId>spring-boot-admin-server-ui</artifactId>
				<!-- <version>1.5.7</version> -->
			</dependency>
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-security</artifactId>
				<!-- <version>2.4.0</version> -->
			</dependency>

		WebSecurityConfig.java
			@Configuration
			@EnableWebSecurity
			public class WebSecurityConfig {
				private final AdminServerProperties adminServer;
				private SecurityProperties security;

				public WebSecurityConfig(AdminServerProperties adminServer, SecurityProperties security) {
					this.adminServer = adminServer;
					this.security = security;
				}

				@Bean
				public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
					SavedRequestAwareAuthenticationSuccessHandler successHandler =
					  new SavedRequestAwareAuthenticationSuccessHandler();
					successHandler.setTargetUrlParameter("redirectTo");
					successHandler.setDefaultTargetUrl(this.adminServer.getContextPath() + "/");

					http
						.authorizeRequests()
							.antMatchers(this.adminServer.getContextPath() + "/assets/**").permitAll()
							.antMatchers(this.adminServer.getContextPath() + "/login").permitAll()
							.anyRequest().authenticated()
							.and()
						.formLogin()
							.loginPage(this.adminServer.getContextPath() + "/login")
							.successHandler(successHandler)
							.and()
						.logout()
							.logoutUrl(this.adminServer.getContextPath() + "/logout")
							.and()
						.httpBasic()
							.and()
						.csrf()
							.csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse())
							.ignoringRequestMatchers(
							  new AntPathRequestMatcher(this.adminServer.getContextPath() +
							   "/instances", HttpMethod.POST.toString()),
							  new AntPathRequestMatcher(this.adminServer.getContextPath() +
							   "/instances/*", HttpMethod.DELETE.toString()),
							  new AntPathRequestMatcher(this.adminServer.getContextPath() + "/actuator/**"))
							.and()
						.rememberMe()
							.key(UUID.randomUUID().toString())
							.tokenValiditySeconds(1209600);
					return http.build();
				}
				@Bean
				InMemoryUserDetailsManager userDetailsService(final PasswordEncoder passwordEncoder) throws Exception {
					final UserDetails user = User.withUsername(this.security.getUser().getName()) //
							.password(passwordEncoder.encode(this.security.getUser().getPassword())).roles("USER").build();
					return new InMemoryUserDetailsManager(user);
				}
				@Bean
				PasswordEncoder passwordEncoder() {
					return new BCryptPasswordEncoder();
				}
			}

	Spring Boot Admin Client
		application.yml
			# 影響 spring boot admin server 看到的字眼
			spring.application.name=${SYS_NAME}

			spring.security:
			  user:
				name: ${client-可以存取 actuator/** 的帳號}
				password: ${client-可以存取 actuator/** 的密碼}

			spring.boot.admin.client:
			# spring boot admin client where to connect to spring boot admin server url
			  url: http://localhost:8888/admin
			# spring boot admin client how to login spring boot admin server
			  username: ${admin-server-username}
			  password: ${admin-server-password}

			# 如何讓 spring boot admin server 登入到 spring boot admin client instance ?
			  instance:
				prefer-ip: true # 使用ip註冊不然預設使用當前機器名稱，影響 spring boot admin server 開啟的 url
				metadata:
				  user:
					name: ${spring.security.user.name}
					password: ${spring.security.user.password}

	Spring Boot Admin server
		application.yml
			server.port=8888

			spring.security:
			  user:
				name: ${admin-server-username}
				password: ${admin-server-password}

			spring.boot.admin:
			  ui.title: SB Admin title
			  contextPath: admin
			# 讓 admin server access client 帳密
			  instance-auth:
				enabled: true
				default-user-name: ${client-user-name}
				default-password: ${client-password}

logger 建議處理
	admin server
		error level
	admin client
		1.error level
		2.若 debug = true
			org.springframework.web = error // 避免 server 打 client 過度 log

1.優點
	動態修改 log level
	instance
		download thread dump
		view actuator/info、health 資訊
2.缺點
	要維護 admin server url
		   client 存取的認證帳密
