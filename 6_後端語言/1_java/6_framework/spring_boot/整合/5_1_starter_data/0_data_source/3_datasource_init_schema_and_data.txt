
Database Initialization
	https://www.baeldung.com/spring-boot-data-sql-and-schema-sql


1.@Entity  class > Spring Boot will create an empty table

2.application.yml
	spring.jpa.defer-datasource-initialization=true 告知 Hibernate 初始資料表後才執行  data.sql

3.data.sql # 預設情況下，data.sql 腳本在 Hibernate 初始化之前執行

4.並搭配
	spring.sql.init.mode=always 初始化腳本


#jpa 兩種模式
	1.適合開發或測試階段，實體類修改後可以自動生成新表 ddl-auto: create-drop
		僅適合測試非特定資料庫sql 用
		1.初始資料庫 table schema : 透過 spring.jpa.hibernate.ddl-auto: create-drop 依據 entity 生成 h2 database 裡的 table
		2.初始資料庫 data 或 schema : 透過
			spring.jpa.defer-datasource-initialization: true  # 告知 Hibernate 初始資料表後才執行  data.sql
			spring.sql.init.mode: always # always、embedded(預設值)、never 宣告 sql 初始化模式設定，但看起來不會特別設定即可work
			spring.sql.init.data-locations: classpath:db/data/*.sql #指定要 init data sql 檔案
			spring.sql.init.schema-location: classpath:db/schema/*.sql # 一般比較少用
			// h2 預設 sql 會將沒有雙引號包住的字串轉大寫，yml 搭配 DATABASE_TO_UPPER=false 並將 sql 欄位用雙引號包住可保持大小寫，不然會跳出欄位名稱不存在的錯誤

		spring:
		  jpa:
		    defer-datasource-initialization: true
			show-sql: true # console顯示 sql 預設 false
			hibernate:
			  ddl-auto: create-drop # DDL 生成模式 : none, validate, update, create, and create-drop
			properties:
			  hibernate:
				'[format_sql]': true # real pretty sql format
				'[globally_quoted_identifiers]': true #確保將保留字使用雙引號處理
		  sql:
			init: # ref SqlInitializationProperties
				#     1.直接指定路徑方式
			  #schema-locations: classpath:db/schema/*.sql
			  data-locations: classpath:db/data/*.sql

	2.適合生產環境，數據表不會因實體變化自動生成或刪除，減少風險 ddl-auto: none + 指定資料匯入
	  jpa:
		show-sql: true # console顯示 sql 預設 false
		hibernate:
		  ddl-auto: none # DDL 生成模式 : none, validate, update, create, and create-drop
		properties:
		  hibernate:
			'[format_sql]': true # real pretty sql format
			#'[globally_quoted_identifiers]': true #確保將保留字使用雙引號處理

	#  sql:
	#	init: # ref SqlInitializationProperties
	#     1.直接指定路徑方式
	#	  schema-locations: classpath:db/schema/*.sql
	#	  data-locations: classpath:db/data/*.sql
	#	  mode: always #確保每次啟動都執行初始化 SQL
	#     2.透過 platform 載入預定的檔案
	#     platform: postgresql # 確保使用什麼資料庫平台初始化 schema-locations、data-locations 語法正確 (hsqldb, h2, oracle, mysql, postgresql)
	#     data-${platform}.sql 指定載入
	#     schema-${platform}.sql 指定載入


spring:
  jpa:
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
			#告訴 Hibernate 使用 PostgreSQL 的方言來生成 SQL 語句，並為 PostgreSQL 提供特定的支持。這影響到 Hibernate 如何構造查詢和 DDL，並確保使用 PostgreSQL 的特定功能和數據類型

    hibernate:
	  ddl-auto: none
		# Hibernate 不會對資料庫結構進行任何操作，適合於穩定的生產環境。
	  ddl-auto: create-drop
		# Hibernate 會在每次啟動和關閉應用程式時自動創建和刪除資料表，適合於開發或測試階段
	  ddl-auto: updat
	    # Hibernate 僅更新資料表結構，不刪除或重建