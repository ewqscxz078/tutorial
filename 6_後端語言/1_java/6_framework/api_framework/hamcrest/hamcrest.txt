https://www.baeldung.com/java-junit-hamcrest-guide

提供相對於 junit 較可讀性的測試 api
========================================================================================================================
=================================== maven dependency ===================================================================
========================================================================================================================
	<dependency>
		<groupId>org.hamcrest</groupId>
		<artifactId>hamcrest-all</artifactId>
		<version>1.3</version>
	</dependency>
========================================================================================================================
=================================== 物件匹配(The Object Matcher) =======================================================
========================================================================================================================
物件 toString 相等
	@Test
	public void givenBean_whenToStringReturnsRequiredString_thenCorrect(){
		Person person=new Person("Barrack", "Washington");
		String str=person.toString();
		assertThat(person,hasToString(str));
	}
類別是否為其子類別
	@Test
	public void given2Classes_whenOneInheritsFromOther_thenCorrect(){
			assertThat(Cat.class,typeCompatibleWith(Animal.class));
		}
	}

========================================================================================================================
=================================== POJO 物件匹配(The Bean Matcher) ====================================================
========================================================================================================================
public class Person {
    String name;
    String address;

    public Person(String personName, String personAddress) {
        name = personName;
        address = personAddress;
    }
}

物件裡應有特定屬性
	@Test
	public void givenBean_whenHasValue_thenCorrect() {
		Person person = new Person("Baeldung", 25);
		assertThat(person, hasProperty("name"));
	}

物件裡應有特定屬性的值
	@Test
	public void givenBean_whenHasCorrectValue_thenCorrect() {
		Person person = new Person("Baeldung", "New York");
		assertThat(person, hasProperty("address", equalTo("New York")));
	}
兩個物件屬性應皆相同
	@Test
	public void given2Beans_whenHavingSameValues_thenCorrect() {
		Person person1 = new Person("Baeldung", "New York");
		Person person2 = new Person("Baeldung", "New York");
		assertThat(person1, samePropertyValuesAs(person2));
	}
========================================================================================================================
=================================== 集合物件匹配(The Collection Matcher) ===============================================
========================================================================================================================
集合物件應為空
	@Test
	public void givenCollection_whenEmpty_thenCorrect() {
		List<String> emptyList = new ArrayList<>();
		assertThat(emptyList, empty());
	}

集合物件應為指定大小
	@Test
	public void givenAList_whenChecksSize_thenCorrect() {
		List<String> hamcrestMatchers = Arrays.asList(
		  "collections", "beans", "text", "number");
		assertThat(hamcrestMatchers, hasSize(4));
	}

陣列應為指定大小
	@Test
	public void givenArray_whenChecksSize_thenCorrect() {
		String[] hamcrestMatchers = { "collections", "beans", "text", "number" };
		assertThat(hamcrestMatchers, arrayWithSize(4));
	}

集合物件順訊應為指定順序
	@Test
	public void givenAListAndValues_whenChecksListForGivenValuesWithOrder_thenCorrect() {
		List<String> hamcrestMatchers = Arrays.asList(
		  "collections", "beans", "text", "number");
		assertThat(hamcrestMatchers,
		contains("collections", "beans", "text", "number"));
	}

陣列應含有指定成員項目
	@Test
	public void givenArrayAndValue_whenValueFoundInArray_thenCorrect() {
		String[] hamcrestMatchers = { "collections", "beans", "text", "number" };
		assertThat(hamcrestMatchers, hasItemInArray("text"));
	}

字串應為陣列項目其中之一
	@Test
	public void givenValueAndArray_whenValueIsOneOfArrayElements_thenCorrect() {
		String[] hamcrestMatchers = { "collections", "beans", "text", "number" };
		assertThat("text", isOneOf(hamcrestMatchers));
	}

字串應在陣列項目之中
	@Test
	public void givenValueAndArray_whenValueFoundInArray_thenCorrect() {
		String[] array = new String[] { "collections", "beans", "text",
		  "number" };
		assertThat("beans", isIn(array));
	}

陣列每個元素皆包含，不管元素順序
	@Test
	public void givenArrayAndValues_whenValuesFoundInArray_thenCorrect() {
		String[] hamcrestMatchers = { "collections", "beans", "text", "number" };
		  assertThat(hamcrestMatchers,
		arrayContainingInAnyOrder("beans", "collections", "number",
		  "text"));
	}
陣列每個元素皆包含，且元素順序相同
	@Test
	public void givenArrayAndValues_whenValuesFoundInArrayInOrder_thenCorrect() {
		String[] hamcrestMatchers = { "collections", "beans", "text", "number" };
		assertThat(hamcrestMatchers,
		arrayContaining("collections", "beans", "text", "number"));
	}

map 集合物件應包含key
	@Test
	public void givenMapAndKey_whenKeyFoundInMap_thenCorrect() {
		Map<String, String> map = new HashMap<>();
		map.put("blogname", "baeldung");
		assertThat(map, hasKey("blogname"));
	}

map 集合物件應包含value
	@Test
	public void givenMapAndValue_whenValueFoundInMap_thenCorrect() {
		Map<String, String> map = new HashMap<>();
		map.put("blogname", "baeldung");
		assertThat(map, hasValue("baeldung"));
	}

map 集合物件應包含key:value
	@Test
	public void givenMapAndEntry_whenEntryFoundInMap_thenCorrect() {
		Map<String, String> map = new HashMap<>();
		map.put("blogname", "baeldung");
		assertThat(map, hasEntry("blogname", "baeldung"));
	}

========================================================================================================================
=================================== 數值匹配(The Number Matcher) =======================================================
========================================================================================================================
數值應大於某值
	@Test
	public void givenAnInteger_whenGreaterThan0_thenCorrect() {
		assertThat(1, greaterThan(0));
	}

數值應大於或等於某值
	@Test
	public void givenAnInteger_whenGreaterThanOrEqTo5_thenCorrect() {
		assertThat(5, greaterThanOrEqualTo(5));
	}

數值應小於某值
	@Test
	public void givenAnInteger_whenLessThan0_thenCorrect() {
		assertThat(-1, lessThan(0));
	}

數值應小於或等於某值
	@Test
	public void givenAnInteger_whenLessThanOrEqTo5_thenCorrect() {
		assertThat(-1, lessThanOrEqualTo(5));
	}

數值應相近於上下誤差某值
	@Test
	public void givenADouble_whenCloseTo_thenCorrect() {
		assertThat(1.2, closeTo(1, 0.5)); // 0.5~1.5
	}

========================================================================================================================
=================================== 文字匹配(The Text Matcher) =========================================================
========================================================================================================================

文字應為空
	@Test
	public void givenString_whenEmpty_thenCorrect() {
		String str = "";
		assertThat(str, isEmptyString());
	}

文字應為空或null
	@Test
	public void givenString_whenEmptyOrNull_thenCorrect() {
		String str = null;
		assertThat(str, isEmptyOrNullString());
	}

文字不算空白仍應為相同
	@Test
	public void given2Strings_whenEqualRegardlessWhiteSpace_thenCorrect() {
		String str1 = "text";
		String str2 = " text ";
		assertThat(str1, equalToIgnoringWhiteSpace(str2));
	}

文字應為給定順序的字串陣列皆包含
	@Test
	public void givenString_whenContainsGivenSubstring_thenCorrect() {
		String str = "calligraphy";
		assertThat(str, stringContainsInOrder(Arrays.asList("call", "graph")));
	}

文字不分大小寫應為相同
	@Test
	 public void given2Strings_whenEqual_thenCorrect() {
		String a = "foo";
		String b = "FOO";
		assertThat(a, equalToIgnoringCase(b));
	}

========================================================================================================================
=================================== 核心(The Core API) =================================================================
========================================================================================================================
提供第三方框架提供者用的 建構者 util

文字應相同 : is
	@Test
	public void given2Strings_whenIsEqualRegardlessWhiteSpace_thenCorrect() {
		String str1 = "text";
		String str2 = " text ";
		assertThat(str1, is(equalToIgnoringWhiteSpace(str2)));
	}
文字不分大小寫應相同
	@Test
	public void given2Strings_whenIsEqual_thenCorrect() {
		String str1 = "text";
		String str2 = "text";
		assertThat(str1, is(str2));
	}

文字忽略空白應仍不相同
	@Test
	public void given2Strings_whenIsNotEqualRegardlessWhiteSpace_thenCorrect() {
		String str1 = "text";
		String str2 = " texts ";
		assertThat(str1, not(equalToIgnoringWhiteSpace(str2)));
	}

文字應不相同
	@Test
	public void given2Strings_whenNotEqual_thenCorrect() {
		String str1 = "text";
		String str2 = "texts";
		assertThat(str1, not(str2));
	}

文字應包含某文字
	@Test
	public void givenAStrings_whenContainsAnotherGivenString_thenCorrect() {
		String str1 = "calligraphy";
		String str2 = "call";
		assertThat(str1, containsString(str2));
	}

文字應由某文字開頭
	@Test
	public void givenAString_whenStartsWithAnotherGivenString_thenCorrect() {
		String str1 = "calligraphy";
		String str2 = "call";
		assertThat(str1, startsWith(str2));
	}

文字應由某文字結尾
	@Test
	public void givenAString_whenEndsWithAnotherGivenString_thenCorrect() {
		String str1 = "calligraphy";
		String str2 = "phy";
		assertThat(str1, endsWith(str2));
	}

物件應相同
	@Test
	public void given2Objects_whenSameInstance_thenCorrect() {
		Cat cat=new Cat();
		assertThat(cat, sameInstance(cat));
	}

物件應為某類別實例
	@Test
	public void givenAnObject_whenInstanceOfGivenClass_thenCorrect() {
		Cat cat=new Cat();
		assertThat(cat, instanceOf(Cat.class));
	}

集合物件裡的每件項目應大於某值
	@Test
	public void givenList_whenEachElementGreaterThan0_thenCorrect() {
		List<Integer> list = Arrays.asList(1, 2, 3);
		int baseCase = 0;
		assertThat(list, everyItem(greaterThan(baseCase)));
	}

文字應不等於 null
	@Test
	public void givenString_whenNotNull_thenCorrect() {
		String str = "notnull";
		assertThat(str, notNullValue());
	}

兩個條件應其中一個符合
	@Test
	public void givenString_whenMeetsAnyOfGivenConditions_thenCorrect() {
		String str = "calligraphy";
		String start = "call";
		String end = "foo";
		assertThat(str, anyOf(startsWith(start), containsString(end)));
	}

兩個條件應皆符合
	@Test
	public void givenString_whenMeetsAllOfGivenConditions_thenCorrect() {
		String str = "calligraphy";
		String start = "call";
		String end = "phy";
		assertThat(str, allOf(startsWith(start), endsWith(end)));
	}

========================================================================================================================
=================================== 自訂匹配(A Custom Matcher) =========================================================
========================================================================================================================

public class IsPositiveInteger extends TypeSafeMatcher<Integer> {

    public void describeTo(Description description) {
        description.appendText("a positive integer");
    }

    @Factory
    public static Matcher<Integer> isAPositiveInteger() {
        return new IsPositiveInteger();
    }

    @Override
    protected boolean matchesSafely(Integer integer) {
        return integer > 0;
    }

}

@Test
public void givenInteger_whenAPositiveValue_thenCorrect() {
    int num = 1;
    assertThat(num, isAPositiveInteger());
}

	if num = -1 will
		java.lang.AssertionError: Expected: a positive integer but: was <-1>