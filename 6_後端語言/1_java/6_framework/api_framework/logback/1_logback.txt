logback mdc
	https://www.796t.com/content/1541525951.html

logback xml setting
	https://www.cnblogs.com/xrq730/p/8628945.html

https://logback.qos.ch/dependencies.html
	logback 	jdk 	SLF4J
	1.3.x		8 		2
	1.4.x		11		2

	但在 spring bot 2.7.x 版本 僅支援到 1.2.x 因為其底層處理 StaticLoggerBinder in LogbackLoggingSystem.java 問題
		https://github.com/qos-ch/logback/issues/745

========================================================================================================================
=================================== maven dependency ===================================================================
========================================================================================================================
<dependency>
    <groupId>org.slf4j</groupId>
    <artifactId>slf4j-api</artifactId>
    <version>1.7.30</version>
</dependency>
<dependency>
	<groupId>ch.qos.logback</groupId>
	<artifactId>logback-classic</artifactId>
</dependency>

1. logback-classic : (spring boot starter logging 裡面依賴的也是該項目)
	用途：這是最常用的模組，用於一般的 Java 應用程式，提供核心的日誌功能，並與 SLF4J 介面集成。
	適用場景：當你需要在普通 Java 應用、Spring 應用或其他基於 JVM 的應用中進行日誌記錄時，logback-classic 就是主要依賴。
2. logback-core (非必要)
	用途：這是 Logback 的核心模組，logback-classic 和 logback-access 都依賴於它。它定義了日誌記錄的基礎架構和元件，如 Appender、Layout 等。
	適用場景：你通常不會直接在你的專案中只使用 logback-core，因為它是 logback-classic 或 logback-access 的底層依賴項。除非你打算實現自訂的 Appender、Encoder、Filter 等，否則你不需要單獨依賴 logback-core。
3. logback-access
	用途：這個模組主要用於網頁伺服器（如 Tomcat、Jetty）的 HTTP 日誌記錄。它可以記錄 HTTP 請求/回應，類似於 Apache HTTP 伺服器的 access.log。
	適用場景：如果你想記錄 Web 應用伺服器的訪問日誌，特別是 HTTP 請求的相關信息（如 IP 地址、請求時間、HTTP 狀態碼等），那麼你可以使用 logback-access。這種情況通常出現在需要分析伺服器流量或進行 Web 安全審計時

========================================================================================================================
=================================== log level ==========================================================================
========================================================================================================================
層級由大到小
	TRACE > DEBUG > INFO > WARN > ERROR
		if setting log level DEBUG
			print DEBUG > INFO > WARN > ERROR
		if setting log level WARN
			print WARN > ERROR
		....

========================================================================================================================
================================= <configuration> ======================================================================
========================================================================================================================
三個主要屬性
	scan：當scan被設置為true時，當配置文件發生改變，將會被重新加載，默認為true
	scanPeriod：檢測配置文件是否有修改的時間間隔，如果沒有給出時間單位，默認為毫秒，當scan=true時這個值生效，默認時間間隔為1分鐘
	debug：當被設置為true時，將打印出logback內部日誌信息，實時查看logback運行信息，默認為false

auto reload in prod
	<configuration scan="true" scanPeriod="15 seconds">
	  ...
	</configuration>

========================================================================================================================
================================= <logger>與<root> =====================================================================
========================================================================================================================
<logger>
	用來設置某一個包或者俱體某一個類的日誌打印級別、以及指定<appender>。
	<logger>可以包含零個或者多個<appender-ref>元素，標識這個appender將會添加到這個logger。
	<logger>僅有一個name屬性、一個可選的level屬性和一個可選的additivity屬性：

	name：用來指定受此logger約束的某一個包或者俱體的某一個類
	level：用來設置打印級別，五個常用打印級別從低至高依次為 TRACE、DEBUG、INFO、WARN、ERROR，如果未設置此級別，那麼當前logger會繼承上級的級別
	additivity：是否向上級logger傳遞打印信息，默認為true

<root>
	1.也是<logger>元素，但是它是根logger，只有一個level屬性，因為它的name就是ROOT
    2.只影響沒有明確宣告等級的 <logger> 之 package 路徑，也就預設值的 log level
	3.Actuator /actuator/loggers/{name}
		* 會同時顯示 configuredLevel（直接設定的值，可能來自 XML/屬性/運行時變更）與 effectiveLevel（實際生效，會考慮繼承）。
		* 若看到 configuredLevel=null 而 effectiveLevel=DEBUG，代表它是繼承來的（例如繼承 root=DEBUG）；若 configuredLevel=ERROR，就不會被 root 的 DEBUG 覆蓋。

指定部分 java package log level
	<logger name="tw.gov.moi" level="DEBUG" />

<root> 設定基本 level，指定那些 appender-ref ref="OTHER-APPENDER" 沿用
	<root level="DEBUG">
		<if condition='property("stdout.enable")'.contains("Y")><then><appender-ref ref="STDOUT"></then></if>
		<appender-ref ref="FILE-ROLL">
	</root>

========================================================================================================================
================================= Variable Substitution ================================================================
========================================================================================================================

Variable Substitution
	<property name="LOG_DIR" value="/var/log/application" />
	<appender name="FILE" class="ch.qos.logback.core.FileAppender">
		<file>${LOG_DIR}/tests.log</file>
		<append>true</append>
		<encoder>
			<pattern>%-4relative [%thread] %-5level %logger{35} - %msg%n</pattern>
		</encoder>
	</appender>

========================================================================================================================
================================= Appender =============================================================================
========================================================================================================================
https://logback.qos.ch/manual/appenders.html

ConsoleAppender
	<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
		<encoder>
			<pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>
		</encoder>
	</appender>

	<root level="debug">
		<appender-ref ref="STDOUT" />
	</root>

FileAppender
    <appender name="FILE" class="ch.qos.logback.core.FileAppender">
        <file>tests.log</file>
        <append>true</append>
        <encoder>
            <pattern>%-4relative [%thread] %-5level %logger{35} - %msg%n</pattern>
        </encoder>
    </appender>
	<logger name="com.baeldung.logback.tests" level="WARN">
        <appender-ref ref="FILE" />
    </logger>

RollingFileAppender
	<property name="LOG_FILE" value="LogFile" />

	<appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>${LOG_FILE}.log</file>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- daily rollover -->
			<fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.gz</fileNamePattern>

			<!-- keep 30 days' worth of history capped at 3GB total size -->
			<maxHistory>30</maxHistory>
			<totalSizeCap>3GB</totalSizeCap>
		</rollingPolicy>
		<encoder>
			<pattern>%-4relative [%thread] %-5level %logger{35} - %msg%n</pattern>
		</encoder>
	</appender>

Appender 過濾器 <filter> 用於過濾日誌等級
	ThresholdFilter
		* 用途：指定一個「最低等級閾值」，只有 大於等於該等級 的 log event 會被接受。
		* 語法範例：
			<filter class="ch.qos.logback.classic.filter.ThresholdFilter">
			  <level>WARN</level>
			</filter>
			→ 這樣代表 WARN、ERROR 都會進來，INFO、DEBUG 會被丟掉。
		* 特點：
			* 只需要設定 <level>（沒有 onMatch / onMismatch）。
			* 簡單好用，適合「只要收某個等級以上的所有 log」。
	LevelFilter
		* 用途：只針對「等於某一個等級」的 log event 判斷。
		* 語法範例：
			<filter class="ch.qos.logback.classic.filter.LevelFilter">
			  <level>ERROR</level>
			  <onMatch>ACCEPT</onMatch>
			  <onMismatch>DENY</onMismatch>
			</filter>
			→ 這樣代表只有 ERROR 等級的 log 會進來，其他全部丟掉。
		* 特點：
			* 需要設定 <onMatch> 與 <onMismatch>。
			* 適合「只要某一個精確等級」的需求，例如 error.log 只收 ERROR，不收 WARN。
	🔹 實務建議
		一般主檔案（應用 log） → 用 ThresholdFilter（例如 INFO 以上都收）。
		分流檔案（error.log / warn.log） → 用 LevelFilter（只收特定級別）。


其他常見可用 Appender
	SocketAppender
	SSLSocketAppender
	SMTPAppender
	DBAppender
	SyslogAppender
	SiftingAppender
	AsyncAppender

其他常見可用 Policy
	TimeBasedRollingPolicy
	SizeBasedTriggeringPolicy
	SizeAndTimeBasedRollingPolicy
	FixedWindowRollingPolicy

========================================================================================================================
================================= Layouts =============================================================================
========================================================================================================================

	<encoder>
		<pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>
	</encoder>

	%d{HH:mm:ss.SSS} – a timestamp with hours, minutes, seconds and milliseconds
	[%thread] – the thread name generating the log message, surrounded by square brackets
	%-5level – the level of the logging event, padded to 5 characters
	%logger{36} – the name of the logger, truncated to 35 characters
	%msg%n – the log messages followed by the platform dependent line separator character

	%d{yyyy-MM-dd HH:mm:ss.SSS}：輸出日誌的時間戳，格式為 年-月-日 小時:分鐘:秒.毫秒。
	%p：輸出日誌的優先級，例如 DEBUG、INFO、WARN、ERROR 等。
	%t：輸出執行緒的名稱。
	%c：輸出日誌的類別名稱。
	%m：輸出日誌的內容。
	%n：輸出一個新行。

========================================================================================================================
================================= additivity ===========================================================================
========================================================================================================================

additivity :
	可加性，預設 true
	當為 false : 不希望在某些場景下列印重複的紀錄檔，不受 level 設定的影響，通常搭配於獨立 log
	指定那些 <logger> 之 appender-ref 不沿用 <root>
		<logger name="PROFILER" level="TRACE" additivity="false"><appender-ref ref="FILE-ROLL-PROFILER"><logger/>
		...

	https://github.dev/qos-ch/logback/blob/master/logback-classic/src/main/java/ch/qos/logback/classic/Logger.java
    /**
     * Invoke all the appenders of this logger.
     *
     * @param event The event to log
     */
    public void callAppenders(ILoggingEvent event) {
        int writes = 0;
        for (Logger l = this; l != null; l = l.parent) {
            writes += l.appendLoopOnAppenders(event);
            if (!l.additive) {
                break;
            }
        }
        // No appenders in hierarchy
        if (writes == 0) {
            loggerContext.noAppenderDefinedWarning(this);
        }
    }

獨立 log 範例
	https://blog.csdn.net/qq_44209563/article/details/123697183

========================================================================================================================
================================= MDC ==================================================================================
========================================================================================================================
https://www.baeldung.com/mdc-in-log4j-2-logback

只需要清除 MDC 中的某个特定键，则应该使用 MDC.remove(key) 方法。
如果需要清除 MDC 中的所有键和值，则应该使用 MDC.clear() 方法。

使用過濾器還是攔截器，在請求結束時清除 MDC 都是一種最佳實踐，以確保請求之間不會干擾並保持 MDC 的準確性