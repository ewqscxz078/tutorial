mock FTP 進行測試
	1. 使用 Mock 框架
		@Test
		public void testFtpUpload() throws Exception {
			FTPClient mockFtpClient = Mockito.mock(FTPClient.class);
			Mockito.when(mockFtpClient.storeFile(Mockito.anyString(), Mockito.any(InputStream.class)))
				   .thenReturn(true);

			// 呼叫使用 mockFtpClient 的方法，進行上傳測試
		}
	2. 使用嵌入式 FTP 伺服器
		例如 Apache Mina 提供的 FTPServer。這樣你可以在測試環境中啟動一個真正的 FTP 伺服器，但它是嵌入式的，不需要外部的 FTP 伺服器
			FtpServerFactory serverFactory = new FtpServerFactory();
			ListenerFactory factory = new ListenerFactory();
			factory.setPort(2221);
			serverFactory.addListener("default", factory.createListener());

			FtpServer server = serverFactory.createServer();
			server.start();

			// 測試代碼，連接到嵌入式 FTP 伺服器進行操作

	3. 使用 Fake FTP Server 庫
		專門用來模擬 FTP 伺服器，例如 com.github.stefanbirkner:fake-sftp-server-rule，這樣你可以在測試中模擬各種 FTP 操作

			import com.github.stefanbirkner.fakesftpserver.rule.FakeSftpServerRule;
			import org.junit.Rule;
			import org.junit.Test;

			import java.nio.file.Files;
			import java.nio.file.Paths;

			import static org.junit.Assert.assertTrue;

			public class FtpTest {
				@Rule
				public final FakeSftpServerRule fakeFtpServer = new FakeSftpServerRule();

				@Test
				public void testFtpUpload() throws Exception {
					// 設定模擬 FTP 伺服器的文件路徑和內容
					fakeFtpServer.putFile("/path/to/file.txt", "file content");

					// 測試代碼，連接到模擬的 FTP 伺服器進行操作
					String ftpHost = fakeFtpServer.getHost();
					int ftpPort = fakeFtpServer.getPort();

					// 用 FTP 客戶端連接到 fakeFtpServer 進行上傳/下載測試
					FTPClient ftpClient = new FTPClient();
					ftpClient.connect(ftpHost, ftpPort);
					ftpClient.login("user", "password");

					// 執行上傳、下載等操作
					assertTrue(ftpClient.retrieveFile("/path/to/file.txt", Files.newOutputStream(Paths.get("localfile.txt"))));

					// 檢查結果
					assertTrue(Files.exists(Paths.get("localfile.txt")));
				}
			}
