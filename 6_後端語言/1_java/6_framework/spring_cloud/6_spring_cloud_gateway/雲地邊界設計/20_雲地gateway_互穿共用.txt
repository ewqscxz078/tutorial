ref ChatGPT

✅ 建議：
	「共用一份 Java 路由邏輯程式碼，搭配不同的 application.yml 路由設定」是 ✔️ 推薦方式，尤其在 雲端 Gateway 與地端 Gateway 採用相同框架（如 WebMvc Gateway）時。

	雲地互穿共用寫法，不用寫 spring.cloud.gateway.routes

🎯 為什麼這樣設計是好主意？
	✅ 優點：
		| 優點              | 說明                                                               |
		| ---------------- | ----------------------------------------------------------------- |
		| ✅ **維護一套邏輯** | 共用 filter/interceptor/controller 等 Java 程式碼，邏輯統一。         |
		| ✅ **環境彈性高**  | 透過不同 `application.yml` 指定「轉發到誰」、「允許哪些 audience」等設定。 |
		| ✅ **相容不同拓撲** | 雲與地可以互為 gateway，彼此為轉發跳板，不需寫死對方位置。                 |
		| ✅ **部署友善**    | 同一套程式碼 build 出來的 JAR/WAR，換不同設定即可部署在不同端。            |

🧱 實作結構建議
	📁 專案範例結構：
		cloud-gateway/
		│
		├── src/main/java/com/example/gateway
		│   ├── GatewayRoutingFilter.java  		<-- 共用
		│   ├── ForwardingService.java    	<-- 共用
		│   ├── GatewayController.java   	<-- 共用
		│
		├── src/main/resources/
		│   ├── application.yml                <-- 預設值
		│   ├── application-cloud.yml          <-- 雲端專用設定
		│   ├── application-onprem.yml         <-- 地端專用設定

	✨ application-cloud.yml 與 application-onprem.yml 的差異
		| 設定                      | 雲端                           | 地端                              |
		| ------------------------ | ----------------------------- | -------------------------------- |
		| `target.base-uri`        | `http://onprem-gateway.local` | `http://onprem-backend-service`  |
		| `auth.issuer`            | `https://cloud-auth-server`   | `https://cloud-auth-server`      |
		| `token.exchange.enabled` | true                          | false（或不管）                    |


	🛠 DevOps 部署建議：
		| 層級             | 實務作法                                                              |
		| --------------- | ------------------------------------------------------------------- |
		| profile-based   | 使用 `--spring.profiles.active=cloud` 或 `onprem` 啟動不同設定          |
		| CI/CD 分環境配置  | 產生 `application-cloud.yml`, `application-onprem.yml` 並各自 deploy  |
		| 設定中心          | 若用 Spring Cloud Config / Consul，可動態切換參數                       |

	❗ 但注意：
		⛔ 不建議「邏輯寫死雲或地端角色」：
			if (IS_CLOUD) { ... } else { ... }
			→ 這樣會讓程式跟環境綁死，不好擴充或做 gateway-to-gateway 模式（雲當 client、地也當 client）。

	✅ 總結建議
	✅ 強烈建議雲與地端 gateway 共用一份 Java 程式碼，搭配 環境設定檔分離（yml profile） 實作靈活路由與驗證策略

====================================================================================================================================
================ 雙向 gateway 互穿共用 ===============================================================================================
====================================================================================================================================

	// ✅ GatewayMode.java - 環境角色設定（cloud 或 onprem）
	public enum GatewayMode {
		CLOUD, ONPREM
	}


	// ✅ TokenContext.java - 辨識來源與目標
	public class TokenContext {
		public enum Source { FROM_CLOUD, FROM_ONPREM, UNKNOWN }
		public enum Target { TO_CLOUD, TO_ONPREM, UNKNOWN }

		private final Source source;
		private final Target target;

		public TokenContext(Source source, Target target) {
			this.source = source;
			this.target = target;
		}

		public Source getSource() { return source; }
		public Target getTarget() { return target; }
	}

	// ✅ TokenContextResolver.java - 根據 JWT 判斷來源與目標
	@Component
	public class TokenContextResolver {

		public TokenContext resolve(Jwt jwt) {
			String issuer = jwt.getIssuer().toString();
			String audience = jwt.getAudience().stream().findFirst().orElse("");

			TokenContext.Source source = issuer.contains("cloud") ? TokenContext.Source.FROM_CLOUD
					: issuer.contains("onprem") ? TokenContext.Source.FROM_ONPREM
					: TokenContext.Source.UNKNOWN;

			TokenContext.Target target = audience.contains("cloud") ? TokenContext.Target.TO_CLOUD
					: audience.contains("onprem") ? TokenContext.Target.TO_ONPREM
					: TokenContext.Target.UNKNOWN;

			return new TokenContext(source, target);
		}
	}

	1.Gateway JWT 驗證過後，辨識來源是內部還是雲端交換而來的請求
		1.GatewayRoutingFilter（最先執行）
			* 類型：OncePerRequestFilter（Servlet Filter）

			* 在 Spring Security 授權邏輯之後執行（預設順序）

			* 用來解 JWT、辨識來源（CLOUD_EXCHANGE or INTERNAL_ONPREM）

			* 會將結果寫入 request.setAttribute("source", ...)，供後續使用

			👉 目的：辨識來源

		// ✅ GatewayRoutingFilter：判斷是雲/地端穿過來還是雲/地端內部打的 : 決定轉送邏輯的 Filter
		@Component
		@Order(Ordered.HIGHEST_PRECEDENCE)
		public class GatewayRoutingFilter extends OncePerRequestFilter {

			private final JwtDecoder jwtDecoder;
			private final TokenContextResolver contextResolver;

			public GatewayRoutingFilter(JwtDecoder jwtDecoder, TokenContextResolver contextResolver) {
				this.jwtDecoder = jwtDecoder;
				this.contextResolver = contextResolver;
			}

			@Value("${gateway.mode}")
			private GatewayMode mode;

			@Override
			protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain chain)
					throws ServletException, IOException {

				String token = Optional.ofNullable(request.getHeader("Authorization"))
						.filter(h -> h.startsWith("Bearer "))
						.map(h -> h.substring(7))
						.orElse(null);

				if (token != null) {
					try {
						Jwt jwt = jwtDecoder.decode(token);
						TokenContext ctx = contextResolver.resolve(jwt);

						request.setAttribute("token.context", ctx);
					} catch (JwtException e) {
						response.sendError(HttpStatus.UNAUTHORIZED.value(), "Invalid token");
						return;
					}
				}

				chain.doFilter(request, response);
			}
		}



	2.ForwardingService
		* 類型：Spring @Service 類別

		* 包裝 WebClient / RestTemplate 邏輯，實際去呼叫地端服務或外部服務

		* baseUri 可由 application.yml 決定，讓雲與地端轉發目標不同

		👉 目的：從 Gateway 發起對「真正後端」的呼叫

		// ✅ ForwardingService：根據 context 轉送
		// ✅ ForwardingService.java -
		@Service
		public class ForwardingService {

			@Value("${routing.to-cloud}")
			private String cloudUri;

			@Value("${routing.to-onprem}")
			private String onpremUri;

			private final WebClient webClient = WebClient.create();

			public String forward(String path, TokenContext context, String token) {
				String baseUri = switch (context.getTarget()) {
					case TO_CLOUD -> cloudUri;
					case TO_ONPREM -> onpremUri;
					default -> throw new IllegalStateException("Unknown target");
				};

				return webClient.get()	  // 簡化版本
						.uri(baseUri + path)
						.header("Authorization", "Bearer " + token)
						.retrieve()
						.bodyToMono(String.class)
						.block();
			}
		}

	3️.GatewayController
		* 類型：@RestController

		* 接收實際的 API 請求，例如 /onprem/**、/api/data

		* 會讀取 request attribute（如 "source"）決定行為

		* 呼叫 service class 進行轉送、處理業務邏輯等

		👉 目的：依據來源轉送請求、決定回應內容

		// ✅ GatewayController.java - 請求進入點，根據來源由 service 處理
		@RestController
		@RequestMapping("/gateway")
		public class GatewayController {

			private final ForwardingService forwardingService;

			public GatewayController(ForwardingService forwardingService) {
				this.forwardingService = forwardingService;
			}

			@GetMapping("/**")
			public ResponseEntity<String> route(HttpServletRequest request) {
				String path = request.getRequestURI().replaceFirst("/gateway", "");
				TokenContext ctx = (TokenContext) request.getAttribute("token.context");

				String token = Optional.ofNullable(request.getHeader("Authorization"))
						.filter(h -> h.startsWith("Bearer "))
						.map(h -> h.substring(7))
						.orElse("");

				String result = forwardingService.forward(path, ctx, token);
				return ResponseEntity.ok(result);
			}
		}

	// ✅ application-cloud.yml / application-onprem.yml 可配置如下：
	# application-cloud.yml
	gateway:
	  mode: cloud
	routing:
	  to-onprem: http://onprem-gateway.local
	  to-cloud: http://localhost:9000

	# application-onprem.yml
	gateway:
	  mode: onprem
	routing:
	  to-cloud: http://cloud-gateway.local
	  to-onprem: http://localhost:8081


🔁 整體執行順序流程圖：
		  +---------------------+
		  | 1. HTTP Request     |
		  | Authorization: Bearer ... |
		  +---------------------+
					↓
	+--------------------------------------------+
	| GatewayRoutingFilter                   |
	| 解析 JWT → 判斷來源 → setAttribute("source")|
	+--------------------------------------------+
					↓
	+--------------------------------------------+
	| GatewayController                    |
	| 依據 request.getAttribute(\"source\") 分支處理  |
	| 呼叫 ForwardToTargetService                |
	+--------------------------------------------+
					↓
	+--------------------------------------------+
	| ForwardingService                     |
	| 使用 WebClient/RestTemplate → 轉發請求到下游     |
	+--------------------------------------------+
					↓
			  真正的後端服務

📌 小提醒：執行順序依賴 Filter 註冊順序
	* SourceAwareRequestFilter 是 Filter，因此會比 @Controller 還早

	* 若你有多個 Filter，建議設計 @Order(...) 控制順序

		@Component
		@Order(Ordered.HIGHEST_PRECEDENCE + 10)
		public class SourceAwareRequestFilter extends OncePerRequestFilter { ... }


✅ 模板重點
	| 模組                    | 功能                                             |
	| ---------------------- | ----------------------------------------------- |
	| `GatewayMode`          | 環境模式（cloud / onprem）從 `application.yml` 決定 |
	| `TokenContextResolver` | 根據 JWT 解析來源與目標：`FROM_CLOUD → TO_ONPREM` 等 |
	| `GatewayRoutingFilter` | 分析 JWT 並標記來源與目標（設為 request attribute）   |
	| `ForwardingService`    | 根據目標自動轉送（base URI 從 `application.yml` 來） |
	| `GatewayController`    | 路由進入點，可支援 `/gateway/**`                    |


