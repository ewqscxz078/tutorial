ref ChatGPT


✅ 架構建議：雲、地端各自一套 Gateway + Auth Server
	1.雲端：
		雲端 API Gateway：統一入口，負責前端流量進入、路由轉發、限流、JWT 驗證等。

		雲端 Auth Server：提供 OAuth2 發 token 功能（通常支援 client_credentials、authorization_code 等 grant）。

	2.地端：
		地端 Gateway：地端所有服務的統一入口，實作統一的安全防護與授權邏輯。

		地端 Auth Server：有時是獨立一套，有時是雲端 Auth Server 的一部分延伸，或 federation 機制實作的本地信任節點。


	🔁 Token Exchange 模式（Federation / Trust）
		當雲端服務需跨 VPN 存取地端服務（或反之），不建議直接將 JWT 傳入內部服務，實務上會透過 邊界交換 token 的方式處理。

		▶️ 運作流程範例：
			1.雲端前端 → 經過 雲端 Gateway + 雲端 Auth Server → 發出 access token。

			2.雲端後端服務 A 需要存取 地端服務 B：

				對內呼叫一個雲端的 token exchange API 或經雲端 Gateway proxy 到地端 Gateway。

				雲端 Gateway 將 JWT 帶到地端 Gateway（通常 via Authorization: Bearer）。

			3.地端 Gateway：

				驗證 JWT（如果信任雲端簽發者），或

				進行 token exchange，向地端 Auth Server 重新簽發新的 access token（針對地端資源）。

				再轉發請求到地端服務 B。
		✅ 好處：
			各自自治：地端可以維持封閉、不暴露內部資源細節。

			安全隔離：雲端 token 不直接讓內部服務驗證。

			彈性授權：地端可重新決定權限範圍、過期時間等。


		🔐 Token Exchange 實作方式
			可依情境選擇：
				| 模式                                | 描述                                                                                  |
				| ---------------------------------- | ------------------------------------------------------------------------------------- |
				| **OAuth 2.1 Token Exchange Draft** | RFC 8693，標準方式，使用 grant\_type = `urn:ietf:params:oauth:grant-type:token-exchange` |
				| **自定義 proxy + JWT 驗證**          | 地端 gateway 信任雲端簽章的 JWT（需同步 public key），直接驗證                                |
				| **地端重新簽發 token**               | 地端 gateway 接受 JWT，轉換成 local token（另一組 scope/client）                            |


		📌 綜合建議
			| 選項                                              | 適合情境                      | 維護建議                       |
			| ------------------------------------------------ | ---------------------------- | ---------------------------- |
			| ✅ RFC 8693 Token Exchange                       | 長期、多方整合、需授權清晰控管     | ✅推薦作為主要實作方式           |
			| ⚠️ JWT 直接驗簽 + 自定義 Gateway 驗證                | 初期簡易整合、短期 PoC          | 僅適合作為過渡期機制，不建議長久使用 |
			| ✅ Local Auth Re-sign（Gateway 轉發 + 內部重新簽發） | 安全嚴格隔離、地端不可見雲端 token | 可與 RFC 8693 結合作為內部政策   |


		✅ 推薦：OAuth 2.1 Token Exchange（RFC 8693）
			🔹 為什麼推薦它？
				| 優點                                        | 說明                                                                      |
				| ------------------------------------------ | ------------------------------------------------------------------------ |
				| ✅ 標準協議                                  | 業界認可的草案標準，許多 Auth Server（如 Keycloak、Auth0、PingFederate）已支援。 |
				| ✅ 跨產品兼容                                | 若將來你混用不同 IAM（如 Azure AD + 本地 Keycloak），RFC8693 是共通語言。        |
				| ✅ 授權範圍清楚                              | 可限制 exchanged token 的 scope、audience，確保 least privilege。            |
				| ✅ 好維運                                   | 使用標準 endpoint (`/token`) 和 Grant Type，可共用 token 驗證與發行邏輯。       |
				| ✅ 日後支援 Delegation / Impersonation 更彈性 | 可設定 act-as / on-behalf-of 模式，利於微服務相互呼叫。                        |


			⚙️ RFC 8693 基本流程：
				1.A 系統取得 access token（access_token_A）；

				2.呼叫 token exchange endpoint（通常在 Auth Server）：
					POST /oauth/token
					Content-Type: application/x-www-form-urlencoded

					grant_type=urn:ietf:params:oauth:grant-type:token-exchange
					&subject_token=access_token_A
					&subject_token_type=urn:ietf:params:oauth:token-type:access_token
					&audience=地端API或client-id
					&requested_token_type=urn:ietf:params:oauth:token-type:access_token
					&scope=地端資源需要的scope
				3.回傳一個新的 access_token_B，用於呼叫地端服務。


雲地互串與 auth server token exchange 重點
	1.解析來源到目的 url 轉發
	2.若其中有跨邊界要處理 token exchange 後塞回原本的 header