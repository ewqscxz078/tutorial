ref ChatGPT

===============================================================================================================
💬 情境：
	雲端服務（或前端）打 API 到雲端 Gateway，Gateway 幫忙把原 token 換掉，再透過 Gateway-to-Gateway 模式安全轉送到地端服務。

	🧭 步驟詳解：雲服務 → 雲 Gateway → 雲 Auth Server → 地端 Gateway → 地端服務

	✅ 步驟 1：雲端服務（或前端）發起請求
		GET /cloud-gateway/onprem/data
		Authorization: Bearer eyJhbGciOi... （原 access token）

	✅ 步驟 2：雲端 Gateway (WebMvc Gateway) 接收請求
		你這邊會在雲端 Gateway 中加一個 Filter，攔截 Authorization Header

			1.Filter 抓到原始 token subject_token

			2.呼叫雲端 Auth Server /oauth2/token endpoint 進行 Token Exchange（RFC 8693）

	✅ 步驟 3：雲端 Gateway → 雲端 Auth Server 請求 token exchange
		POST /oauth2/token
		Authorization: Basic client-a:secret
		Content-Type: application/x-www-form-urlencoded

		grant_type=urn:ietf:params:oauth:grant-type:token-exchange
		subject_token=eyJhbGciOi...
		subject_token_type=urn:ietf:params:oauth:token-type:access_token
		audience=onprem-api

	✅ 步驟 4：Auth Server 回傳 exchanged token
		{
		  "access_token": "exchanged-token-for-onprem",
		  "token_type": "Bearer",
		  "expires_in": 600
		}

	✅ 步驟 5：雲端 Gateway 改寫 header，呼叫地端 Gateway
		GET http://onprem-gateway.local/api/data
		Authorization: Bearer exchanged-token-for-onprem
		你會用 RestTemplate 或 WebClient 在 Gateway 內轉送這個請求（或使用 Forward/Redirect 機制）

	✅ 步驟 6：地端 Gateway 收到請求，驗證 token
		地端 Gateway 是 Resource Server：

			* 會去檢查這個 exchanged token 的 issuer 是否可信（應為雲端 Auth Server）

			* 驗證 JWT 簽章、audience、scope 是否符合要求

	✅ 步驟 7：地端 Gateway 再轉發給地端實際服務
		GET http://onprem-internal-service/api/data
		Authorization: Bearer exchanged-token-for-onprem
		可在 Gateway 上配置 route/forward logic，也可經由 Controller 實作 proxy。

	✅ 步驟 8：地端服務處理邏輯 + 回傳 Response
		一切通過後，地端服務成功處理請求，回應資料：
			{
			  "data": "this is from on-prem system"
			}

	🔐 安全設計總結
		| 邊界             | 措施                                                       |
		| --------------- | ---------------------------------------------------------- |
		| 雲端 Gateway     | 驗證原始 token 並控制誰可以發起交換                             |
		| 雲端 Auth Server | 驗證 subject\_token 並根據 client/role 發出新的權限較小的 token |
		| 地端 Gateway     | 驗證 exchanged token，確認是來自雲端並符合地端資源要求            |
		| 地端 Service     | 相信 Gateway 傳進來的 request，無需再做認證                     |


	✅ 每個步驟實作標註（共 8 步）
		| 步驟   | 描述                                                      | 是否需自行實作？            | 備註                                                                          |
		| ----- | -------------------------------------------------------- | ------------------------ | ---------------------------------------------------------------------------- |
		| **1** | 雲端服務或前端打 API，攜帶原 token                            | ❌ 不用實作               | 呼叫者自行帶入原 JWT token                                                       |
		| **2** | 雲端 Gateway 接收請求，擷取原 token                          | ✅ 要實作                 | 需自己實作一個 Filter 抓出 Authorization Header                                  |
		| **3** | 雲端 Gateway 呼叫 Auth Server `/token` 換 token            | ✅ 要實作                 | 用 `RestTemplate` 或 `WebClient` 發 HTTP 請求                                   |
		| **4** | 雲端 Gateway 收到 exchanged token                          | ✅ 要實作                 | Parse 回應並取出 access\_token                                                  |
		| **5** | 雲端 Gateway 改寫 Authorization header 並轉發至地端 Gateway  | ✅ 要實作                 | 將換到的 token 放進 header 並 forward 請求                                        |
		| **6** | 地端 Gateway 驗證 exchanged token                         | ❌ 不用實作邏輯，但要設定     | 使用 Spring Security Resource Server 模組，自動驗 JWT，只要設定好 issuer/public key |
		| **7** | 地端 Gateway 轉送至內部地端服務                              | ✅ 可實作或使用 Forward 機制 | 可用 Controller + RestTemplate 或 Mvc Route Mapping                            |
		| **8** | 地端服務處理請求並回應                                       | ❌ 不用實作特別邏輯          | 若保護得當，可直接回應資料                                                         |

	✅ 自己要做的核心實作（濃縮）
		| 區塊                                          | 要做什麼                                                                      |
		| -------------------------------------------- | --------------------------------------------------------------------------- |
		| ✅ 雲端 Gateway 的 Filter                     | 解析原 JWT，呼叫 `/token`，轉發時附上 exchanged token                            |
		| ✅ cloud-auth-server 的 TokenExchange Grant  | 若用 Spring Authorization Server，要實作一個自定義的 Grant（converter + provider） |
		| ✅ 地端 Gateway Resource Server 設定           | 設定好 JWT 驗證參數（issuer URI + JWK URI）                                     |

	💡 提醒事項
		| 主題                                         | 說明                                                                      |
		| ------------------------------------------- | ------------------------------------------------------------------------- |
		| 🔐 Auth Server 是否信任來自的 subject\_token？ | 你要在 provider 中處理 token 的解析與驗證（建議驗簽或 lookup）                    |
		| 🔁 Token 交換是否有限 scope？                  | 可以設定 audience / scope 轉換，避免權限擴張                                   |
		| 📦 JWK 公鑰同步                              | 地端 Gateway 若驗 JWT，需能讀取雲端 Auth Server 的 `/oauth2/jwks` endpoint     |

==============================================================================================================================================================

🧩 架構組件（最小實作版本）
	| 模組                          | 描述                                                       |
	| ---------------------------- | ---------------------------------------------------------- |
	| `cloud-auth-server`          | 雲端 Auth Server，實作 `/token` endpoint，支援 token exchange |
	| `cloud-gateway`              | 雲端 Gateway，驗證 JWT、發出 token、轉發至地端                   |
	| `onprem-gateway`             | 地端 Gateway，驗證 exchange 過後的 token，保護地端資源           |
	| *(選配)* `onprem-auth-server` | 若地端需再簽發內部 token，可加入（可延後開發）                     |

✅ 使用技術棧
	Spring Boot 3.x

	Spring Authorization Server 1.2+（支援自定義 grant）

	Spring Security + Resource Server

	可加上 Spring Cloud Gateway 4.x（可選）


1. cloud-auth-server — 支援 Token Exchange
	1.1 加入依賴
		<dependency>
		  <groupId>org.springframework.boot</groupId>
		  <artifactId>spring-boot-starter-oauth2-authorization-server</artifactId>
		</dependency>

	1.2 自定義 TokenExchange Grant
		Spring Authorization Server 尚未內建 RFC 8693，你需要實作一個 custom AuthenticationConverter + AuthenticationProvider：
			public class TokenExchangeAuthenticationConverter implements AuthenticationConverter {
				@Override
				public Authentication convert(HttpServletRequest request) {
					String grantType = request.getParameter(OAuth2ParameterNames.GRANT_TYPE);
					if (!"urn:ietf:params:oauth:grant-type:token-exchange".equals(grantType)) {
						return null;
					}
					String subjectToken = request.getParameter("subject_token");
					String audience = request.getParameter("audience");
					return new TokenExchangeAuthentication(subjectToken, audience);
				}
			}

		再搭配 provider 驗證原始 token 並重新簽發新 access token

2. cloud-gateway — 發 token 並呼叫地端 gateway
	你可用 Spring Cloud Gateway + OAuth2 Client 模式來請求 exchange token 並 forward：
	spring:
	  cloud:
		gateway:
		  routes:
			- id: call-onprem
			  uri: http://onprem-gateway.local
			  predicates:
				- Path=/onprem/**
			  filters:
				- RewritePath=/onprem/(?<segment>.*), /$\{segment}
				- TokenRelay
	你可以選擇手動呼叫 token exchange endpoint，將換到的 token 放在 Authorization header 轉送過去。


3. onprem-gateway — 驗證 exchanged token
	1.1 加入依賴
		<dependency>
		  <groupId>org.springframework.boot</groupId>
		  <artifactId>spring-boot-starter-oauth2-resource-server</artifactId>
		</dependency>
	1.2 設定：
		spring:
		  security:
			oauth2:
			  resourceserver:
				jwt:
				  issuer-uri: https://cloud-auth-server.local
		注意：onprem 需要信任 cloud-auth-server 的 issuer 和 public key。





==============================================================================================================================================================
Q: 第七步驟地端如何分辨一般地端gateway 打自己地後段還是雲穿過來的打地後段？
	兩種情境：
		| 請求來源                                      | 行為            | 需要辨識？      |
		| ------------------------------------------- | --------------- | ------------ |
		| ✅ **地端內部系統直接打地端 Gateway（內部服務）**  | 正常內部調用      | ✔️ 是地端自己人 |
		| ✅ **雲端透過 VPN + Gateway-to-Gateway 跨來** | 雲服務呼叫地端 API | ✔️ 是外來人    |

	🧠 地端 Gateway 如何區分？
		✅ 方法 1：JWT token 的 issuer / audience / scope 判斷（最常用）
			你透過「token 本身的內容」來識別來源：
				Authorization: Bearer xxx
			透過解 JWT，可判斷：
				| Claim 欄位      | 例子                         | 說明                      |
				| -------------- | --------------------------- | ------------------------- |
				| `iss`          | `https://cloud-auth-server` | 是從雲端來的                |
				| `aud`          | `onprem-api`                | 表示要打的是地端資源          |
				| `scope`        | `read onprem`               | 表示是 exchange 過後授權範圍 |
				| `act` / `azp`  | `client-a`                  | 誰發起的交換，可以追蹤來源     |

			👉 地端 Gateway 是 Spring Resource Server，可以在 filter 中解 JWT + 加條件邏輯：
				Jwt jwt = jwtDecoder.decode(token);
				if (!"https://cloud-auth-server".equals(jwt.getIssuer().toString())) {
				   throw new AccessDeniedException("Invalid token issuer");
				}

		✅ 方法 2：HTTP Header 自定標示（若 token 不夠用）
			由雲端 Gateway 在轉發時加上自定義 Header，例如：
				X-Source-Gateway: cloud
			地端 Gateway 或後端可以讀到此標頭，以此決定：

				是內部服務還是外部穿越而來

				實作在 Filter、Interceptor、Controller 都可

			👉 不建議只靠這種方式，因為容易被 forged，但可當附加信號。

		✅ 方法 3：IP/網段辨識（物理邊界）
			假設你地端 Gateway 有兩張網卡（內部網段、VPN 專線）：

				* 內部請求來自 192.168.*.*

				* VPN 雲端來自 10.20.*.*

			地端 Gateway 可依據 X-Forwarded-For / request.getRemoteAddr() 分辨來源。

			👉 建議搭配 token 檢查一起用，不單靠 IP 判斷。

		✅ 方法 4：Spring Security 掛上多層 AccessDecisionVoter

		✅ 最建議的實作方式
			用 JWT issuer + audience + scope 做第一層辨識，必要時再加 Header 作第二層 trace。
				你可以在地端 gateway 或 controller 做這樣的邏輯：
					Jwt jwt = (Jwt) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
					String issuer = jwt.getIssuer().toString();
					String audience = jwt.getAudience().stream().findFirst().orElse("");
					if ("https://cloud-auth-server".equals(issuer) && "onprem-api".equals(audience)) {
						// 是從雲來的
					} else {
						// 是地端內部來的
					}
			// 地端 Gateway JWT 驗證過後，辨識來源是內部還是雲端交換而來的請求

			@Component
			public class SourceAwareRequestFilter extends OncePerRequestFilter {

				private final JwtDecoder jwtDecoder;

				public SourceAwareRequestFilter(JwtDecoder jwtDecoder) {
					this.jwtDecoder = jwtDecoder;
				}

				@Override
				protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
						throws ServletException, IOException {

					String authHeader = request.getHeader("Authorization");
					if (authHeader != null && authHeader.startsWith("Bearer ")) {
						String token = authHeader.substring(7);

						try {
							Jwt jwt = jwtDecoder.decode(token);

							String issuer = jwt.getIssuer().toString();
							String audience = jwt.getAudience().stream().findFirst().orElse("n/a");
							String scope = jwt.getClaimAsString("scope");

							boolean isFromCloud = "https://cloud-auth-server".equals(issuer) &&
												  "onprem-api".equals(audience) &&
												  scope != null && scope.contains("onprem");

							if (isFromCloud) {
								request.setAttribute("source", "CLOUD_EXCHANGE");
							} else {
								request.setAttribute("source", "INTERNAL_ONPREM");
							}

						} catch (JwtException e) {
							response.sendError(HttpStatus.UNAUTHORIZED.value(), "Invalid JWT token");
							return;
						}
					} else {
						request.setAttribute("source", "ANONYMOUS_OR_NON_JWT");
					}

					filterChain.doFilter(request, response);
				}
			}

			// 在 Controller 或下游服務中這樣使用
			@RestController
			public class OnpremApiController {

				@GetMapping("/api/data")
				public ResponseEntity<String> getData(HttpServletRequest request) {
					String source = (String) request.getAttribute("source");

					if ("CLOUD_EXCHANGE".equals(source)) {
						return ResponseEntity.ok("[來自雲端] Hello from on-prem system.");
					} else if ("INTERNAL_ONPREM".equals(source)) {
						return ResponseEntity.ok("[內部地端] Hello from local system.");
					} else {
						return ResponseEntity.status(HttpStatus.FORBIDDEN).body("Unauthorized source.");
					}
				}
			}

			✅ 核心功能說明：
				1.擷取 Authorization Header 中的 JWT

				2.使用 JwtDecoder 驗證並解析 token

				3.根據 JWT 的 issuer、audience、scope 判斷來源

					* 如果來自雲端交換（issuer = 雲端 Auth Server），則設定為 CLOUD_EXCHANGE

					* 否則視為內部地端來源 INTERNAL_ONPREM

				4.設定成 request attribute，可讓下游 Controller 或 Service 使用


				🧪 Controller 範例回應邏輯
					@GetMapping("/api/data")
					public ResponseEntity<String> getData(HttpServletRequest request) {
						String source = (String) request.getAttribute("source");
						...
					}
					你可以根據來源設計不同的行為，例如：

						* 來自內部可調用某些資源

						* 來自雲端僅限只讀

						* 雲端 request 多加審計記錄等

==============================================================================================================================================================
Q:地端 Gateway 如何在「路由層級」上區別來源 —— 是「雲/地穿透進來的」還是「雲/地端自己人打的」
	🎯 問題重點簡化：
		地端 Gateway 在設定 route 時，要怎麼根據請求「來源」不同（雲 vs. 地）走不同邏輯或下游路徑？

	✅ 解法：結合「來源辨識」+「條件路由」
		根據你使用的是 spring-cloud-starter-gateway-server-webmvc（MVC Gateway），我們無法使用 WebFlux 的 RouteLocator DSL，而是必須用：

			* HandlerMapping 進行路由規則設定（例如 @RequestMapping）

			* 或寫自定義 HandlerInterceptor / Filter 來根據來源轉送不同下游

	✅ 解法方案 A：用 Filter 判斷來源 → 修改轉送目標（forward URI）
		步驟：
			1.使用剛剛的 SourceAwareRequestFilter 判斷來源（雲 or 地）

			2.根據來源設置 request attribute

			3.在 controller 或 filter 中動態決定要 forward 到哪一個下游


				@Component
				public class RoutingDecisionFilter extends OncePerRequestFilter {
					@Override
					protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain chain)
							throws ServletException, IOException {

						String source = (String) request.getAttribute("source");

						if ("CLOUD_EXCHANGE".equals(source)) {
							request.setAttribute("targetUri", "/internal/proxy/cloud-to-backend");
						} else {
							request.setAttribute("targetUri", "/internal/proxy/local-to-backend");
						}

						chain.doFilter(request, response);
					}
				}

			Controller 這樣做：
				@Controller
				public class GatewayRouterController {

					@RequestMapping("/onprem/**")
					public void route(HttpServletRequest request, HttpServletResponse response) throws IOException {
						String targetUri = (String) request.getAttribute("targetUri");

						// 用 RestTemplate 或 forward
						if ("/internal/proxy/cloud-to-backend".equals(targetUri)) {
							response.sendRedirect("http://localhost:8082/api/cloud-version");
						} else {
							response.sendRedirect("http://localhost:8082/api/local-version");
						}
					}
				}

	✅ 解法方案 B：如果你使用 DispatcherServlet 的 Forward 機制
		request.getRequestDispatcher("/forward/cloud").forward(request, response);

		在不同路由的 Controller 中決定要 forward 到哪一個 service。

	🚫 無法使用的做法（給你避雷）
		在 MVC Gateway 裡你無法用：
			spring.cloud.gateway.routes:
			  - id: route1
				predicates:
				  - Header=X-Source,cloud
			因為這些屬於 WebFlux Gateway 的 DSL 配置，你使用的是 Servlet/MVC 架構，不適用。

	✅ 小結：建議做法
		| 元件                        | 功能                    | 必要性   |
		| -------------------------- | ---------------------- | ------- |
		| `SourceAwareRequestFilter` | 判斷來源是「雲」或「地」    | ✔️ 必要  |
		| `RoutingDecisionFilter`    | 決定轉送目標或標記 request | ✔️ 建議  |
		| Controller / RestTemplate  | 根據標記轉送實際流量       | ✔️ 實作  |
