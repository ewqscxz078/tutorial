ref ChatGPT

執行概要目標: client A 打 api header with jwt 到 client B
	client A
		1.設定 auth server 在哪(application.yml)
		2.發起請求到 從 AUTH server 取得 jwt
		3.發起請求到 client B api with jwt
	client B
		1.client B 設定 讓 Spring Security 知道 Auth Server（JWT 發行者） (application.yml)
		2.並在 client B api 參數有 @AuthenticationPrincipal Jwt jwt，則 client B 收到會自行自動驗證 jwt

	則 Spring Boot + Spring Security + Spring Authorization Server 預設底層已經幫我們自動處理好
		能做到不寫任何 JWT 產生或驗證的程式碼，卻讓 OAuth2 流程完整運作
			已自動完成
				在 Auth Server 端（JWT 產生）
					🔐 根據 RegisteredClient 的設定產出 JWT
					📦 自動生成 access token（含 scope、sub、iat、exp 等 claim）
					🔏 使用預設（或你指定的）金鑰對 JWT 進行 RS256 簽名
					🌐 提供 /oauth2/token、/.well-known/jwks.json 等標準 endpoint

				在 Resource Server 端（JWT 驗證）
					🌐 自動根據 issuer-uri 抓 .well-known/openid-configuration
					📥 擷取 jwks_uri 並下載 Auth Server 的 public key
					🔎 解析 HTTP Header 中的 Bearer token
					🔐 驗證 JWT 的簽章、有效期、issuer、audience
					🛂 將 scope claim 映射成 SCOPE_xxx 權限給 SecurityContext

			Auth Server 只需：
				@Bean
				public RegisteredClientRepository registeredClientRepository() {
					// 設定 client scope、grant type 就好
				}
			Resource Server 只需：
				spring:
				  security:
					oauth2:
					  resourceserver:
						jwt:
						  issuer-uri: https://your-auth-server
			Spring Security + Authorization Server 會把整個 JWT flow 接管，讓你能專心處理 API 授權、scope 控制、client 註冊 等應用邏輯。


OAuth2 auth server
	管理 clientId、client_secret 方式 for Client Credentials 授權模式
		管理方式			優點				缺點					適用情境
		InMemory 硬編碼		快速、簡單			無法變更、不利維護		Demo / 測試
		JDBC + 啟動初始化	彈性高、結構清晰	初始導入需要建表		正式環境/中大型專案
		自訂 API 註冊		動態、安全性可控制	實作成本稍高			SaaS / 多租戶

	client_id / secret 發放策略選擇
		方式					優點			缺點					適用情境
		手動提供 + 寫入 yml		最簡單			不利更新 / 多環境		測試、小型、固定 client 數量
		CI/CD 秘密注入			自動化、安全	部署整合較複雜			多 microservice、內部服務
		自訂註冊 API			彈性高			安全需控管				外部合作方、SaaS 模式
		產出檔案 / 配置匯出		可控、易整合	管理與加密需考量		傳統架構、半自動化場景

	管理 clientId、client_secret 方式是使用 JDBC + 啟動初始化 方式，如何讓 CI/CD 秘密注入到對應的服務?
		[CI/CD or Vault 管理 client credentials]
				|
				+--> 注入 Auth Server (註冊 RegisteredClient 存 JDBC)
				|
				+--> 注入到 Resource Server (或其他 client) 作為 OAuth2 認證使用

		ref 3_1_auth_server

client A
	1.設定 auth server 在哪(application.yml)
		client-b:
		  api-url: http://localhost:8082/api
		spring: # by keycloak
		  security:
			oauth2:
			  client:
				registration:
				  keycloak:
					provider: keycloak
					client-id: client-a
					client-secret: my-secret
					authorization-grant-type: client_credentials
				provider:
				  keycloak:
					token-uri: http://localhost:8080/realms/myrealm/protocol/openid-connect/token
		這樣 Spring Security 知道 Auth Server（Keycloak）在哪裡，會自動幫你取得 JWT！

		spring: # by 自訂 auth server
		  security:
			oauth2:
			  client:
				registration:
				  '[你的自訂 registration name]':
					client-id: ${CLIENT_ID:hello-client}
					client-secret: ${CLIENT_SECRET:secret123}
					authorization-grant-type: client_credentials
					scope:
					 - read
					provider: jwt-provider         # ← 必須對應 provider 區塊的 key
				provider:
				  jwt-provider:
					token-uri: http://localhost:9000/auth-server/oauth2/token # 去 auth server 取的 jwt 自動埋入
		這樣 Spring Security 知道自訂 Auth Server 在哪裡，會自動幫你取得 JWT！

	2.發起請求到 從 AUTH server 取得 jwt
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-oauth2-client</artifactId>
		</dependency>
		Client A 直接使用 OAuth2AuthorizedClientService 取得 JWT
			import org.springframework.security.oauth2.client.OAuth2AuthorizedClient;
			import org.springframework.security.oauth2.client.OAuth2AuthorizedClientService;
			import org.springframework.security.oauth2.client.OAuth2AuthorizedClientManager;
			import org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationContext;
			import org.springframework.security.oauth2.core.OAuth2AccessToken;
			import org.springframework.stereotype.Service;
			import org.springframework.web.client.RestTemplate;
			import org.springframework.http.*;

			@Service
			public class ClientAService {

				private final OAuth2AuthorizedClientManager authorizedClientManager;

				public ClientAService(OAuth2AuthorizedClientManager authorizedClientManager) {
					this.authorizedClientManager = authorizedClientManager;
				}

				public String getAccessToken() {
					OAuth2AuthorizedClient authorizedClient = authorizedClientManager.authorize(
							OAuth2AuthorizationContext.withClientRegistrationId("keycloak").principal("client-a").build());

					if (authorizedClient == null || authorizedClient.getAccessToken() == null) {
						throw new IllegalStateException("Unable to obtain access token.");
					}

					return authorizedClient.getAccessToken().getTokenValue();
				}

				public String callClientBApi() {
					String jwtToken = getAccessToken(); // 讓 Spring Security 自動管理 JWT

					String clientBApiUrl = "http://localhost:8082/api/orders";  // Client B API
					RestTemplate restTemplate = new RestTemplate();
					HttpHeaders headers = new HttpHeaders();
					headers.set("Authorization", "Bearer " + jwtToken);

					HttpEntity<String> request = new HttpEntity<>(headers);
					ResponseEntity<String> response = restTemplate.exchange(clientBApiUrl, HttpMethod.GET, request, String.class);

					return response.getBody();
				}
			}


	3.發起請求到 client B api with jwt
		使用 Spring Cloud OpenFeign（推薦，避免手寫 HTTP 請求）
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-starter-openfeign</artifactId>
			</dependency>
		定義 Feign Client（動態請求 Client B API）
			import org.springframework.cloud.openfeign.FeignClient;
			import org.springframework.web.bind.annotation.GetMapping;

			@FeignClient(name = "clientB", url = "${client-b.api-url}")
			public interface ClientBFeignClient {

				@GetMapping("/api/orders")
				String getOrders();
			}
		簡化變成
			import org.springframework.security.oauth2.client.OAuth2AuthorizedClientManager;
			import org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationContext;
			import org.springframework.security.oauth2.client.OAuth2AuthorizedClient;
			import org.springframework.security.oauth2.core.OAuth2AccessToken;
			import org.springframework.stereotype.Service;

			@Service
			public class ClientAService {

				private final OAuth2AuthorizedClientManager authorizedClientManager;
				private final ClientBFeignClient clientBFeignClient;

				public ClientAService(OAuth2AuthorizedClientManager authorizedClientManager, ClientBFeignClient clientBFeignClient) {
					this.authorizedClientManager = authorizedClientManager;
					this.clientBFeignClient = clientBFeignClient;
				}

				public String getAccessToken() {
					OAuth2AuthorizedClient authorizedClient = authorizedClientManager.authorize(
							OAuth2AuthorizationContext.withClientRegistrationId("keycloak").principal("client-a").build());

					if (authorizedClient == null || authorizedClient.getAccessToken() == null) {
						throw new IllegalStateException("Unable to obtain access token.");
					}

					return authorizedClient.getAccessToken().getTokenValue();
				}

				public String callClientBApi() {
					String jwtToken = getAccessToken();
					return clientBFeignClient.getOrders(); // 透過 Feign 呼叫 Client B API
				}
			}
			Feign 會自動幫你處理 HTTP 請求，避免手寫 RestTemplate，而且 URL 是動態的！

		讓 Feign Client 帶上 JWT
			方法 1：使用 Feign Request Interceptor（推薦）
				透過 RequestInterceptor 自動為所有 Feign 請求加上 JWT，這樣 Feign Client 就能夠帶 JWT 請求 Client B API！
					import feign.RequestInterceptor;
					import feign.RequestTemplate;
					import org.springframework.context.annotation.Bean;
					import org.springframework.security.oauth2.client.OAuth2AuthorizedClient;
					import org.springframework.security.oauth2.client.OAuth2AuthorizedClientManager;
					import org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationContext;
					import org.springframework.security.oauth2.core.OAuth2AccessToken;
					import org.springframework.stereotype.Component;

					@Component
					public class FeignClientInterceptor implements RequestInterceptor {

						private final OAuth2AuthorizedClientManager authorizedClientManager;

						public FeignClientInterceptor(OAuth2AuthorizedClientManager authorizedClientManager) {
							this.authorizedClientManager = authorizedClientManager;
						}

						@Override
						public void apply(RequestTemplate requestTemplate) {
							String jwtToken = getAccessToken(); // 取得 JWT Token
							requestTemplate.header("Authorization", "Bearer " + jwtToken); // 設定 Header
						}

						private String getAccessToken() {
							OAuth2AuthorizedClient authorizedClient = authorizedClientManager.authorize(
									OAuth2AuthorizationContext.withClientRegistrationId("keycloak").principal("client-a").build());

							if (authorizedClient == null || authorizedClient.getAccessToken() == null) {
								throw new IllegalStateException("Unable to obtain access token.");
							}

							return authorizedClient.getAccessToken().getTokenValue();
						}
					}
			方法 2：手動傳遞 JWT
				import org.springframework.cloud.openfeign.FeignClient;
				import org.springframework.web.bind.annotation.GetMapping;
				import org.springframework.web.bind.annotation.RequestHeader;

				@FeignClient(name = "clientB", url = "${client-b.api-url}")
				public interface ClientBFeignClient {
					@GetMapping("/api/orders")
					String getOrders(@RequestHeader("Authorization") String authorization);
				}

				public class ClientAService {
					....
					public String callClientBApi() {
						String jwtToken = "Bearer " + getAccessToken();  // 取得 JWT Token
						return clientBFeignClient.getOrders(jwtToken); // 手動傳遞 Token
					}
				}

		如何在編譯期（Compile Time）發現 API 變更？
			如果你的需求是 在編譯期（Compile Time）就能發現 Client B API 的 URL 變更
				方法 1：定義 API 接口，讓 Client A & Client B 共享
					使用 interface 來統一 API 定義，讓 Client A 和 Client B 都引用相同的 API 描述！
						package com.example.common.api;

						import org.springframework.web.bind.annotation.GetMapping;
						import org.springframework.web.bind.annotation.RequestMapping;
						import org.springframework.web.bind.annotation.RestController;

						@RequestMapping("/api/orders")
						public interface OrderApi {

							@GetMapping
							String getOrders();
						}
						這樣 API 的定義是共用的，Client A 和 Client B 都要引用這個 common-api！
					Client B 中實作這個 API
						@RestController
						public class ClientBController implements OrderApi {

							@Override
							public String getOrders() {
								return "Orders from Client B";
							}
						}
					 Client A 的 Feign Client 使用 OrderApi
						import org.springframework.cloud.openfeign.FeignClient;
						import com.example.common.api.OrderApi;

						@FeignClient(name = "clientB", url = "${client-b.api-url}")
						public interface ClientBFeignClient extends OrderApi {
						}
				方法 2：使用 Eureka / Consul 服務註冊發現
					如果 Client B API 變更，讓 Client A 自動發現新的 API 位址，而不需要手動設定 URL！
						Client B 在 Eureka 註冊
							spring:
							  application:
								name: client-b
							  cloud:
								discovery:
								  enabled: true
								eureka:
								  client:
									service-url:
									  defaultZone: http://localhost:8761/eureka/
						Client A 使用 Eureka 註冊的名稱來調用 Feign
							@FeignClient(name = "client-b")
							public interface ClientBFeignClient extends OrderApi {
							}
							這樣 Spring Cloud 會自動找到 client-b 的最新 URL，無需手動配置！
				方法 3：使用 OpenAPI + Code Generation
					... 略
		最佳方式是：
			使用 方法 1（共用 API 介面） 來確保 API 簽名一致（編譯期檢查）
			搭配 方法 2（Eureka） 來避免 Client A 需要手動修改 URL（執行期發現）


client B
	1.client B 設定 讓 Spring Security 知道 Auth Server（JWT 發行者） (application.yml)
		spring:
		  security:
			oauth2:
			  resourceserver:
				jwt:
				  issuer-uri: http://localhost:8080/realms/myrealm
		這樣 Spring Security 會自動驗證 JWT，確保 Token 來自合法的 Auth Server！
	2.並在 client B api 參數有 @AuthenticationPrincipal Jwt jwt，則 client B 收到會自行自動驗證 jwt
		@RestController
		@RequestMapping("/api")
		public class ClientBController {

			@GetMapping("/orders")
			public String getOrders(@AuthenticationPrincipal Jwt jwt) {
				String username = jwt.getClaim("sub");  // 取得 JWT 內的使用者名稱
				return "Orders for: " + username;
			}
		}

		📌 當 Client A 發請求到 /api/orders，Spring Security 會自動驗證 JWT
		📌 如果 JWT 無效，Spring Security 直接回傳 401 Unauthorized，不會執行 Controller
		📌 如果 JWT 有效，@AuthenticationPrincipal Jwt jwt 會自動解析 JWT，讓 API 取得用戶資訊！


OAuth2 resource server
	Client Credentials 模式下
		通常 每個 Backend 通常就自己是 Resource Server
			Frontend → 拿 JWT → Backend（自己驗證 JWT）
									  ↑
								acts as Resource Server

		因為 Client Credentials 模式 的用途本來就偏向：
			* 機器對機器的存取
			* 不涉及使用者登入
			* 每個 backend 服務有不同職責（如報表、任務排程、監控）

		若你把所有 API 集中到一個 Resource Server，會導致：
			* 各業務後端高度耦合，違反微服務獨立性
			* 資源管理與權限控管都要中央統一處理，複雜度暴增
			* 新 backend 推出還要改 centralized RS，不利 CI/CD 自助部署

		ref 3_2_Client_Credentials_resource_server

JWT + Refresh Token 實務設計
	通常 JWT 會 搭配 Refresh Token，確保安全性又能提升體驗：
	Token 類型				存在哪裡					有效時間		用途
	Access Token (JWT)		前端 (Header)				5-15 分鐘		每次 API 請求時使用
	Refresh Token			Cookie / Secure Storage		7 天 - 30 天	當 Access Token 過期時，取得新 JWT
	📌 流程
		用戶登入，取得 Access Token (JWT, 5 分鐘) 和 Refresh Token (7 天)
		前端帶著 Access Token 請求 API
		如果 Access Token 過期，前端使用 Refresh Token 向後端請求新 Token
		如果 Refresh Token 也過期，則強制用戶重新登入
	📌 這樣的設計比 Session 更安全
		即使 Access Token 被竊取，5 分鐘後就會失效
		Refresh Token 存在 HttpOnly Cookie，不會暴露在 JavaScript，降低被竊取的風險
		如果 Refresh Token 也過期 (7 天)，則用戶需要重新登入


將 Spring Security 的 CSRF Token 改為 JWT，至少需要調整以下幾個關鍵點：
	🚀(1)關閉 CSRF 防禦
		因為 CSRF 主要針對 Session-based 認證，而 JWT 是無狀態的，所以可以關閉 CSRF
			import org.springframework.context.annotation.Bean;
			import org.springframework.context.annotation.Configuration;
			import org.springframework.security.config.annotation.web.builders.HttpSecurity;
			import org.springframework.security.config.http.SessionCreationPolicy;
			import org.springframework.security.web.SecurityFilterChain;

			@Configuration
			public class SecurityConfig {
				@Bean
				public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
					http
						.csrf(csrf -> csrf.disable())  // ❌ 關閉 CSRF，因為我們改用 JWT
						.sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS)) // 無狀態
						.authorizeHttpRequests(auth -> auth
							.requestMatchers("/login", "/register").permitAll()
							.anyRequest().authenticated()
						)
						.oauth2ResourceServer(oauth2 -> oauth2.jwt())  // ✅ 啟用 JWT 驗證
						.build();
				}
			}
			這裡做了什麼？
				關閉 CSRF
				設置 SessionCreationPolicy.STATELESS 讓 Spring Security 無狀態運行
				啟用 OAuth2ResourceServer 來驗證 JWT

	🚀(2)讓前端從 CSRF Token 轉換成 JWT
		📌 前端 JavaScript 調整
			async function submitForm(event) {
				event.preventDefault(); // 阻止表單直接提交

				// 取得 JWT (模擬方式，實際應該從 Auth Server 取得)
				const jwtToken = localStorage.getItem("jwtToken");

				// 在 Header 裡附加 JWT
				const formData = new FormData(event.target);
				const requestOptions = {
					method: event.target.method,
					headers: {
						'Authorization': `Bearer ${jwtToken}`
					},
					body: formData
				};

				// 送出表單
				fetch(event.target.action, requestOptions)
					.then(response => response.json())
					.then(data => console.log('成功:', data))
					.catch(error => console.error('錯誤:', error));
			}

			// 綁定表單提交事件
			document.querySelector("form").addEventListener("submit", submitForm);
		📌 這裡做了什麼？

			前端不再使用 X-CSRF-TOKEN，而是 Authorization: Bearer <JWT>
			JWT 可以存儲在 localStorage 或 sessionStorage，避免使用 Cookie

	🚀(3)讓後端發放 JWT
		import org.springframework.security.oauth2.jwt.Jwt;
		import org.springframework.security.oauth2.jwt.JwtEncoder;
		import org.springframework.security.oauth2.jwt.JwtEncoderParameters;
		import org.springframework.stereotype.Service;
		import java.time.Instant;
		import java.util.Map;

		@Service
		public class JwtService {
			private final JwtEncoder jwtEncoder;

			public JwtService(JwtEncoder jwtEncoder) {
				this.jwtEncoder = jwtEncoder;
			}

			public String generateJwt() {
				Instant now = Instant.now();
				long expiry = 300L; // 5 分鐘有效

				Jwt jwt = jwtEncoder.encode(JwtEncoderParameters.from(
					claims -> claims
						.issuedAt(now)
						.expiresAt(now.plusSeconds(expiry))
						.claim("type", "form_submission")
				));

				return jwt.getTokenValue();
			}
		}
	🚀(4)建立 API 讓前端取得 JWT
		import org.springframework.web.bind.annotation.GetMapping;
		import org.springframework.web.bind.annotation.RequestMapping;
		import org.springframework.web.bind.annotation.RestController;
		import java.util.Map;

		@RestController
		@RequestMapping("/api")
		public class JwtController {
			private final JwtService jwtService;

			public JwtController(JwtService jwtService) {
				this.jwtService = jwtService;
			}

			@GetMapping("/get-jwt")
			public Map<String, String> getJwt() {
				return Map.of("token", jwtService.generateJwt());
			}
		}

	🚀(5)API 端驗證 JWT
		import org.springframework.context.annotation.Bean;
		import org.springframework.context.annotation.Configuration;
		import org.springframework.security.config.annotation.web.builders.HttpSecurity;
		import org.springframework.security.config.http.SessionCreationPolicy;
		import org.springframework.security.web.SecurityFilterChain;

		@Configuration
		public class SecurityConfig {
			@Bean
			public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
				http
					.csrf(csrf -> csrf.disable())  // ❌ 關閉 CSRF
					.sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS)) // 無狀態
					.authorizeHttpRequests(auth -> auth
						.requestMatchers("/api/get-jwt").permitAll()
						.requestMatchers("/api/submit").authenticated()
						.anyRequest().denyAll()
					)
					.oauth2ResourceServer(oauth2 -> oauth2.jwt())  // ✅ 啟用 JWT 驗證
					.build();
			}
		}
