必要設定項目總覽
	| 項目                                             | 說明                                                |
	| ------------------------------------------------ | ------------------------------------------------- |
	| 🔑 設定 Resource Server 的 JWT 驗證方式          | 通常是 issuer-uri 或 jwk-set-uri                      |
	| 🔐 設定權限保護規則（如 scope、角色）            | 使用 `@PreAuthorize`、或 HTTP security 設定             |
	| 📄 配置 application.yml / application.properties | 告訴 Spring Boot 如何驗證 JWT                           |
	| 🧪 Optional：加入權限驗證測試機制                | e.g. `@PreAuthorize("hasAuthority('SCOPE_xxx')")` |


1. 加入依賴（Spring Boot）
	<dependency>
	  <groupId>org.springframework.boot</groupId>
	  <artifactId>spring-boot-starter-oauth2-resource-server</artifactId>
	</dependency>

2. application.yml 設定 Resource Server 模式
	spring:
	  security:
		oauth2:
		  resourceserver:
			jwt:
			  issuer-uri: https://auth.example.com
				#issuer-uri：指定 Auth Server 的 /.well-known/openid-configuration 位置
				#Spring Security 會自動去抓 jwks_uri，取得 JWT 公鑰

3. 保護 API（設定權限控制）
	方法一：簡單保護所有 API
		@Bean
		SecurityFilterChain security(HttpSecurity http) throws Exception {
			http
			  .csrf(csrf -> csrf.disable())
			  .sessionManagement(sess -> sess.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
			  .authorizeHttpRequests(authz -> authz
				  .anyRequest().authenticated()
			  )
			  .oauth2ResourceServer(oauth2 -> oauth2.jwt());
			return http.build();
		}

	方法二：搭配 scope 驗證
		@RestController
		public class DemoController {

			@GetMapping("/api/data")
			@PreAuthorize("hasAuthority('SCOPE_read')")
			public String getData() {
				return "Protected Data";
			}
		}
		這時你要確保 JWT 中包含 scope: read 的 claim。

		也可以這樣用
			| 寫法                                                             | 意義                      |
			| -------------------------------------------------------------- | ----------------------- |
			| `hasAuthority('SCOPE_read')`                                   | 必須有 `read` scope        |
			| `hasAuthority('ROLE_ADMIN')`                                   | 必須有 `roles` 權限為 `ADMIN` |
			| `hasAnyAuthority('SCOPE_read', 'SCOPE_write')`                 | 有任一 scope 即可            |
			| `hasAuthority('SCOPE_admin') and hasAuthority('SCOPE_manage')` | 同時要有兩個權限                |
		要讓這行判斷生效的前提
			你必須：
				1.使用 Spring Security Resource Server 模式
				2.JWT 中有 scope 欄位（或對應 claim）
				3.使用 .oauth2ResourceServer().jwt() 的驗證機制
				4.有開啟 @EnableGlobalMethodSecurity(prePostEnabled = true)（或 Spring Security 6 用 @EnableMethodSecurity）

4. Auth Server 要產出 JWT 並允許該 client scope
	RegisteredClient.withId(UUID.randomUUID().toString())
		.clientId("client-a")
		.clientSecret("{noop}secret123")
		.authorizationGrantType(AuthorizationGrantType.CLIENT_CREDENTIALS)
		.scope("read")
		.build();

5. 測試方式（取得 JWT）
	curl -X POST https://auth.example.com/oauth2/token \
	  -u client-a:secret123 \
	  -d grant_type=client_credentials

	回傳後拿到的 access_token：
	curl https://your-backend/api/data \
	  -H "Authorization: Bearer <access_token>"


Q: Scope 通常只有 read、write 或 read write 的設定方式? 可以自訂?
	scope 是完全可以自訂
	Scope 與權限的命名建議
		| 類型              | 命名方式範例                      | 備註                     |
		| ----------------- | --------------------------------- | ------------------------ |
		| 資料操作          | `read_x`, `write_x`               | 對應 CRUD 行為           |
		| 管理後台功能      | `admin_x`, `manage_x`             | 代表需更高權限           |
		| REST 風格資源分類 | `order.view`, `user.create`       | 模仿資源路由階層結構     |
		| 命名空間          | `task:execute`, `log:read`        | 使用冒號劃分模組、動作等 |

	在 Auth Server 註冊 RegisteredClient 時直接自訂
		RegisteredClient.withId(UUID.randomUUID().toString())
			.clientId("client-a")
			.clientSecret("{noop}secret123")
			.authorizationGrantType(AuthorizationGrantType.CLIENT_CREDENTIALS)
			.scope("read_profile")
			.scope("admin_manage_user")
			.build();

	在 Resource Server 中這樣授權控制
		@GetMapping("/api/profile")
		@PreAuthorize("hasAuthority('SCOPE_read_profile')")
		public String profile() {
			return "OK";
		}

		@PostMapping("/api/admin/users")
		@PreAuthorize("hasAuthority('SCOPE_admin_manage_user')")
		public String adminOnly() {
			return "Admin done";
		}

	JWT 中範例 payload：
		{
		  "iss": "https://auth.example.com",
		  "sub": "client-a",
		  "scope": "read_profile admin_manage_user",
		  "exp": 1715458000
		}

	結論
		| 問題                               | 回答                          |
		| ---------------------------------- | --------------------------- |
		| scope 可以自訂嗎？                 | ✅ 完全可以，自由定義                 |
		| 有推薦命名方式嗎？                 | ✅ 建議使用 `資源.動作` 或 `模組:權限` 格式 |
		| 授權時用 scope 就可以控管 API 嗎？ | ✅ 可透過 `@PreAuthorize` 精細控制  |


scope 命名規則指南 + 分層權限建議表
	一、命名風格建議（Scope 命名）
		| 命名方式    | 範例                          | 說明                   |
		| ------- | --------------------------- | -------------------- |
		| `資源.動作` | `order.read`、`user.create`  | 類似 REST 路由，清楚表示資源與操作 |
		| `模組:動作` | `task:execute`、`log:view`   | 適合模組型系統（冒號分隔可分類）     |
		| `類別_動作` | `admin_manage_user`         | 使用底線，適合描述複雜模組/職責     |
		| `動詞資源`  | `readProfile`, `writeOrder` | 傳統 OAuth2 風格，簡潔但分類不明 |
		🔧 建議：
			若是 RESTful 系統 → 推薦 資源.動作
			若是模組分層設計 → 推薦 模組:動作
			命名盡量具可讀性，避免縮寫（如 r_o, w_u）

	二、功能模組範例規劃（分層設計）
		| 功能模組   | 建議 Scope 名稱                              | 對應權限用途           |
		| ---------- | -------------------------------------------- | ---------------- |
		| 使用者管理 | `user.read`, `user.write`, `user.delete`     | 查詢、編輯、刪除使用者資料    |
		| 角色/權限  | `role.view`, `role.assign`                   | 檢視角色清單、指派角色      |
		| 訂單系統   | `order.read`, `order.create`, `order.cancel` | 讀取訂單、下單、取消訂單     |
		| 報表系統   | `report.view`, `report.export`               | 看報表、匯出 Excel/PDF |
		| 任務排程   | `task:execute`, `task:manage`                | 觸發任務、調整排程設定      |
		| 設定中心   | `config.view`, `config.update`               | 系統參數設定           |
		| 管理端功能 | `admin:dashboard`, `admin:user_manage`       | 管理員控制台、使用者管理操作   |

	三、Scope 層級建議（細分 vs 合併）
		| 類型            | 建議                    | 範例                                  |
		| --------------- | ----------------------- | ------------------------------------- |
		| 🌱 基本操作     | 拆開成細項              | `user.read` vs `user.write`           |
		| 🌳 管理員功能   | 可用一組總權限          | `admin.all`（但要小心濫權）           |
		| 📦 通用功能     | 合併為 `system.read` 等 | 適用查詢類 API                        |
		| 🧩 多租戶或模組 | 建議加前綴名稱          | `tenant1.user.read`、`report:summary` |

	四、應用建議（與後端搭配）
		Spring Security 中：
			@PreAuthorize("hasAuthority('SCOPE_order.create')")
			public void createOrder() {...}
		JWT Claim 範例：
			{
			  "scope": "order.read order.create report.view"
			}

	五、常見錯誤觀念澄清
		| 常見誤解                       | 正確觀念                          |
		| ------------------------------ | ----------------------------- |
		| scope 只能用 `read` / `write`  | ❌ 可以自訂任意權限字串                  |
		| 每個 API 都要一個 scope        | ❌ 可依模組分類一組 scope 控多個 API      |
		| scope 僅用來顯示，不做權限控管 | ❌ 應在後端 `@PreAuthorize` 嚴格授權檢查 |
		| 一個 token 應該包含所有權限    | ❌ 只應發出該 client 該操作所需的最小權限集    |
	✅ 小結建議
		✅ 建議先從系統的 功能模組或 REST API 分類 出發規劃 scope
		✅ 使用一致的命名規則（如 資源.動作）可大幅提升可維護性
		✅ scope ≠ 角色，但可輔助實作 RBAC
		✅ 將 scope 權限與 @PreAuthorize 嚴格搭配是最佳實務


scope 是為了在後端能辨別並限制來自不同 client（尤其是多個前端）各自擁有的存取權限
	是一種「授權聲明」
		它代表：「這個 client（或 user）被授權可以做什麼？」

	後端 API 很可能被多種 client 使用
		| Client            | 用途                 | 權限需求                       |
		| ----------------- | -------------------- | ------------------------------ |
		| 前台前端（SPA）   | 顯示個人資料、下訂單 | `profile.read`, `order.create` |
		| 後台管理系統      | 管理使用者、審核訂單 | `user.manage`, `order.approve` |
		| 任務排程系統      | 自動取消逾期訂單     | `order.cancel`, `report.view`  |
		| 外部整合 client   | 串接訂單查詢 API     | `order.read`                   |

	後端需要靠 scope 來：
		✅ 分辨不同 client 的行為邊界
		✅ 控制每支 API 是否允許被某 client 執行
		✅ 降低濫權風險（最小權限原則）

	和角色（role）有什麼不同？
		| 分類      | 定義                      | 典型用途                     |
		| --------- | ------------------------- | ------------------------ |
		| `scope`   | OAuth2 的授權範圍（行為） | 控制 API 層級權限，針對 client 定義 |
		| `role`    | 使用者/系統角色（身分）   | 控制使用者身分（如 admin、manager） |

		🔸 scope 比較像「你允許做什麼」
		🔸 role 比較像「你是誰」



Q:如果這樣寫  @PreAuthorize("hasAuthority('SCOPE_order.create')")
	看起來很死，每個 api 授權方式不能寫成動態點的方式?

A: 解法：使用「動態授權」邏輯替代 @PreAuthorize
	方案一：使用自訂 AccessDecisionVoter / AuthorizationManager
		自訂一個授權邏輯，例如：
			public class ScopeBasedAuthorizationManager implements AuthorizationManager<RequestAuthorizationContext> {

				@Override
				public AuthorizationDecision check(Supplier<Authentication> authentication, RequestAuthorizationContext context) {
					HttpServletRequest request = context.getRequest();
					String method = request.getMethod();
					String path = request.getRequestURI();

					// 範例：對應 scope = method + path，例如 "GET /api/order" -> "SCOPE_order.read"
					String requiredScope = convertPathToScope(method, path);

					boolean hasScope = authentication.get().getAuthorities().stream()
						.anyMatch(auth -> auth.getAuthority().equals(requiredScope));

					return new AuthorizationDecision(hasScope);
				}

				private String convertPathToScope(String method, String path) {
					// 範例：GET /api/order → SCOPE_order.read
					if (method.equals("GET") && path.startsWith("/api/order")) return "SCOPE_order.read";
					if (method.equals("POST") && path.startsWith("/api/order")) return "SCOPE_order.create";
					return "SCOPE_unknown";
				}
			}

		搭配 authorizeHttpRequests() 動態套用：
			http.authorizeHttpRequests(authz -> authz
				.requestMatchers("/api/**").access(new ScopeBasedAuthorizationManager())
				.anyRequest().authenticated()
			);

		完全動態、可以從路由或自訂策略轉換成 scope

	方案二：在 Controller 或 Filter 中自己驗證 scope
		適合你需要更靈活的控制邏輯，範例如：
			@GetMapping("/api/order")
			public String order(HttpServletRequest request, @AuthenticationPrincipal Jwt jwt) {
				List<String> scopes = jwt.getClaimAsStringList("scope");
				if (!scopes.contains("order.read")) {
					throw new AccessDeniedException("No permission");
				}
				return "OK";
			}
		或抽出共用的 method：
			public void checkScope(Jwt jwt, String required) {
				List<String> scopes = jwt.getClaimAsStringList("scope");
				if (!scopes.contains(required)) {
					throw new AccessDeniedException("Missing scope: " + required);
				}
			}

	總結：Spring Security 的 @PreAuthorize 適合靜態授權，若需動態授權：
		| 解法                                 | 適用情境                          | 可動態判斷？ |
		| ------------------------------------ | --------------------------------- | ------ |
		| `@PreAuthorize("hasAuthority(...)")` | 簡單權限控制（靜態）              | ❌      |
		| 自訂 `AuthorizationManager`          | 想根據 API 路由或 method 決定權限 | ✅      |
		| 手動在 Controller 驗證 claim         | 超彈性、自訂錯誤回應或 logging    | ✅      |

	建議 產出一個 YAML 格式的「client + scope 對應清單」模版，方便在 CI/CD 管理
		YAML 模板：client-scope-config.yml
			auth:
			  clients:
				- clientId: frontend-user
				  clientSecret: ${FRONTEND_USER_SECRET}
				  grantTypes: [client_credentials]
				  scopes:
					- profile.read
					- order.create

				- clientId: backend-batch
				  clientSecret: ${BATCH_CLIENT_SECRET}
				  grantTypes: [client_credentials]
				  scopes:
					- order.cancel
					- report.generate

				- clientId: admin-portal
				  clientSecret: ${ADMIN_PORTAL_SECRET}
				  grantTypes: [client_credentials]
				  scopes:
					- user.manage
					- role.assign
					- config.update

		對應 Java 讀取設定（Spring Boot）
			@ConfigurationProperties(prefix = "auth")
			public class AuthClientProperties {
				private List<OAuthClient> clients;

				// getters/setters

				public static class OAuthClient {
					private String clientId;
					private String clientSecret;
					private List<String> grantTypes;
					private List<String> scopes;
					// getters/setters
				}
			}
		初始化註冊：
			@Bean
			CommandLineRunner registerClients(
				RegisteredClientRepository repo,
				AuthClientProperties authClientProps,
				PasswordEncoder encoder
			) {
				return args -> {
					for (var c : authClientProps.getClients()) {
						if (repo.findByClientId(c.getClientId()) != null) continue;

						RegisteredClient client = RegisteredClient.withId(UUID.randomUUID().toString())
							.clientId(c.getClientId())
							.clientSecret(encoder.encode(c.getClientSecret()))
							.scopes(sc -> sc.addAll(c.getScopes()))
							.authorizationGrantTypes(gt ->
								c.getGrantTypes().forEach(type ->
									gt.add(AuthorizationGrantType.from(type)))
							)
							.build();

						repo.save(client);
					}
				};
			}
		✅ 好處
			CI/CD 可集中控制哪些 client 有哪些 scope

			Config 維護清晰、可版本控制

			新 client / scope 加入時無需改程式，只需修改 YAML


Q:application.yml 有 issuer-uri、jwk-set-uri 之分差異?
	spring:
	  security:
		oauth2:
		  resourceserver:
			jwt:
			  issuer-uri: https://auth.example.com
			  #jwk-set-uri: https://auth.example.com/oauth2/jwks


A:這是 Spring Security 自動化配置 JWT 驗證的方式之一。這裡的 issuer-uri 和 jwk-set-uri 都是用來告訴 Spring Security 如何取得 JWT 的驗證資訊（例如公開金鑰），
	但它們的差異如下：

	🔍 issuer-uri vs jwk-set-uri 差異
		| 項目     | `issuer-uri`                                    | `jwk-set-uri`                                                 |
		| -------- | ----------------------------------------------- | ------------------------------------------------------------- |
		| 意圖     | 指向 OAuth2 授權伺服器的 **發行者識別 URI**     | 直接指定 JWT 驗證用的 JWK 公鑰列表 URL                        |
		| 適用場景 | Spring Security 自動根據 OIDC metadata 發現設定 | 當你想**明確指定金鑰位置**或你的服務**不提供 OIDC metadata**  |
		| 範例     | `https://auth.example.com`                      | `https://auth.example.com/.well-known/jwks.json`              |
		| 額外好處 | 可支援更多自動設定（audience、introspection 等）| 僅限於取得公鑰清單                                            |

	當你的 Auth Server 有支援 OpenID Connect metadata（例如：
		https://auth.example.com/.well-known/openid-configuration），Spring Security 會從中自動找出：
			jwks_uri
			issuer
			introspection_endpoint
			userinfo_endpoint
			...
		
		確認是否支援
			curl http://localhost:9000/auth-server/.well-known/openid-configuration | jq 
		
	🛠 使用 jwk-set-uri（當 Auth Server 沒支援 OIDC）
		* 適合自己客製的 Authorization Server
		* 或 Auth Server 沒有提供 .well-known/openid-configuration
		
		
	✅ 結論
		* 優先使用 issuer-uri，前提是你的 Auth Server 有支援 OpenID Connect Discovery。

		* 若你手動提供金鑰位置或 Auth Server 沒有 metadata，則使用 jwk-set-uri。
		
		
統一前端機器 webClient 到 starter => gateway
	import org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientProperties;
	import org.springframework.context.annotation.Bean;
	import org.springframework.context.annotation.Configuration;
	import org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;
	import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;
	import org.springframework.security.oauth2.client.web.reactive.function.client.ServletOAuth2AuthorizedClientExchangeFilterFunction;
	import org.springframework.web.reactive.function.client.WebClient;

	@Configuration
	public class FrontEndWebClientConfiguration {
		@Bean
		WebClient webClient(final ClientRegistrationRepository clients, final OAuth2ClientProperties oAuth2ClientProperties,
				final OAuth2AuthorizedClientRepository authClients) {
			final ServletOAuth2AuthorizedClientExchangeFilterFunction oauth2 = new ServletOAuth2AuthorizedClientExchangeFilterFunction(
					clients, authClients);
			// final Map<String, Registration> map =
			// oAuth2ClientProperties.getRegistration();
			// final Registration registration = map.get("jwt-client");

			oauth2.setDefaultClientRegistrationId("hello-client");
			return WebClient.builder() //
					.apply(oauth2.oauth2Configuration()) // 自動加 Authorization header
					// .filter(logRequest()) // log 或 traceId 攜帶，用依賴 micrometer-tracing-bridge-brave 自動處理
					// .filter(handleGatewayError()) // 統一錯誤處理
					// .clientConnector(createConnectorWithTimeout()) // timeout 設定
					.build();
		}
	}


	🔧 錯誤處理 Filter（例如統一包裝 gateway 錯誤）
		private ExchangeFilterFunction handleGatewayError() {
			return ExchangeFilterFunction.ofResponseProcessor(response -> {
				if (response.statusCode().isError()) {
					return response.bodyToMono(String.class)
							.defaultIfEmpty("Unknown error")
							.flatMap(body -> {
								return Mono.error(new RuntimeException("Gateway error: " + body));
							});
				} else {
					return Mono.just(response);
				}
			});
		}

	⏱ 建立 Timeout 設定用的 clientConnector
		private ReactorClientHttpConnector createConnectorWithTimeout() {
			HttpClient httpClient = HttpClient.create()
				.responseTimeout(Duration.ofSeconds(5))   // 伺服器回應超時
				.option(ChannelOption.CONNECT_TIMEOUT_MILLIS, 3000); // TCP 連線 timeout

			return new ReactorClientHttpConnector(httpClient);
		}

	🔁 若你要加 Retry
		webClient.get()
			.uri("/api/xxx")
			.retrieve()
			.bodyToMono(MyResult.class)
			.retryWhen(Retry.backoff(3, Duration.ofMillis(500)))
