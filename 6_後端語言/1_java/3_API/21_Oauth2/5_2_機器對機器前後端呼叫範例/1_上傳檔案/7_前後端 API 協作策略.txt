ref ChatGPT

前後端 API 協作策略
	✅ 大型或長期專案：普遍會採「型別不直接共用 + 向後兼容模式」
	✅ 小型或同步開發的專案：才會用「型別共用」做強一致性


三種策略對比總覽：

	| 模式              | 型別共用？                  | 向後相容？              | 適用情境           |
	| ----------------- | --------------------------- | ----------------------- | ------------------ |
	| ✅ 強型別共用     | ✔️ 是（共用 DTO/interface） | ❌ 不考慮相容性，強耦合 | 小團隊、同步部署   |
	| ✅ 向後兼容設計   | ❌ 不共用型別               | ✔️ 後端向後兼容前端     | 跨團隊、大型微服務 |
	| ❌ 不一致且無規範 | ❌ 各自定義                 | ❌ 一改就壞             | ❌ 不推薦，會踩坑  |


✅ 向後兼容模式的核心設計要點
	| 類型      | 設計原則                                                               |
	| --------- | ---------------------------------------------------------------------- |
	| DTO 設計  | **新增欄位可接受、不要刪欄位、不改欄位型別**                           |
	| JSON 傳輸 | 可傳回更多欄位，舊前端會自動忽略未知欄位                               |
	| Enum 擴充 | 加新值要能 fallback，前端不應 hardcode                                 |
	| 驗證邏輯  | 使用 `@JsonIgnoreProperties(ignoreUnknown = true)` 讓前端接多欄位不爆  |
	| API 協議  | 若有破壞性改動就升 version：`/api/v2/...`                              |

✅ 具體建議：根據情境選擇策略
	| 你的專案情況                   | 建議策略                                 |
	| ------------------------------ | ---------------------------------------- |
	| 前後端同一團隊、同時交付       | ✅ 可用共用 DTO 模組                     |
	| 前端與後端獨立團隊、版本不同步 | ✅ 向後相容設計 + OpenAPI + DTO 自動生成 |
	| 有 CI/CD、自動測試流程         | ✅ 共用型別 + schema 驗證也可考慮        |
	| 不允許版本中斷                 | ✅ 建議多 API 版本共存（v1/v2）          |

🧪 實務中怎麼做？
	| 公司/專案規模     | 常見做法                                                  |
	| ----------------- | --------------------------------------------------------- |
	| 新創 / 快速迭代   | 共用 DTO，改了就全部一起升版                              |
	| 中型團隊（多人）  | 不共用 DTO，靠 OpenAPI + 向後兼容                         |
	| 大型企業 / 金融   | 後端版本嚴格控管，只能新增欄位或推新 API，不得刪或改型別  |
	| API 對外提供      | 完全向後相容，甚至支援 JSON schema 驗證，錯誤自訂格式統一 |

✅ 結論一句話：
	* 強型別共用 讓開發快，但會犧牲彈性與部署獨立性
	* 向後相容設計 是較成熟與穩定的方式，特別適合「前後端版本不同步」的系統