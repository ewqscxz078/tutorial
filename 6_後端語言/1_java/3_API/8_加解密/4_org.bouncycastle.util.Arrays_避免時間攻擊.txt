ref ChatGPT

1.來源
	org.bouncycastle.util.Arrays：來自 Bouncy Castle，主要用於加密相關的操作。
	java.util.Arrays：標準 JDK 內建的 Arrays 工具類，提供基本的數組操作。

2. 功能差異
					org.bouncycastle.util.Arrays											java.util.Arrays
	基本操作		提供 copyOf、fill、equals、hashCode										提供 copyOf、fill、equals、hashCode
	加密安全性		針對 加密場景 提供 constant-time 比較（避免時間攻擊）					沒有特別針對加密場景設計
	擦除敏感數據	提供 clear(byte[]) 來安全擦除敏感資料									沒有內建方法可直接清除數組
	子陣列操作		concatenate(byte[]...)、prepend(byte[], byte)、append(byte[], byte)		需要手動處理
	安全比較		constantTimeAreEqual(byte[], byte[])（避免 side-channel 攻擊）			Arrays.equals(byte[], byte[])（可能暴露時間資訊）
	其他方法		針對 byte arrays 進行更多操作，如 clone(), reverse(), concatenate()		針對各種 primitive 型別提供操作

3. 加密安全比較
	時間攻擊（Timing Attack） 是一種針對 equals() 操作時間的攻擊，java.util.Arrays.equals() 
	在第一個不匹配的字節就會返回 false，導致不同輸入可能產生不同的執行時間。
		boolean isEqual = org.bouncycastle.util.Arrays.constantTimeAreEqual(array1, array2);
		這個方法在所有情況下執行時間固定，不會根據內容不同而有不同的運行時間，因此更安全。
		
		boolean isEqual = java.util.Arrays.equals(array1, array2);
		它會根據內容不同提早結束，可能讓攻擊者推測出某些資訊。

4. 何時使用 org.bouncycastle.util.Arrays?
	當你處理密鑰 (keys)、憑證 (certificates) 或 加密相關數據 (encrypted data)，建議使用 org.bouncycastle.util.Arrays，以確保避免時間攻擊。
	如果只是一般數組操作，如排序、查找、轉換為 List，則 java.util.Arrays 已足夠。