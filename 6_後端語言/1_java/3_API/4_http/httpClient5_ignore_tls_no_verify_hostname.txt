HttpClients5 tls ignore and 不驗證主機名稱 寫法


import org.apache.hc.client5.http.impl.classic.CloseableHttpClient;
import org.apache.hc.client5.http.impl.classic.HttpClients;
import org.apache.hc.client5.http.impl.io.PoolingHttpClientConnectionManager;
import org.apache.hc.client5.http.impl.io.PoolingHttpClientConnectionManagerBuilder;
import org.apache.hc.client5.http.ssl.DefaultClientTlsStrategy;
import org.apache.hc.core5.ssl.SSLContextBuilder;
import org.apache.hc.core5.ssl.TrustStrategy;
import org.apache.hc.core5.ssl.SSLContexts;
import org.apache.hc.core5.ssl.SSLInitializationException;
import org.apache.hc.core5.ssl.HostnameVerificationPolicy;
import org.apache.hc.core5.ssl.NoopHostnameVerifier;

import javax.net.ssl.SSLContext;
import java.security.cert.X509Certificate;

public class UnsafeHttpClient {

    public static CloseableHttpClient create() throws Exception {
        // 建立一個信任所有憑證的 TrustStrategy
        TrustStrategy trustAllStrategy = (X509Certificate[] chain, String authType) -> true;

        // 建立 SSLContext，並載入信任策略
        SSLContext sslContext = SSLContextBuilder.create()
                .loadTrustMaterial(trustAllStrategy)
                .build();

        // 建立 TlsStrategy，設定為使用 NoopHostnameVerifier（不驗證主機名稱）
        DefaultClientTlsStrategy tlsStrategy = new DefaultClientTlsStrategy(
                sslContext,
                null,
                HostnameVerificationPolicy.ANY,
                NoopHostnameVerifier.INSTANCE
        );

        // 建立連線管理器，並設定 TlsStrategy
        PoolingHttpClientConnectionManager connectionManager = PoolingHttpClientConnectionManagerBuilder.create()
                .setTlsStrategy(tlsStrategy)
                .build();

        // 建立 HttpClient，並設定連線管理器
        return HttpClients.custom()
                .setConnectionManager(connectionManager)
                .build();
    }
}