ref ChatGPT

前後端 : 向後相容 API 設計

對於常見的 CRUD（新增、修改、刪除、查詢）API，若 DTO 結構異動，該怎麼調整 API？需不需要上下前後端？會影響什麼？


✅ 回答總覽：異動對照表
	| 變動類型                                 | 屬性                           | 是否向後相容                   | 前後端上下影響                              |
	| ---------------------------------------- | ------------------------------ | ------------------------------ | ------------------------------------------- |
	| ✅ **新增欄位**                          | 非必填、新增欄位               | ✅ 向後相容                    | 後端上即可，前端可晚些更新                  |
	| ⚠️ **修改欄位型別**                      | e.g. `int` 改成 `String`       | ❌ 不相容                      | 前後端必須**同時升級**，需協調部署          |
	| ⚠️ **改欄位名稱**                        | `userName` → `name`            | ❌ 不相容                      | 前端必須一起改，否則破壞                    |
	| ❌ **刪除欄位**                          | 移除回傳的欄位                 | ❌ 不相容                      | 舊前端會炸掉，**嚴禁**直接刪                |
	| ✅ **新增 API 欄位驗證邏輯（不改型別）** | 如 `@NotBlank`                 | ✅ 表面相容，但前端送錯會報錯  | 若前端沒送欄位，會觸發 400，需要測試過渡期  |
	| ✅ **新增 scope 功能**                   | 新增查詢欄位、不影響原有功能   | ✅ 向後相容                    | 前端可選擇是否使用，不必同步上線            |


🧱 CRUD 對應範例說明
	📌 1. 查詢（GET）
		| 動作     | 改法               | 相容性   | 建議                            |
		| -------- | ------------------ | -------- | ------------------------------- |
		| 新增欄位 | 回傳 JSON 加新欄位 | ✅ 安全  | 前端照用原欄位即可              |
		| 移除欄位 | ❌ 不建議          | ❌ 壞掉  | 應推出 `/api/v2/...`            |
		| 改名欄位 | ❌ 不建議          | ❌ 壞掉  | 應加新欄位，舊欄位標 deprecated |

	📌 2. 新增（POST）
		| 動作              | 改法      | 相容性            | 建議                  |
		| ----------------- | --------- | ----------------- | --------------------- |
		| 新增可選欄位      | ✅ 安全   | ✅ 可傳可不傳     | 前端升版可晚點        |
		| 改型別 / 改欄位名 | ❌ 不建議 | ❌ 必須前後一起改 | 推新版 API 路徑較安全 |

	📌 3. 修改（PUT / PATCH）
		| 動作                   | 改法        | 相容性      | 建議                 |
		| ---------------------- | ----------- | ----------- | -------------------- |
		| 加欄位（如加更新理由） | ✅ 可選欄位 | ✅ 向後相容 | 可採 PATCH，前端緩升 |
		| 移除欄位 / 改名        | ❌ 不建議   | ❌          | 應建立新欄位過渡     |

	📌 4. 刪除（DELETE）
		| 動作               | 改法            | 相容性 | 建議                              |
		| ------------------ | --------------- | ------ | --------------------------------- |
		| 無特別欄位通常相容 | 多為 path param | ✅     | 若要加 metadata，考慮改 POST 方式 |

✅ 建議實務流程（搭配 CI/CD）
	| 項目         | 建議做法                                                  |
	| ------------ | --------------------------------------------------------- |
	| API 升級策略 | 採用版本控制 `/v1/api/...`、`/v2/api/...`                 |
	| DTO 改動流程 | 新增欄位標為 `@JsonInclude(Include.NON_NULL)`、保留舊欄位 |
	| 測試機同步性 | 在 CI 驗證前後端用相同 schema 可否成功互通                |
	| 文件同步     | 用 Springdoc / OpenAPI 自動產生前端 spec                  |

🧠 小結原則（可記為 3 不 + 2 要）：
	❌ 不刪欄位
	❌ 不改欄位型別
	❌ 不改欄位名稱
	✅ 要新增用 nullable、不破壞原有資料
	✅ 要發新版本時明確標注 /v2/ 並保留 v1 若還有人在用