ref ChatGPT


情境3:真正的「兩段式檔案上傳」流程：
	 [使用者] → 前端服務（接收 MultipartFile） → 落地暫存目錄
			→ 做一些處理（壓縮 / 掃毒 / 轉格式 / 加 metadata）
			→ 用 WebClient 傳送至後端 Resource Server

正規且穩定的設計模式，特別適用於：
	⏱ 延後上傳（async）
	🔒 進行安全掃毒、壓縮處理
	📁 加入檔案管理 metadata（如租戶、來源等）

前端
	☕ Controller：接收使用者上傳
		@RestController
		@RequestMapping("/upload")
		public class UploadController {

			private final FileRelayService fileRelayService;

			public UploadController(FileRelayService fileRelayService) {
				this.fileRelayService = fileRelayService;
			}

			@PostMapping
			public ResponseEntity<String> handleUpload(@RequestParam("file") MultipartFile file) throws IOException {
				// 1. 落地至暫存目錄
				Path tempPath = fileRelayService.saveToLocalTemp(file);

				// 2. 做額外處理（範例為壓縮）
				Path processedPath = fileRelayService.processFile(tempPath);

				// 3. 上傳至 Resource Server
				String result = fileRelayService.uploadToBackend(processedPath);

				return ResponseEntity.ok("檔案處理並上傳成功: " + result);
			}
		}

	☕ Service：處理檔案並上傳
		@Service
		public class FileRelayService {

			private final WebClient webClient;

			public FileRelayService(WebClient webClient) {
				this.webClient = webClient;
			}

			// 1 落地檔案
			public Path saveToLocalTemp(MultipartFile file) throws IOException {
				String filename = UUID.randomUUID() + "-" + file.getOriginalFilename();
				Path tempFile = Files.createTempFile("upload-", "-" + filename);
				file.transferTo(tempFile);
				return tempFile;
			}

			// 2 做處理（範例：Gzip 壓縮）
			public Path processFile(Path inputFile) throws IOException {
				Path outputFile = Files.createTempFile("processed-", ".gz");
				try (InputStream in = Files.newInputStream(inputFile);
					 GZIPOutputStream out = new GZIPOutputStream(Files.newOutputStream(outputFile))) {
					in.transferTo(out);
				}
				return outputFile;
			}

			// 3 用 WebClient 上傳
			public String uploadToBackend(Path processedFile) {
				Resource resource = new FileSystemResource(processedFile.toFile());

				return webClient.post()
					.uri("http://localhost:8081/api/files/upload")
					.contentType(MediaType.MULTIPART_FORM_DATA)
					.body(BodyInserters.fromMultipartData("file", resource))
					.retrieve()
					.bodyToMono(String.class)
					.block();
			}
		}

後端 Resource Server
	@PostMapping("/api/files/upload")
	public ResponseEntity<String> handleBackendUpload(@RequestPart("file") MultipartFile file) throws IOException {
		// 存檔或後續處理
		Path savePath = Paths.get("/data/uploaded/", file.getOriginalFilename());
		file.transferTo(savePath);

		return ResponseEntity.ok("已收到檔案：" + file.getOriginalFilename());
	}


✅ 加強點（可選）：
	| 功能               | 實作方式                                                                |
	| ------------------ | ----------------------------------------------------------------------- |
	| 🧼 掃毒            | 呼叫第三方掃毒引擎（如 ClamAV）驗證後再上傳                             |
	| 📂 多租戶路徑      | 用 `clientId` or JWT 中 `tenant` claim 建立 `/tmp/{tenantId}/xxx.tmp`   |
	| 🗑️ 上傳後清除暫存  | 呼叫 `Files.delete(tempPath)`                                           |
	| 📋 加上 metadata   | 多傳一個欄位 `description`、`tag`，後端一併接收處理                     |

| 優點                                           | 缺點                                   |
| ---------------------------------------------- | -------------------------------------- |
| 可驗證檔案完整性、執行掃毒、壓縮、加簽名等處理 | 檔案 I/O 成本較高，需要清理            |
| 更適合企業系統、資料保全要求                   | 較適合非同步批次，不適用即時超大量上傳 |


-------------------------------------------------------------------------------------------------------------
加上 metadata  改良
-------------------------------------------------------------------------------------------------------------
🧾 範例：前端上傳時包含 metadata
	MultipartBodyBuilder builder = new MultipartBodyBuilder();
	builder.part("file", new FileSystemResource(file));
	builder.part("description", "2025 Q1 業務報表");
	builder.part("tag", "report");

	webClient.post()
		.uri("http://localhost:8081/api/files/upload")
		.contentType(MediaType.MULTIPART_FORM_DATA)
		.body(BodyInserters.fromMultipartData(builder.build()))
		.retrieve()
		.bodyToMono(String.class)
		.block();

	☕ 後端 Controller 接收方式：
		@PostMapping("/api/files/upload")
		public ResponseEntity<String> handleUpload(
				@RequestPart("file") MultipartFile file,
				@RequestPart("description") String description,
				@RequestPart("tag") String tag,
				@AuthenticationPrincipal Jwt jwt) throws IOException {

			System.out.printf("📄 檔案: %s, 描述: %s, 標籤: %s, 上傳者: %s%n",
				file.getOriginalFilename(), description, tag, jwt.getSubject());

			// 儲存檔案、寫入 metadata 資料表、發送通知...

			return ResponseEntity.ok("檔案與 metadata 上傳成功");
		}

	| 欄位                      | 實務用途                                       |
	| ------------------------- | ---------------------------------------------- |
	| `description`             | UI 上讓使用者輸入，方便營運人員辨識            |
	| `tag` / `type`            | 決定轉檔格式（如 `.doc` → `.pdf`）或掃毒政策   |
	| `tenantId` / `systemId`   | 多系統整合，儲存區分不同業主資料               |
	| `referenceId`             | 檔案綁定特定業務流程（如申請單、報表、表單 ID）|
	| `notifyEmail`             | 後端上傳完成後要通知的 email 地址              |

檔案只是「資料的主體」，而 metadata 是檔案的上下文、語意、指令、控制資訊。
	特別在 M2M 或企業系統中，加上 metadata 能讓後端：
	做對應資料的綁定與邏輯判斷
	控制儲存與後處理策略
	增強安全性與稽核能力

🎯 改良方案：Multipart 請求中傳「檔案 + JSON DTO」
	🔧 前端：使用 WebClient 傳 Multipart（包含檔案 + JSON metadata）
		MultipartBodyBuilder builder = new MultipartBodyBuilder();
		builder.part("file", new FileSystemResource(file));
		builder.part("meta", new ByteArrayResource(objectMapper.writeValueAsBytes(new FileMetadata())) {
			@Override
			public String getFilename() {
				return "metadata.json"; // 不加也行，避免 content-disposition 問題
			}
		}).header("Content-Type", "application/json");

		webClient.post()
			.uri("http://localhost:8081/api/files/upload")
			.contentType(MediaType.MULTIPART_FORM_DATA)
			.body(BodyInserters.fromMultipartData(builder.build()))
			.retrieve()
			.bodyToMono(String.class)
			.block();

	☕ DTO 範例：
		@Data
		public class FileMetadata {
			private String description;
			private String tag;
			private String referenceId;
		}
	☕ 後端：使用 @RequestPart("meta") FileMetadata meta
		@PostMapping("/api/files/upload")
		public ResponseEntity<String> handleUpload(
				@RequestPart("file") MultipartFile file,
				@RequestPart("meta") FileMetadata metadata,
				@AuthenticationPrincipal Jwt jwt) throws IOException {

			System.out.printf("📦 檔案: %s\n📋 描述: %s\n🔖 標籤: %s\n🔐 clientId: %s%n",
				file.getOriginalFilename(),
				metadata.getDescription(),
				metadata.getTag(),
				jwt.getSubject());

			return ResponseEntity.ok("檔案與 metadata DTO 上傳成功");
		}

✅ 優點對比
	| 傳一堆欄位（原始方式）  | 使用 DTO + JSON                       |
	| ----------------------- | ------------------------------------- |
	| 簡單、不需額外序列化    | 更結構化、易擴充                      |
	| 易造成 controller 爆長  | ✅ 可封裝 metadata、可驗證 DTO 結構   |
	| 適合欄位少情境          | ✅ 適合欄位多、需版本控管、複雜邏輯   |


-------------------------------------------------------------------------------------------------------------
錯誤處理改良  改良
-------------------------------------------------------------------------------------------------------------
❌ 不處理錯誤會發生什麼事？
	| 問題                                          | 說明                                                       |
	| --------------------------------------------- | ---------------------------------------------------------- |
	| ⛔ WebClient 呼叫後端 500，前端還以為上傳成功 | 會讓使用者或上游服務以為「整個流程成功」，其實檔案沒進後端 |
	| 🧼 檔案已落地，但因後端失敗未被刪除           | 會導致 temp folder 長期堆積垃圾檔案                        |
	| 🔇 沒 log、沒錯誤訊息                         | 錯誤被 swallow，debug 非常困難                             |

✅ 改進版：加上 .onStatus()、.doOnError()、清理檔案
	public String uploadToBackend(Path processedFile) {
		Resource resource = new FileSystemResource(processedFile.toFile());

		try {
			return webClient.post()
				.uri("http://localhost:8081/api/files/upload")
				.contentType(MediaType.MULTIPART_FORM_DATA)
				.body(BodyInserters.fromMultipartData("file", resource))
				.retrieve()
				.onStatus(HttpStatusCode::isError, res -> res.bodyToMono(String.class)
					.flatMap(body -> Mono.error(new IllegalStateException("後端錯誤：" + body))))
				.bodyToMono(String.class)
				.doOnError(ex -> log.error("❗ 上傳失敗: {}", ex.getMessage(), ex))
				.block();
		} finally {
			try {
				Files.deleteIfExists(processedFile);
			} catch (IOException io) {
				log.warn("⚠️ 無法刪除暫存檔案: {}", processedFile, io);
			}
		}
	}

🔐 實務上建議加強點：
	| 項目                        | 建議                                    |
	| --------------------------- | --------------------------------------- |
	| ✔️ `.onStatus()`            | 處理 4xx / 5xx 回應錯誤，包成 exception |
	| ✔️ `.doOnError()`           | 統一 log 所有錯誤訊息                   |
	| ✔️ `finally` 區塊清除暫存檔 | 不論成功或失敗都要清理檔案              |
	| ✔️ 回傳有意義的錯誤訊息     | 包含後端錯誤原因、fileName、traceId 等  |



-------------------------------------------------------------------------------------------------------------
穩健型上傳系統設計 改良
-------------------------------------------------------------------------------------------------------------
* retry 策略（重試）
* Backoff（回退）+ Timeout（逾時控制）
* 暫存清理
* fallback 機制
必須考慮，否則系統會有潛在的：
	❌ 資料丟失
	❌ 記憶體或磁碟爆滿
	❌ 誤判成功 / 假失敗
	❌ 無法恢復

🔁 1. Retry 策略（重試）
	✅ 用意：
		在與後端或遠端服務通訊時，如果遇到暫時性失敗（如 500、超時、網路斷線），系統能自動重試請求，避免「一次失敗就整個流程中斷」。
	🧱 範例情境：
		你上傳檔案時後端剛好正在重啟，第一次呼叫失敗，但 2 秒後其實可以成功。
	🛠 實作方式（WebClient 搭配 Reactor Retry）：
		.retryWhen(Retry.backoff(3, Duration.ofSeconds(2)))
			代表：最多重試 3 次，每次間隔 2 秒，指數回退

⏱️ 2. Backoff（回退）+ Timeout（逾時控制）
	✅ 用意：
		防止你一直立即瘋狂重試、癱瘓對方服務（DoS-like），並確保你自己的呼叫也不會卡死。
	🧱 範例情境：
		如果後端 timeout 是 10 秒，你前端沒有設 timeout，整個 servlet thread 就會卡住 10 秒，造成壓力。
	🛠 建議做法：
		.timeout(Duration.ofSeconds(10))
		.retryWhen(Retry.backoff(2, Duration.ofSeconds(3)))
			代表：最多等 10 秒，重試 2 次，每次 3 秒間隔

🧼 3. 暫存清理
	✅ 用意：
		你兩段式上傳時，前端會把檔案先 transferTo(tempFile) 落地。若後端上傳失敗或例外發生，這些檔案如果沒被清除，會一直殘留在 /tmp 或 /var/tmp 下，最終導致磁碟爆滿。
	🛠 建議做法：
		finally {
			Files.deleteIfExists(tempFile);
		}

🛡 4. Fallback 機制
	✅ 用意：
		在所有嘗試（retry + timeout）都失敗時，系統仍能提供「次佳的替代處理」，而不是整個炸掉。
	🧱 實際做法：
		👉 儲存失敗時寫入 fallback queue / DB / S3（非同步後補處理）
		👉 呈現替代回應：「我們已收到上傳，稍後補上」
	🛠 程式範例（簡化）：
		.doOnError(ex -> {
			saveToRetryQueue(tempFile);
			log.error("上傳失敗，已進入補償處理", ex);
		})

| 機制                | 用途                           | 沒做的後果             |
| ------------------- | ------------------------------ | ---------------------- |
| Retry               | 避免短暫性錯誤導致請求失敗     | 小故障造成大問題       |
| Backoff / Timeout   | 控制資源使用、避免雪崩         | 請求堆積、主機被拖垮   |
| 暫存清理            | 防止磁碟空間耗盡               | `/tmp` 長期爆滿        |
| Fallback            | 保住關鍵資料、不讓錯誤中斷流程 | 使用者體驗差、資料遺失 |

簡易範例
	import lombok.extern.slf4j.Slf4j;
	import org.springframework.core.io.FileSystemResource;
	import org.springframework.core.io.Resource;
	import org.springframework.http.MediaType;
	import org.springframework.http.client.reactive.ReactorClientHttpConnector;
	import org.springframework.stereotype.Service;
	import org.springframework.util.FileSystemUtils;
	import org.springframework.web.reactive.function.BodyInserters;
	import org.springframework.web.reactive.function.client.WebClient;
	import reactor.core.publisher.Mono;
	import reactor.util.retry.Retry;

	import java.io.IOException;
	import java.nio.file.Files;
	import java.nio.file.Path;
	import java.time.Duration;
	import java.util.UUID;

	@Slf4j
	@Service
	public class RobustFileUploader {

		private final WebClient webClient;

		public RobustFileUploader(WebClient webClient) {
			this.webClient = webClient;
		}

		public void uploadWithRetry(Path filePath) {
			Resource resource = new FileSystemResource(filePath.toFile());

			webClient.post()
					.uri("http://localhost:8081/api/files/upload")
					.contentType(MediaType.MULTIPART_FORM_DATA)
					.body(BodyInserters.fromMultipartData("file", resource))
					.retrieve()
					.onStatus(status -> status.is4xxClientError() || status.is5xxServerError(),
							res -> res.bodyToMono(String.class).flatMap(err -> {
								log.error("\u274C 後端回應錯誤: {}", err);
								return Mono.error(new RuntimeException("後端錯誤: " + err));
							}))
					.bodyToMono(String.class)
					.timeout(Duration.ofSeconds(10))
					.retryWhen(Retry.backoff(2, Duration.ofSeconds(3)))
					.doOnSuccess(body -> {
						log.info("\u2705 上傳成功: {}", body);
						try {
							Files.deleteIfExists(filePath);
							log.info("\u2702 已刪除暫存檔案: {}", filePath);
						} catch (IOException e) {
							log.warn("\u26A0\uFE0F 無法刪除暫存檔案: {}", filePath, e);
						}
					})
					.doOnError(ex -> {
						log.error("\uD83D\uDEA8 上傳失敗，進入補償處理: {}", ex.getMessage(), ex);
						saveToRetryQueue(filePath);
					})
					.subscribe();
		}

		private void saveToRetryQueue(Path failedFile) {
			try {
				Path fallbackDir = Path.of("/tmp/fallback-uploads/");
				Files.createDirectories(fallbackDir);
				Path fallbackFile = fallbackDir.resolve(UUID.randomUUID() + "-" + failedFile.getFileName());
				Files.copy(failedFile, fallbackFile);
				Files.deleteIfExists(failedFile);
				log.info("\uD83D\uDEAB 檔案已進入補償目錄: {}", fallbackFile);
			} catch (IOException e) {
				log.error("\uD83D\uDD25 補償儲存失敗，請人工處理: {}", failedFile, e);
			}
		}
	}
