ref ChatGPT


若前後端無使用一致型別，沒有編譯期型別檢查，一旦後端改了路徑、參數、回傳格式，
	前端不會報錯，只會在執行時爆炸

	| 問題               | 說明                                                                  |
	| ------------------ | --------------------------------------------------------------------- |
	| ⚠️ 無編譯錯誤提示  | Controller 改了 URL 或參數，Feign 不會出錯，只有 runtime 500 / 404    |
	| ❌ JSON 結構變了   | 回傳格式變更會造成 Feign 無法轉型（`HttpMessageConversionException`） |
	| 🧪 難測試          | 沒有單一點能保證雙方協議一致性                                        |

補上型別一致性與驗證
	FeignClient
		✅ 解法 1：抽共用 interface 與 DTO 到 shared-interface module
			// shared-interface
			public interface OrderApi {
				@GetMapping("/api/orders")
				String getOrders();
			}
			Client A 使用 FeignClient 實作這個介面：
				@FeignClient(name = "clientB", url = "${client-b.api-url}")
				public interface ClientBFeignClient extends OrderApi {}

			Client B 的 Controller 也 implements 相同介面：
				@RestController
				public class OrderController implements OrderApi {
					@Override
					public String getOrders() {
						return "Order List";
					}
				}
			只要介面有異動，前後端都會收到編譯錯誤提醒！

		✅ 解法 2：使用 OpenAPI Generator（推薦給大型專案）
			* 用 Springdoc 產生 OpenAPI 3 規格 (/v3/api-docs)

			* 用 openapi-generator 產生 FeignClient/Typescript/Java SDK

			* 前端 / 其他服務就不需要手刻 FeignClient，而是從規格自動產生
				openapi-generator-cli generate \
				  -i http://localhost:8080/v3/api-docs \
				  -g java \
				  -o ./generated-client \
				  --library spring-cloud
		「契約脫鉤風險」
			| 做法                 | 型別驗證        | 維護成本            | 靈活性         |
			| -------------------- | --------------- | ------------------- | -------------- |
			| 手刻 FeignClient     | ❌ 無型別檢查   | 中                  | 高             |
			| 共用 interface / DTO | ✅ 編譯期可檢查 | 中低                | 中             |
			| OpenAPI Generator    | ✅ 最嚴謹       | 高（要 CI/CD 整合） | 低（較不靈活） |

		🧱 架構概念圖：
			common-interface-dto (Maven module or library)
			├── OrderRequest.java
			├── OrderResponse.java
			└── OrderApi.java          <-- 這是共用 interface，定義 REST 規格

			backend-service
			└── OrderController.java   <-- implements OrderApi

			frontend-service (Java-based frontend 或 Feign 呼叫方)
			└── OrderClient.java       <-- @FeignClient + implements OrderApi


			📁 common-interface-dto 專案
				// OrderRequest.java
				@Data
				public class OrderRequest {
					private String userId;
				}

				// OrderResponse.java
				@Data
				public class OrderResponse {
					private String orderId;
					private String status;
				}

				// OrderApi.java
				@RequestMapping("/api/orders")
				public interface OrderApi {

					@PostMapping
					OrderResponse createOrder(@RequestBody OrderRequest request);

					@GetMapping("/{id}")
					OrderResponse getOrder(@PathVariable String id);
				}

			📁 後端專案實作（Resource Server）
				@RestController
				public class OrderController implements OrderApi {

					@Override
					public OrderResponse createOrder(OrderRequest request) {
						return new OrderResponse("ORD123", "CONFIRMED");
					}

					@Override
					public OrderResponse getOrder(String id) {
						return new OrderResponse(id, "CONFIRMED");
					}
				}

			📁 前端或呼叫端（使用 Feign）
				@FeignClient(name = "order-api", url = "${order.api.url}")
				public interface OrderClient extends OrderApi {}

				@Autowired
				private OrderClient orderClient;

				public void doWork() {
					OrderResponse res = orderClient.getOrder("ORD123");
				}

		| 優點                             | 說明                         |
		| -------------------------------- | ---------------------------- |
		| ✅ 前後端強型別一致              | 接口與 DTO 都來自同一 source |
		| ✅ 編譯期發現破壞性變更          | 改錯參數、刪欄位會立即報錯   |
		| ✅ 減少重工與 swagger copy-paste | 無需手抄路徑與欄位           |
		| ✅ 可做版本控管（multi-version） | 可發布不同版本的介面模組     |


	WebClient
		📁 共用 common-dto 專案（給前後端共用）
			// UserRequest.java
			@Data
			public class UserRequest {
				private String userId;
			}

			// UserResponse.java
			@Data
			public class UserResponse {
				private String name;
				private String email;
			}

		✅ 後端 Controller 使用相同 DTO：
			@RestController
			@RequestMapping("/api/users")
			public class UserController {

				@PostMapping
				public UserResponse getUser(@RequestBody UserRequest request) {
					return new UserResponse("David", "david@example.com");
				}
			}

		✅ 前端服務使用 WebClient 串接
			@Service
			public class UserService {

				private final WebClient webClient;

				public UserService(WebClient webClient) {
					this.webClient = webClient;
				}

				public UserResponse getUserInfo(String userId) {
					UserRequest req = new UserRequest();
					req.setUserId(userId);

					return webClient.post()
							.uri("http://localhost:8081/api/users")
							.bodyValue(req)
							.retrieve()
							.bodyToMono(UserResponse.class)
							.block();
				}
			}

		✅ 型別一致性如何保證？
			| 保證方式                      | 說明                                                               |
			| ----------------------------- | ------------------------------------------------------------------ |
			| 🧩 DTO 統一放在共用 module    | `common-dto` 被前後端一起引用                                      |
			| 📦 使用相同 ObjectMapper 設定 | 避免日期格式、enum 名稱等不一致                                    |
			| 🧪 可自動產生 OpenAPI         | 用來自動測試、比對結構差異                                         |
			| ✅ 可加上 schema 驗證（選配） | 如使用 `@Validated` + Bean Validation，避免錯誤欄位進入 controller |


🔍 WebClient vs Feign 型別一致對照：
	| 特性                      | FeignClient      | WebClient                    |
	| ------------------------- | ---------------- | ---------------------------- |
	| 共用 DTO 可行             | ✅               | ✅                           |
	| 共用介面（interface）     | ✅ 很方便        | ❌ 需手動包裝方法            |
	| 高彈性（如串流、timeout） | ❌ 有限          | ✅ 最完整控制                |
	| 適合自動產生 client       | ✅ 搭配 OpenAPI  | ✅ 更好控制參數格式與 header |

✅ 小結建議：
	| 情境                           | 建議                                 |
	| ------------------------------ | ------------------------------------ |
	| 要快速整合 REST API 且結構簡單 | 用 FeignClient + 共用 interface      |
	| 要進行檔案串流、大量設定控制   | 用 WebClient + 共用 DTO              |
	| 想自動化文件與 client SDK      | 用 OpenAPI + WebClient or Feign 皆可 |
