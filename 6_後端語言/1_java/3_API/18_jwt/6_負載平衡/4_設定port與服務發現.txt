ref ChatGPT

Q:如果我用 spring-cloud-starter-loadbalancer 這樣每個後端要設定 port 要錯開
	之前都是透過 apache 幫我對外對內轉換，本機雖然可以自己設定 port ，但實際環境設定的port 不會是這樣

A:🎯 問題重點你已掌握：
	使用 spring-cloud-starter-loadbalancer 時，每個實例要在不同 port 啟動才能被辨識為不同實例。
	但實際部署時：

		* 不會靠 port 區分（通常都跑在 8080 或容器內固定 port）

		* 是靠 主機位址（host/IP）+ 埠口，或在容器中靠 Kubernetes Service / Eureka metadata 來識別實例

	✅ 對比環境差異
		| 環境         | 識別實例方式                          | 實務處理方式                              |
		| ------------ | ------------------------------------- | ----------------------------------------- |
		| 🖥️ 本機模擬  | 多個 port（8081, 8082, 8083）         | 手動設定 `server.port`                    |
		| ☁️ 生產部署  | 相同 port（8080）但不同主機或容器 IP  | 由 Eureka / K8s 註冊資訊決定實例位址      |
		| 🧩 K8s 中    | 相同 port，Pod 名稱不同               | K8s Service 透過 selector + DNS 輪詢調度  |


	✅ 所以本機模擬與實際差異怎麼解法？
		✅ 解法 1：本機用不同 port 測試即可
			這是最簡單方式，用 YAML profile 控制每個實例啟不同 port。
				server:
				  port: 8081
				spring:
				  application:
					name: backend-service

			另一實例啟 8082，即可模擬多實例負載平衡。

		✅ 解法 2：實際部署靠 Eureka / K8s / Docker 動態實例註冊
			實務上你不需要指定 port，只要啟動時 Eureka 自動註冊 host:port：
				eureka:
				  instance:
					prefer-ip-address: true
					instance-id: ${spring.application.name}:${spring.cloud.client.ip-address}:${server.port}

						* 在 K8s 中，一個 Deployment + 多個 Pod，每個 Pod 用 localhost:8080 + IP 區分

						* Eureka 自動註冊這些實例，讓 LoadBalancer 負責調度

		✅ 解法 3：你仍可結合 Apache，僅用 WebClient 控制 header、failover，但實際實例用 Apache 配轉發
			不過這種方式下就不建議再用 Spring Cloud LoadBalancer 了，因為你已把實例 routing 交給 Apache。

	🧠 總結策略建議：
		| 目的                                                             | 建議做法                                                     |
		| ---------------------------------------------------------------- | ------------------------------------------------------------ |
		| ✅ 本機測試多實例                                                | 用不同 port 模擬                                             |
		| ✅ 上線部署實例                                                  | 每台跑同樣 port，靠主機 IP + Eureka 做實例識別               |
		| ✅ 不想自己配 port 管理                                          | 用容器（Docker/K8s）跑，讓平台幫你分配                       |
		| ❌ 如果實例都被 Apache 包起來、LoadBalancer target 是 Apache URI | 不建議用 Spring Cloud LoadBalancer，因為它已無法控制下游實例 |

	✅ 最後結論一句話：
		Spring Cloud LoadBalancer 在本機用 port 模擬沒問題，
		實際部署時會靠 主機 IP + port 註冊到 Eureka 或 Service Discovery，不需你手動分 port。
		如果你實例都走 Apache Reverse Proxy，就該讓 Apache 做負載平衡，而不是 LoadBalancer 去選 Apache 路由 URI。


# ✅ 本機模擬多埠多實例配置（application-local.yml）

	spring:
	  application:
		name: backend-service
	  profiles:
		active: local

	---
	# profile: instance1
	spring:
	  config:
		activate:
		  on-profile: instance1
	server:
	  port: 8081

	---
	# profile: instance2
	spring:
	  config:
		activate:
		  on-profile: instance2
	server:
	  port: 8082

	---
	# ✅ Spring Cloud LoadBalancer 靜態實例模式（frontend-service）
	spring:
	  cloud:
		loadbalancer:
		  clients:
			backend-service:
			  instances:
				- uri: http://localhost:8081
				- uri: http://localhost:8082

	---

	# ✅ 實際部署用 Eureka 模式配置（application-prod.yml）
	spring:
	  application:
		name: backend-service
	  profiles:
		active: prod
	server:
	  port: 8080

	eureka:
	  client:
		service-url:
		  defaultZone: http://eureka-server:8761/eureka/
	  instance:
		prefer-ip-address: true
		instance-id: ${spring.application.name}:${spring.cloud.client.ip-address}:${server.port}

✅ 我已為你準備好本機與實際部署環境下使用 Spring Cloud LoadBalancer 的 YAML 配置模板，包括：

	本機多實例啟動（用 port 模擬）

	WebClient LoadBalancer 靜態實例註冊

	實際環境 Eureka 註冊實例設定

	你可以用 --spring.profiles.active=instance1 / instance2 同時啟多台來模擬本機負載測試，正式部署時只要改用 prod profile，即可自動註冊至 Eureka。

程式呼叫
	# ✅ WebClient Builder 註冊為 LoadBalanced Bean

	# WebClientConfig.java
	@Configuration
	public class WebClientConfig {

		@Bean
		@LoadBalanced
		public WebClient.Builder loadBalancedWebClientBuilder() {
			return WebClient.builder();
		}

	}

	---

	# ✅ 使用範例：透過 serviceId 呼叫 backend-service

	@Service
	public class BackendClient {

		private final WebClient webClient;

		public BackendClient(WebClient.Builder builder) {
			this.webClient = builder.build();
		}

		public String callBackend() {
			return webClient.get()
					.uri("http://backend-service/api/hello")
					.retrieve()
					.bodyToMono(String.class)
					.block();
		}
	}