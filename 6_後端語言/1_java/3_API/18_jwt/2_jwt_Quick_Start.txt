ref https://medium.com/@heather_programming/spring-security-jwt-%E9%A9%97%E8%AD%89-d51dc4eb5fe5
	https://medium.com/%E4%BC%81%E9%B5%9D%E4%B9%9F%E6%87%82%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88/jwt-json-web-token-%E5%8E%9F%E7%90%86%E4%BB%8B%E7%B4%B9-74abfafad7ba

JSON Web Token（JWT）
	在網路應用程式之間安全傳輸訊息的格式，通常用於身份驗證和授權機制


Session 驗證
	流程：用戶驗證通過後，Spring Security 會在用戶的 Session 中存入用戶資訊，並生成 Session ID 返回給客戶端。
		客戶端 (瀏覽器) 通常會將之存在 cookies 中。每次用戶發起 request 時，都會帶著 Session ID，Spring Security 會驗證請求中的 Session ID，
		並檢查用戶的驗證狀態和權限。(所以我們在上一篇要登出時，可以用清空 cookies 的方式)

	優點：因為是傳統網路應用常見的驗證方法，所以通常是預設設定，
		會由框架自動處理 Session 管理，方便開發和使用 (像帳號密碼驗證就是預設存在 Session 中)。


JWT 驗證
	流程：用戶在驗證成功後，服務器會生成一個 JWT 返回客戶端。客戶端將 JWT 保存，並在每次 request 時將它放在 Header 或其他方式傳遞。
		Spring Security 會解析 JWT 的簽名和有效時間，確定 JWT 的合法性和用戶身份。

	優點：不需要保存狀態，每個請求都是獨立的，
		可以跨域和跨平台進行身份驗證，適用於分散式系統。

總結
	綜上所述，因為 JWT 可適用於多平台的驗證，已逐漸成為現今主流的驗證方式，
		所以熟悉如何利用 Spring Security 進行 JWT 驗證就十分必要了。

	而在實務中，由於現在前後端分離的開發模式盛行，通常會由後端進行驗證、生成 JWT，並回拋給前端。
		當發起 request 時，會由前端將 JWT 置於 Header 中，讓後端解析並確認用戶的驗證身份。


Quick start
	spring security 依賴
		<dependency>
			  <groupId>org.springframework.boot</groupId>
			  <artifactId>spring-boot-starter-security</artifactId>
		</dependency>

	jwt 依賴
		<dependency>
		  <groupId>io.jsonwebtoken</groupId>
		  <artifactId>jjwt-api</artifactId>
		  <version>0.11.5</version>
		</dependency>
		<dependency>
		  <groupId>io.jsonwebtoken</groupId>
		  <artifactId>jjwt-impl</artifactId>
		  <version>0.11.5</version>
		  <scope>runtime</scope>
		</dependency>
		<dependency>
		  <groupId>io.jsonwebtoken</groupId>
		  <artifactId>jjwt-jackson</artifactId>
		  <version>0.11.5</version>
		  <scope>runtime</scope>
		</dependency>

	JwtUtil
		為了使用 JWT，我們需要先建立 JwtUtil 來定義產生與解析 JWT 的方法：

		generateToken
			@Component
			public class JwtUtil {

				private static final String ISS = "Hogwarts";
				private static final String SECRET = "AlohomoraIsASpellUsedToOpenDoors";
				private static final int EXPIRE_TIME = 5;

				public static String generateToken(Authentication authentication) {
					MyUser myUser = (MyUser) authentication.getPrincipal();
					Calendar exp = Calendar.getInstance();
					exp.add(Calendar.MINUTE, EXPIRE_TIME);

					Claims claims = Jwts.claims();
					claims.setSubject(myUser.getUsername());
					claims.setExpiration(exp.getTime());
					claims.setIssuer(ISS);
					Key secretKey = Keys.hmacShaKeyFor(SECRET.getBytes());

					return Jwts.builder()
							.setClaims(claims)
							.signWith(secretKey)
							.compact(); // 將 JwtBuilder 構建的 JWT 物件，壓縮為一個字串的形式
				}

			   // ...... 下略
			}

	產製 JWT 的時機是用戶通過驗證後，使用他的個人資料產生 Token。所以在這個方法中，我們傳入一個已驗證的 Authentication
		1.從 Authentication 取出 Principal，通常是 UserDetails 的實作類，
		2.然後將 Subject、Expiration、Issuer 組成 Claims，
		3.最後用加密後的 Key 作為簽名，產生出 JWT。

		parseToken
			@Component
			public class JwtUtil {

				private static final String ISS = "Hogwarts";
				private static final String SECRET = "AlohomoraIsASpellUsedToOpenDoors";
				private static final int EXPIRE_TIME = 5;

				// ...... 上略

				public static String parseToken(String token){
					Key secretKey = Keys.hmacShaKeyFor(SECRET.getBytes());

					JwtParser parser = Jwts.parserBuilder()
							.setSigningKey(secretKey).build();

					Claims claims = parser.parseClaimsJws(token).getBody();
					String username = claims.getSubject();

					return username;
				}
			}

	解析 JWT 方法則在用戶取得 Token 後，要造訪其他 API 時使用，一般會在 Filter 中呼叫。一旦已通過驗證的用戶，
		其發出的 Request Header 裡帶著 Token 造訪，通過 Filter 時會呼叫此方法解析其中的 Token。

	解析的方式是與設定好的簽名做比對，若符合便是正確的 Token，之後便可以通過 JwtParser 獲取用戶名。

	另外，若解析出來的 Expiration 已過期，則會拋錯 ExpiredJwtException


	建立驗證方法
		@Service
		public class JwtAuthService {

			@Autowired
			private AuthenticationManager authenticationManager;

			@Autowired
			MyUserDetailsService myUserDetailsService;

			public String auth(Map<String, Object> reqDTO){
				String username = (String) reqDTO.get("username");
				String password = (String) reqDTO.get("password");
				Authentication authentication =
						new UsernamePasswordAuthenticationToken(username, password);
				authentication = authenticationManager.authenticate(authentication);
				String token = JwtUtil.generateToken(authentication);

				return token;
			}
		}

	// 在 OAuth 2.0 的授權規範中，JWT 在 Request 的傳送格式是：放在 Header 的 “Authorization” 欄位裡，並且以 Bearer 開頭。
	設置 JwtAuthenticationFilter
		@Component
		public class JwtAuthenticationFilter extends OncePerRequestFilter {

			@Autowired
			private MyUserDetailsService myUserDetailsService;

			private static final String HEADER_AUTH = "Authorization";

			@Override
			protected void doFilterInternal(HttpServletRequest request,
				HttpServletResponse response, FilterChain filterChain)
				throws ServletException, IOException {

				String authHeader = request.getHeader(HEADER_AUTH);
				if (ObjectUtils.isNotEmpty(authHeader)){
					String accessToken = authHeader.replace("Bearer ", "");
					String username = JwtUtil.parseToken(accessToken);

					MyUser myUser = myUserDetailsService.loadUserByUsername(username);
					Authentication authentication =
							 new UsernamePasswordAuthenticationToken(
							 username, myUser.getPassword(), myUser.getAuthorities());
					SecurityContextHolder.getContext()
										 .setAuthentication(authentication);
				}

				filterChain.doFilter(request, response);
			}
		}


	Configuration
		@Configuration
		@EnableWebSecurity
		public class SecurityConfig {

			@Autowired
			private MyUserDetailsService myUserDetailsService;

			@Autowired
			private JwtAuthenticationFilter jwtAuthenticationFilter;


			@Bean
			public SecurityFilterChain securityFilterChain(HttpSecurity http)
				throws Exception {
				return http
					.authorizeRequests()
					.antMatchers(HttpMethod.GET, "/getEmail/*").authenticated()
					.antMatchers(HttpMethod.GET, "/admin/**").hasAuthority("ADMIN")
					.antMatchers(HttpMethod.GET, "/user/**").hasAuthority("USER")
					.antMatchers(HttpMethod.GET, "/guest").permitAll()
					.antMatchers(HttpMethod.POST, "/auth").permitAll() // 驗證方法
					.anyRequest().authenticated()
					.and()
					.addFilterBefore(jwtAuthenticationFilter,
								UsernamePasswordAuthenticationFilter.class)
					.sessionManagement()
					.sessionCreationPolicy(SessionCreationPolicy.STATELESS)
					.and()
					.authenticationManager(authenticationManager())
					.csrf().disable()
					.build();
			}

			@Bean
			public AuthenticationManager authenticationManager() {
				// ...... 同「帳號密碼驗證」篇的設定
			}

			@Bean
			public DaoAuthenticationProvider daoAuthenticationProvider() {
				// ...... 同「帳號密碼驗證」篇的設定
			}

		}