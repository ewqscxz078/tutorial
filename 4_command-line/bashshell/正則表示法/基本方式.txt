https://zh.wikipedia.org/zh-tw/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F

於以下語法會看到其正則表示法相關概念
  java pattern、String.match
  bash shell
	find
	grep
    sed
	awk

歷史
	正規表示式的POSIX規範分
		基本型正規表示式 （Basic Regular Expression，BRE）
			grep、vi、sed 都屬於 BRE
		擴充型正規表示式（Extended Regular Expression，ERE)
			egrep、awk 則屬於ERE，元字元不用轉譯

基本語法
	正規表示式/正則表示法(規律表達式、正規表達式、正規表示法、規則運算式、常規表示法)
		Regular expression，常簡寫為regex、regexp 或 RE
		由常數和算子組成，它們分別表示字串的集合和在這些集合上的運算。

	選擇
		| 代表選擇（即或集）
			例如	gray|grey
			可以符合 grey或gray。

	數量限定
		常見的數量限定符包括+、?和*
		加號 +
			代表前面的字元必須至少出現一次。（1次或多次）。
				例如 : goo+gle
				可以符合google、gooogle、goooogle等；
		問號 ?
			代表前面的字元最多只可以出現一次。（0次或1次）。
				例如 : colou?r
				可以符合color或者colour；
		星號 *
			代表前面的字元可以不出現，也可以出現一次或者多次。（0次、1次或多次）。
				例如 : 0*42
				可以符合 42、042、0042、00042 	等。
	符合
		圓括號()
			用來定義運算子的範圍和優先度
				例如:
					gr(a|e)y 等價於 gray|grey，
					(grand)?father
					符合father和grandfather。

PCRE表達式全集
	有多種不同的風格。下表是在PCRE中元字元及其在正規表示式上下文中的行為的一個完整列表，適用於Perl或者Python程式語言（grep或者egrep的正規表示式文法是PCRE的子集）

	字元			描述
	\				將下一個字元標記為一個特殊字元（File Format Escape，清單見本表）、或一個原義字元（Identity Escape，有^$()*+?.[\{|共計12個）、或一個向後參照（backreferences）、或一個八進位跳脫符。例如，「n」符合字元「n」。「\n」符合一個換行符。序列「\\」符合「\」而「\(」則符合「(」。
	^				符合輸入字串的開始位置。如果設定了RegExp物件的Multiline屬性，^也符合「\n」或「\r」之後的位置。
	$				符合輸入字串的結束位置。如果設定了RegExp物件的Multiline屬性，$也符合「\n」或「\r」之前的位置。
	*				符合前面的子表達式零次或多次。例如，zo*能符合「z」、「zo」以及「zoo」。*等價於{0,}。
	+				符合前面的子表達式一次或多次。例如，「zo+」能符合「zo」以及「zoo」，但不能符合「z」。+等價於{1,}。
	?				符合前面的子表達式零次或一次。例如，「do(es)?」可以符合「does」中的「do」和「does」。?等價於{0,1}。
	{n}				n是一個非負整數。符合確定的n次。例如，「o{2}」不能符合「Bob」中的「o」，但是能符合「food」中的兩個o。
	{n,}			n是一個非負整數。至少符合n次。例如，「o{2,}」不能符合「Bob」中的「o」，但能符合「foooood」中的所有o。「o{1,}」等價於「o+」。「o{0,}」則等價於「o*」。
	{n,m}			m和n均為非負整數，其中n<=m。最少符合n次且最多符合m次。例如，「o{1,3}」將符合「fooooood」中的前三個o。「o{0,1}」等價於「o?」。請注意在逗號和兩個數之間不能有空格。
	?				非貪心量化（Non-greedy quantifiers）：當該字元緊跟在任何一個其他重複修飾詞（*,+,?，{n}，{n,}，{n,m}）後面時，符合模式是非貪婪的。非貪婪模式儘可能少的符合所搜尋的字串，而預設的貪婪模式則儘可能多的符合所搜尋的字串。例如，對於字串「oooo」，「o+?」將符合單個「o」，而「o+」將符合所有「o」。
	.				符合除「\r」「\n」之外的任何單個字元。要符合包括「\r」「\n」在內的任何字元，請使用像「(.|\r|\n)」的模式。
	(pattern)		符合pattern並取得這一符合的子字串。該子字串用於向後參照。所取得的符合可以從產生的Matches集合得到，在VBScript中使用SubMatches集合，在JScript中則使用$0…$9屬性。要符合圓括號字元，請使用「\(」或「\)」。可帶數量字尾。
	(?:pattern)		符合pattern但不取得符合的子字串（shy groups），也就是說這是一個非取得符合，不儲存符合的子字串用於向後參照。這在使用或字元「(|)」來組合一個模式的各個部分是很有用。例如「industr(?:y|ies)」就是一個比「industry|industries」更簡略的表達式。
	(?=pattern)		正向肯定預查（look ahead positive assert），在任何符合pattern的字串開始處符合尋找字串。這是一個非取得符合，也就是說，該符合不需要取得供以後使用。例如，「Windows(?=95|98|NT|2000)」能符合「Windows2000」中的「Windows」，但不能符合「Windows3.1」中的「Windows」。預查不消耗字元，也就是說，在一個符合發生後，在最後一次符合之後立即開始下一次符合的搜尋，而不是從包含預查的字元之後開始。
	(?!pattern)		正向否定預查（negative assert），在任何不符合pattern的字串開始處符合尋找字串。這是一個非取得符合，也就是說，該符合不需要取得供以後使用。例如「Windows(?!95|98|NT|2000)」能符合「Windows3.1」中的「Windows」，但不能符合「Windows2000」中的「Windows」。預查不消耗字元，也就是說，在一個符合發生後，在最後一次符合之後立即開始下一次符合的搜尋，而不是從包含預查的字元之後開始
	(?<=pattern)	反向（look behind）肯定預查，與正向肯定預查類似，只是方向相反。例如，「(?<=95|98|NT|2000)Windows」能符合「2000Windows」中的「Windows」，但不能符合「3.1Windows」中的「Windows」。
	(?<!pattern)	反向否定預查，與正向否定預查類似，只是方向相反。例如「(?<!95|98|NT|2000)Windows」能符合「3.1Windows」中的「Windows」，但不能符合「2000Windows」中的「Windows」。
	x|y				沒有包圍在()里，其範圍是整個正規表示式。例如，「z|food」能符合「z」或「food」。「(?:z|f)ood」則符合「zood」或「food」。
	[xyz]			字元集合（character class）。符合所包含的任意一個字元。例如，「[abc]」可以符合「plain」中的「a」。特殊字元僅有反斜線\保持特殊含義，用於跳脫字元。其它特殊字元如星號、加號、各種括號等均作為普通字元。脫字元^如果出現在首位則表示負值字元集合；如果出現在字串中間就僅作為普通字元。連字元 - 如果出現在字串中間表示字元範圍描述；如果如果出現在首位（或末尾）則僅作為普通字元。右方括號應跳脫出現，也可以作為首位字元出現。
	[^xyz]			排除型字元集合（negated character classes）。符合未列出的任意字元。例如，「[^abc]」可以符合「plain」中的「plin」。
	[a-z]			字元範圍。符合指定範圍內的任意字元。例如，「[a-z]」可以符合「a」到「z」範圍內的任意小寫字母字元。
	[^a-z]			排除型的字元範圍。符合任何不在指定範圍內的任意字元。例如，「[^a-z]」可以符合任何不在「a」到「z」範圍內的任意字元。
	[:name:]		增加命名字元類（named character class）[註 1]中的字元到表達式。只能用於方括號表達式。
	[=elt=]			增加當前locale下排序（collate）等價於字元「elt」的元素。例如，[=a=]可能會增加ä、á、à、ă、ắ、ằ、ẵ、ẳ、â、ấ、ầ、ẫ、ẩ、ǎ、å、ǻ、ä、ǟ、ã、ȧ、ǡ、ą、ā、ả、ȁ、ȃ、ạ、ặ、ậ、ḁ、ⱥ、ᶏ、ɐ、ɑ 。只能用於方括號表達式。
	[.elt.]			增加排序元素（collation element）elt到表達式中。這是因為某些排序元素由多個字元組成。例如，29個字母表的西班牙語， "CH"作為單個字母排在字母C之後，因此會產生如此排序「cinco, credo, chispa」。只能用於方括號表達式。
	\b				符合一個單詞邊界，也就是指單詞和空格間的位置。例如，「er\b」可以符合「never」中的「er」，但不能符合「verb」中的「er」。
	\B				符合非單詞邊界。「er\B」能符合「verb」中的「er」，但不能符合「never」中的「er」。
	\cx				符合由x指明的控制字元。x的值必須為A-Z或a-z之一。否則，將c視為一個原義的「c」字元。控制字元的值等於x的值最低5位元（即對3210進位的餘數）。例如，\cM符合一個Control-M或回車字元。\ca等效於\u0001, \cb等效於\u0002, 等等…
	\d				符合一個數字字元。等價於[0-9]。注意Unicode正規表示式會符合全形數字字元。
	\D				符合一個非數字字元。等價於[^0-9]。
	\f				符合一個換頁符。等價於\x0c和\cL。
	\n				符合一個換行符。等價於\x0a和\cJ。
	\r				符合一個回車字元。等價於\x0d和\cM。
	\s				符合任何空白字元，包括空格、制表符、換頁符等等。等價於[ \f\n\r\t\v]。注意Unicode正規表示式會符合全形空格符。
	\S				符合任何非空白字元。等價於[^ \f\n\r\t\v]。
	\t				符合一個制表符。等價於\x09和\cI。
	\v				符合一個垂直制表符。等價於\x0b和\cK。
	\w				符合包括底線的任何單詞字元。等價於「[A-Za-z0-9_]」。注意Unicode正規表示式會符合中文字元。
	\W				符合任何非單詞字元。等價於「[^A-Za-z0-9_]」。
	\xnn			十六進位跳脫字元序列。符合兩個十六進位數字nn表示的字元。例如，「\x41」符合「A」。「\x041」則等價於「\x04&1」。正規表達式中可以使用ASCII編碼。.
	\num			向後參照（back-reference）一個子字串（substring），該子字串與正規表示式的第num個用括號圍起來的捕捉群（capture group）子表達式（subexpression）符合。其中num是從1開始的十進位正整數，其上限可能是9[註 2]、31[註 3]、99甚至無限[註 4]。例如：「(.)\1」符合兩個連續的相同字元。
	\n				標識一個八進位跳脫值或一個向後參照。如果\n之前至少n個取得的子表達式，則n為向後參照。否則，如果n為八進位數字（0-7），則n為一個八進位跳脫值。
	\nm				3位八進位數字，標識一個八進位跳脫值或一個向後參照。如果\nm之前至少有nm個獲得子表達式，則nm為向後參照。如果\nm之前至少有n個取得，則n為一個後跟文字m的向後參照。如果前面的條件都不滿足，若n和m均為八進位數字（0-7），則\nm將符合八進位跳脫值nm。
	\nml			如果n為八進位數字（0-3），且m和l均為八進位數字（0-7），則符合八進位跳脫值nml。
	\un				Unicode跳脫字元序列。其中n是一個用四個十六進位數字表示的Unicode字元。例如，\u00A9符合著作權符號（©）。

POSIX字元組
	POSIX字元組	說明							ASCII環境							Unicode環境
	[:alnum:]	字母字元和數字字元				[a-zA-Z0-9]							[\p{L&}\p{Nd}]
	[:alpha:]	字母							[a-zA-Z]							\p{L&}
	[:ascii:]	ASCII字元						[\x00-\x7F]							\p{InBasicLatin}
	[:blank:]	空格字元和制表符				[ \t]								[\p{Zs}\t]
	[:cntrl:]	控制字元						[\x00-\x1F\x7F]						\p{Cc}
	[:digit:]	數字字元						[0-9]								\p{Nd}
	[:graph:]	空白字元之外的字元				[\x21-\x7E]							[^\p{Z}\p{C}]
	[:lower:]	小寫字母字元					[a-z]								\p{Ll}
	[:print:]	類似[:graph:]，但包括空白字元	[\x20-\x7E]							[^\P{C}]
	[:punct:]	標點符號						[][!"#$%&'()*+,./:;<=>?@\^_`{|}~-]	[\p{P}\p{S}]
	[:space:]	空白字元						[ \t\r\n\v\f]						[\p{Z}\t\r\n\v\f]
	[:upper:]	大寫字母字元					[A-Z]								\p{Lu}
	[:word:]	字母字元						[A-Za-z0-9_]						[\p{L}\p{N}\p{Pc}]
	[:xdigit:]	十六進位字元					[A-Fa-f0-9]							[A-Fa-f0-9]