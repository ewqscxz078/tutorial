https://docs.docker.com/engine/reference/run/#expose-incoming-ports
https://joshhu.gitbooks.io/dockercommands/content/Containers/DockerRunMore.html

=======================================================================
======================= 流程 ==========================================
=======================================================================

remote registres		官方 hub docker 或私建立 之 docker 來源
	|					docker login
	|					docker pull <id>/<REPOSITORY name>:<tag>
	v
local image				官方或 私建立 之 docker 的 image
	|
	v
local Dockerfile		在包裝 一次 ，prepar Dockerfile
	|					docker build [dockerfile] => image
image(local list)		docker image ls -a
	|					docker run [imagefile] => container
	|					docker push <id>/<REPOSITORY name>:<tag> => registres
container(local list)	docker ps -a
	|
run container

=======================================================================
======================= dockerfile ====================================
=======================================================================
一定要命名 Dockerfile

# 從哪裡下載 dockerfile base
	FROM [私有網域]/images:tag
		ex:
			FROM ubuntu #下載最新版
			FROM ubuntu:18.04
			FROM demoyuw/nginx:v0.2

# dockerfile 註解
	LABEL <key>=<value>

# 內部環境變數
	ENV <key>=<value>

# 指定預設HOME目錄
	WORKDIR
		ex:
			WORKDIR /app

# 複製檔案到容器內
	COPY {local path file} {container path}
		ex:
			COPY test.war .
			COPY /home/users/files .

	或複製目錄下所有文件到指定目錄
		COPY source target
			行為：會將 source 目錄下的所有內容（不包括目錄本身）複製到 target 目錄。如果 target 目錄不存在，則會創建它。
			假設 source 目錄包含 file1.txt 和 file2.txt，那麼這個指令會將 source 目錄下的所有文件複製到 target/，即 target/file1.txt 和 target/file2.txt。

	或目錄到容器目錄
		COPY source/ target/
			行為：會將 source 目錄下的所有內容（包括目錄本身）複製到 target/ 目錄下。目標目錄 target 必須已存在或將被創建
			假設 source 目錄包含 file1.txt 和 file2.txt，那麼這個指令會將 source 目錄下的所有文件複製到 target/source/。

# 複製檔案到容器內，順便解壓縮
	ADD {local path file} {container path}
		ex:
			ADD cirros-0.3.4-x86_64-disk.img /

# 設定port container 內對外 port
	EXPOSE <port> [<port>/<protocol>...]
		ex:
			EXPOSE 80/TCP
		docker command
			docker run -p 80:8080/tcp

# 硬碟空間設定，local端建立volume，並接到container內的 volume
		ex:
			VOLUME ["/volume1"]
			VOLUME ["/volume1","/volume2" ....]

# 外部可覆蓋的環境變數(in docker build)
	ARG MAIN_TAG=latest
	docker build --build-arg MAIN_TAG=XXXX .

# 指名該指令下面相關操作的權限
	USER <user>[:<group>]
		ex:
			USER root

https://myapollo.com.tw/zh-tw/docker-cmd-vs-entrypoint/
https://medium.com/@xyz030206/dockerfile-%E4%B8%AD%E7%9A%84-entrypoint-9653c3b2d2f8
CMD v.s. ENTRYPOINT

# 告知docker 進入的可執行的入口要做哪些事情
	ENTRYPOINT

	ENTRYPOINT ["curl"]
	CMD ["http://dummy-url.com/"]
		=> `curl http://dummy-url.com/`

# 告訴 dockerfile 預設使用哪個 default shell 預設 /bin/sh，可透過 docker image history [imageid] 確認
	https://github.com/moby/moby/issues/7281
	SHELL ["/bin/bash", "-c"]

# dockefile HEALTHCHECK 健康检查
	注意 HEALTHCHECK --的參數值無法吃 ENV ARG 參數
	HEALTHCHECK
		--interval=<間隔>：兩次健康檢查的間隔，默認為 30 秒；
		--timeout=<時長>：健康檢查命令運行超時時間，如果超過這個時間，本次健康檢查就被視為失敗，默認 30 秒；
		--retries=<次數>：當連續失敗指定次數後，則將容器狀態視為 unhealthy，默認 3 次。
		--start-period - DURATION (default: 0s) specifies the number of seconds the container needs to start; health check will wait for that time to start.
	HEALTHCHECK --interval=5s --timeout=3s \
	  CMD curl -fs http://localhost/ || exit 1

	  debug 確認方式
		docker inspect <docker name> | less
			Health: { .... } 可看到 log
=======================================================================
======================= docker command ================================
=======================================================================

# 顯示版本
	docker --version

# 詳細安裝
	docker info

=======================================================================
======================= docker commit =================================
=======================================================================
https://docs.docker.com/engine/reference/commandline/commit/
# 將容器執行中的 image 將其異動內容並另存新檔，其容器會將停止下來
# docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]
	docker commit c3f279d17e0a svendowideit/testimage:version3

=======================================================================
======================= docker command image ==========================
=======================================================================

# 列舉出可用 image
	docker images
	docker images|grep [imageFileName]
	docker image ls
	docker image ls -a

# Docker 刪除 Image (rmi)
	docker rmi [image-id] ...
	docker rmi --force [image-id] # if 有多個一樣image-id

# 編譯 image
	docker build -t [變成的imageFileName] .
		ex:
			docker build -t sris-base/wildfly-sris [filePath/Dockerfile]

docker run
	docker run [OPTIONS] IMAGE[:TAG|@DIGEST] [COMMAND] [ARG...]

	-t：attach時Container的螢幕會接到原來的螢幕上。
	-i：attach時鍵盤輸入會被Container接手
		-it 需要跟 container 的 process 互動，也就要進去container 通常會下該指令
	-d 在背景（ Detached ）執行
	–name  container 的名稱
	–-rm exit container 時，會移除 container( incompatible with -d )

	# run in 前景
		docker run -p 4000:80 [imageFileName]

	# run in 背景
		docker run -d -p 4000:80 [imageFileName]
		docker run -itd -p 4000:80 [imageFileName]

	# automatically clean up the container and remove the file system when the container exits
		docker run --rm -d -p 4000:80 [imageFileName]

	# Bind mount a volume(shared filesystems)
		docker run --rm -d -p 4000:80 [imageFileName] -v:[host-src:]container-dest[:<options>]

	# 慣用手法執行完畢後離開自動刪除該容器(一次性)
		docker run --rm -it [imageFileName] /bin/bash

#查詢某 image 裡的內容 當不知道 dockerfile 在哪時
	docker inspect [imageName]

#查詢某 container 從哪個image來的
	docker inspect [containerName] |gerp Image

#查看 images 階層指令
	docker image history [imageName:tag]

#查看 image 每個階層指令與完整指令，與了解是哪層加大最多空間
	docker image history --no-trunc [imageName:tag]

=======================================================================
======================= docker command container=======================
=======================================================================
# Docker 刪除 container (rm)
	docker rm [contain-id]....
		# Force the removal of a running container (uses SIGKILL) if 有多個一樣
		docker rm -f [contain-id]....

# go into running container
	docker exec -it <container name> /bin/bash

# go into running container as root
	docker exec -it -u 0 <container name/id> /bin/bash

# 啟動 docker by container
	docker start [container-id by docker ps -a]

# 停止 docker by container
	docker stop [container-id by docker ps -a]

# 關閉所有 	container
	docker stop $(docker ps -aq)

# 開啟所有 	container
	docker start $(docker ps -aq)

# 刪除 docker by container
	docker rm [name by docker ps -a]



=======================================================================
======================= docker 檔案放入與拿出 =========================
=======================================================================
# 從 docker 裡複製出檔案
	1.找出 CONTAINER_ID
		docker ps|grep docker name
		第一個欄位即為CONTAINER_ID
	2.從容器複製檔案到主機
		docker cp [CONTAINER_ID]:/[filepath/filename] .
		docker cp <container_id>:/path/to/container/file /path/to/host/destination
	3.將檔案從主機複製到容器
		docker cp /path/to/host/file <container_id>:/path/to/container/destination

=======================================================================
============================== 其他常用 ===============================
=======================================================================
#查詢 container 狀態
	#執行中 docker container
		docker ps

	#執行中或停止的docker container
		docker ps -a

	#停止的docker container
		docker ps -f "status=exited"
		// created restarting running removing paused exited dead
			docker container ls -f 'status=exited'
			docker container ls -f 'status=exited' -f 'status=dead' -f 'status=created'

=======================================================================
=========================== docker images tag =========================
=======================================================================
#將 image tag newTag
	docker tag sourceimage[:orgTag] sourceimage[:newTag]

=======================================================================
=========================== docker logs ===============================
=======================================================================
docker logs [container-id] // 從下面位置取出
	該 log 會抓 stdout 和stderr
	/var/lib/docker/containers/[container-id]/[container-id]-json.log

參考 https://sematext.com/blog/docker-logs-location/

docker run --log-opt max-size=每個檔案大小上限
docker run --log-opt max-file=最多幾個log file 數量上限

#查看 log 尾部，有新的 log 產生會顯示新的 lo
	docker logs -f [container-id]

#查看 log 尾部多少行
	docker logs -n {number} [container-id]

=======================================================================
================== docker images container 備份匯出匯入================
=======================================================================
image 匯出匯入
	匯出
		docker save -o [壓縮名稱.tar] [image name:tag]
			ex:
				docker save -o mytomcat.tar mytomcat:sit
	匯入
		docker load -i [壓縮名稱.tar]
			ex:
				docker load -i mytomcat.tar
container 匯出匯入
	匯出
		docker export
	匯入
		docker import

=======================================================================
======================= docker 觀察 ===================================
=======================================================================
#查看vm下 docker cpu memory disk
	docker stats

#僅顯示一次
	docker stats --no-stream

=======================================================================
======================= docker 資源 ===================================
=======================================================================
docker system df

=======================================================================
======================= docker login logout ===========================
=======================================================================
# login Docker registry
	docker login localhost:8080

# login Docker registry with 帳號密碼  -u 用户名 -p 密码
	docker login -u 用户名 -p 密码 [server]
		例如 docker login -u xxx -p yyy localhost:8080

# logout Docker registry
	docker logout localhost:8080

=======================================================================
======================= docker 確認遠端 registry ======================
=======================================================================
當出現 ​|Error response from daemon: manifest for registry:5000/sris-main/file-mq:sit not found: manifest unknown: manifest unknown
代表遠端的 registry 找不到存在 images tag 之類
透過rest api
	查找 docker registry 特定 docker images
	curl -XGET http://[ip/host:port]/v2/[scope]/[images_name]/tags/list
		ex:
			curl -XGET http://registry:5000/v2/sris-main/file-mq/tags/list

	list docker registry
		curl -i http://registry:5000/v2/_catalog

=======================================================================
======================= docker 限制 記憶體 ============================
=======================================================================
docker update -memory 5g --memory-swap -1 <contain id>


=======================================================================
======================= 常見問題 ======================================
=======================================================================
Q1: docker pull [images]
	pull access denied for "aaaaa" repository does not exist or may require 'docker login'
A1:
	https://stackoverflow.com/questions/56949783/pull-access-denied-for-aaaaa-repository-does-not-exist-or-may-require-docker
	create the file if not exist

	/etc/docker/daemon.json
	Add the following

	{ "insecure-registries":["registries:5000"] }
	Then you are good to go

	   docker login registries:5000
	   user:srisadm
	   password: [我的帳號之密碼]

Q1: docker pull [images]
	unexpected EOF
	docker pull registry:5000/${images name}:${tag}
A1:
	https://blog.csdn.net/HarretLee/article/details/107545893
		https://ningyu1.github.io/site/post/83-docker-pull-error/
		https://stackoverflow.com/questions/53677592/docker-pull-unexpected-eof
	把私有倉刪除重新push一遍即可
