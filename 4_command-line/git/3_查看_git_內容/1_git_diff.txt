比較修改前後的檔案內容
==========================================================================================
==================================== git diff ============================================
==========================================================================================
https://www.shellhacks.com/git-diff-staged-unstaged-files/

# 顯示所有異動檔案路徑
	git diff --name-only

# 顯示所有異動 (等於 git status)
	git diff --name-only HEAD

# 顯示工作目錄的所有檔案狀態(新增、修改、刪除)
	git diff --name-status

# 針對特定的異動
	僅顯示 unstaged files of red (工作目錄的異動)
		git diff

	僅顯示 staged files of green (暫存區的異動)
		git diff --cached
		git diff --staged



==========================================================================================
==========================================差異操作========================================
==========================================================================================
git diff => 工作目錄 vs 索引
git diff HEAD => 工作目錄 vs HEAD
git diff --cached HEAD => 索引 vs HEAD
git diff --cached => 索引 vs HEAD
git diff HEAD^ HEAD => HEAD^ vs HEAD

比對 branch diff
	git diff <branchA>:<fileA> <branchB>:<fileB>,
	or if you want to compare the same file git diff <branchA> <branchB> -- <file>
		ex:  git diff issue/333 issue/342 -- ./RC/config/batchjob.xml
	git diff <commid較舊> <commid新>

與Head版本比對
	git diff HEAD

ex:
	git diff master origin/master

git diff [branchName] --exit-code
	#有差異回1
	#無差異回0

git diff --name-status origin/master origin/issue/[redmineId]

==========================================================================================
========================================= 計算修改統計 ===================================
==========================================================================================
要知道某個 commit 修改了多少行程式碼
	git diff --shortstat [commit hash]

兩個 commit 區段之間 修改了多少行程式碼
	git diff [commit 哈希值]^ [commit 哈希值]
	可透過 git log --grep="keyword 搜尋 commit message" 知道 commit id