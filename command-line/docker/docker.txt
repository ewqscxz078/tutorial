https://docs.docker.com/engine/reference/run/#expose-incoming-ports

=======================================================================
======================= 流程 ==========================================
=======================================================================

registres				官方 hub docker 或私建立 之 docker 來源
	|					docker login
	|					docker pull <id>/<REPOSITORY name>:<tag>
Dockerfile				prepar Dockerfile
	|					docker build [dockerfile] => image
image(local list)		docker image ls -a
	|					docker run [imagefile] => container
	|					docker push <id>/<REPOSITORY name>:<tag> => registres
container(local list)	docker ps -a
	|
run container

=======================================================================
======================= docker file ===================================
=======================================================================
一定要命名 Dockerfile

# 從哪裡下載 dockerfile base
	FROM [私有網域]/images:tag
		ex:
			FROM ubuntu #下載最新版
			FROM ubuntu:18.04
			FROM demoyuw/nginx:v0.2

# dockerfile 註解
	LABEL <key>=<value>

# 內部環境變數
	ENV <key>=<value>

# 指定預設HOME目錄
	WORKDIR
		ex:
			WORKDIR /app

# 複製檔案到容器內
	COPY {local path file} {container path}
		ex:
			COPY test.war .
			COPY /home/users/files .

# 複製檔案到容器內，順便解壓縮
	ADD {local path file} {container path}
		ex:
			ADD cirros-0.3.4-x86_64-disk.img /

# 設定port container 內對外 port
	EXPOSE <port> [<port>/<protocol>...]
		ex:
			EXPOSE 80/TCP
		docker command
			docker run -p 80:8080/tcp

# 硬碟空間設定，local端建立volume，並接到container內的 volume
		ex:
			VOLUME ["/volume1"]
			VOLUME ["/volume1","/volume2" ....]

# 外部可覆蓋的環境變數(in docker build)
	ARG MAIN_TAG=latest
	docker build --build-arg MAIN_TAG=XXXX .

# 指名該指令下面相關操作的權限
	USER <user>[:<group>]
		ex:
			USER root

CMD

# 告知docker 進入的可執行的入口要做哪些事情
	ENTRYPOINT

=======================================================================
======================= docker command ================================
=======================================================================

# 顯示版本
	docker --version

# 詳細安裝
	docker info

=======================================================================
======================= docker command image===========================
=======================================================================

# 列舉出可用 image
	docker images
	docker images|grep [imageFileName]
	docker image ls
	docker image ls -a

# Docker 刪除 Image (rmi)
	docker rmi [image-id] ...
	docker rmi --force [image-id] # if 有多個一樣image-id

# 編譯 image
	docker build -t [imageFileName] .
		ex:
			docker build -t sris-base/wildfly-sris [filePath/Dockerfile]

docker run
	# run in 前景
		docker run -p 4000:80 [imageFileName]

	# run in 背景
		docker run -d -p 4000:80 [imageFileName]
		docker run -itd -p 4000:80 [imageFileName]

	# automatically clean up the container and remove the file system when the container exits
		docker run --rm -d -p 4000:80 [imageFileName]

	# Bind mount a volume(shared filesystems)
		docker run --rm -d -p 4000:80 [imageFileName] -v:[host-src:]container-dest[:<options>]

#查詢某 image 裡的內容 當不知道 dockerfile 在哪時
	docker inspect [imageName]

=======================================================================
======================= docker command container=======================
=======================================================================
# Docker 刪除 container (rm)
	docker rm [contain-id]....
		# Force the removal of a running container (uses SIGKILL) if 有多個一樣
		docker rm -f [contain-id]....

# go into running container
	docker exec -it <container name> /bin/bash

# go into running container as root
	docker exec -it -u 0 <container name/id> /bin/bash

# 啟動 docker by container
	docker start [container-id by docker ps -a]

# 停止 docker by container
	docker stop [container-id by docker ps -a]

# 刪除 docker by container
	docker rm [name by docker ps -a]

# 從 docker 裡複製出檔案
	1.找出 CONTAINER_ID
		docker ps|grep docker name
		第一個欄位即為CONTAINER_ID
	2.
		docker cp [CONTAINER_ID]:/[filepath/filename] .
=======================================================================
============================== 其他常用 ===============================
=======================================================================
#查詢 container 狀態
	#執行中 docker container
		docker ps

	#執行中或停止的docker container
		docker ps -a

	#停止的docker container
		docker ps -f "status=exited"
		// created restarting running removing paused exited dead
			docker container ls -f 'status=exited'
			docker container ls -f 'status=exited' -f 'status=dead' -f 'status=created'

=======================================================================
=========================== docker images tag =========================
=======================================================================
docker tag [sourceimage] [targetimage:tag]

=======================================================================
=========================== docker logs ===============================
=======================================================================
docker logs [container-id] // 從下面位置取出
	該 log 會抓 stdout 和stderr
	/var/lib/docker/containers/[container-id]/[container-id]-json.log

參考 https://sematext.com/blog/docker-logs-location/

docker run --log-opt max-size=每個檔案大小上限
docker run --log-opt max-file=最多幾個log file 數量上限

=======================================================================
================== docker images container 備份匯出匯入================
=======================================================================
image 匯出匯入
	匯出
		docker save -o [壓縮名稱.tar] [image name:tag]
			ex:
				docker save -o mytomcat.tar mytomcat:sit
	匯入
		docker load -i [壓縮名稱.tar]
			ex:
				docker load -i mytomcat.tar
container 匯出匯入
	匯出
		docker export
	匯入
		docker import

=======================================================================
======================= docker 觀察 ===================================
=======================================================================
#查看vm下 docker cpu memory disk
	docker stats

#僅顯示一次
	docker stats --no-stream

=======================================================================
======================= docker 資源 ===================================
=======================================================================
docker system df

=======================================================================
======================= docker 確認遠端 registry ======================
=======================================================================
當出現 ​|Error response from daemon: manifest for registry:5000/sris-main/file-mq:sit not found: manifest unknown: manifest unknown
代表遠端的 registry 找不到存在 images tag 之類
透過rest api
	查找 docker registry 特定 docker images
	curl -XGET http://[ip/host:port]/v2/[scope]/[images_name]/tags/list
		ex:
			curl -XGET http://registry:5000/v2/sris-main/file-mq/tags/list

	list docker registry
		curl -i http://registry:5000/v2/_catalog


=======================================================================
======================= docker 限制 記憶體 ============================
=======================================================================
docker update -memory 5g --memory-swap -1 <contain id>
