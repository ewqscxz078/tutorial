eclipse

[ 　\t]+$  // 找到行尾有tab或空白一個或多個

==========================================================================================
====================================debug git ============================================
==========================================================================================
https://stackoverflow.com/questions/6178401/how-can-i-debug-git-git-shell-related-problems
https://git-scm.com/book/en/v2/Git-Internals-Environment-Variables#Debugging
set -x; GIT_TRACE=2 GIT_CURL_VERBOSE=2 GIT_TRACE_PERFORMANCE=2 GIT_TRACE_PACK_ACCESS=2 GIT_TRACE_PACKET=2 GIT_TRACE_PACKFILE=2 GIT_TRACE_SETUP=2 GIT_TRACE_SHALLOW=2 git pull origin master -v -v; set +x

	Git has a fairly complete set of traces embedded which you can use to debug your git problems.
	To turn them on, you can define the following variables:

	GIT_TRACE for general traces,
	GIT_TRACE_PACK_ACCESS for tracing of packfile access,
	GIT_TRACE_PACKET for packet-level tracing for network operations,
	GIT_TRACE_PERFORMANCE for logging the performance data,
	GIT_TRACE_SETUP for information about discovering the repository and environment it’s interacting with,
	GIT_MERGE_VERBOSITY for debugging recursive merge strategy (values: 0-5),
	GIT_CURL_VERBOSE for logging all curl messages (equivalent to curl -v),
	GIT_TRACE_SHALLOW for debugging fetching/cloning of shallow repositories.
	Possible values can include:

	true, 1 or 2 to write to stderr,
	an absolute path starting with / to trace output to the specified file

一般使用方式
	GIT_CURL_VERBOSE=1 GIT_TRACE=1 git [操作]

==========================================================================================
====================================基本操作==============================================
==========================================================================================

window 更新git version
	git update-git-for-windows

初始 git
	git init

status -- 狀態確認
	git status

list add file when status too many
	git diff --name-only --cached

add -- 加入暫存區
	指定單一支程式加入
		git add xxxx [xxxx代表程式]

	指定 sh 有執行權限
		git update-index --add --chmod=+x <shell name>.sh

	指定副檔名為java的都加入
		git add *.java

	全部檔案加入
		git add .
		git add --all

commit	-- 紀錄到本機
	git commit -m yyyy  [yyyy代表註解]
	git commit --no-verify -m yyyy  [yyyy代表註解] [--no-verify代表不經過hook檢查]

push	-- 紀錄到server
	git push


 git push origin HEAD:sris // commit 到遠端分支

only local branch
	git branch
local and remote branch
	git branch -a
local update origin branch 資訊
	git remote update origin --prune
==========================================================================================
====================================其他操作==============================================
==========================================================================================

查看 所有branch
	git branch -a  // 顯示白色是本地端 紅色是遠端server；互相對應
	git branch -av // 列出每個分支最後的提交commitId

查看 目前所屬的branch
	git branch | grep \* | cut -d ' ' -f2

查看本機或遠端檔案清單
	git ls-tree -r --name-only [branch]

查看那些 branch 含該 commid
	git branch --contain <commid>

查看當前 branch 名稱
	https://stackoverflow.com/questions/6245570/how-to-get-the-current-branch-name-in-git
	git rev-parse --abbrev-ref HEAD

==========================================================================================
==================================== git diff ============================================
==========================================================================================
https://www.shellhacks.com/git-diff-staged-unstaged-files/
# 顯示所有異動 (等於 git status)
	git diff --name-only HEAD

# 僅顯示 staged files of green
	git diff --name-only --staged
	git diff --name-only --cached

# 僅顯示 unstaged files of red
	git diff --name-only

==========================================================================================
==================================== git log =============================================
==========================================================================================

查看 push 的所有狀況
	git log
	git log origin/sris // 查看遠端 log

以較好看的方式，查看差異
	git log -U1 --word-diff

查看圖像化 push log
	// teamctl reset-to-log
	git lg	// 有怪怪的
	git lga

查看歷史log 檔案差異
	git log -p
	限制僅輸出最近幾次更新
	git log -2

僅查看 merge的 log
	git log --merges

查看 auth commit 的 log
	git log --author='[author name]'

搜尋 commit message log，則會將 match 到的就會
	https://stackoverflow.com/questions/7124914/how-to-search-a-git-repository-by-commit-message
	git log --grep='輸入關鍵字'
		ex: git log --grep='1923:'

簡化顯示清單 with sha256Id、commit message
	git log --oneline

查看兩個commit或tags之間
	https://stackoverflow.com/questions/5863426/get-commit-list-between-tags-in-git/5863452#
	可能比較好看的格式
		--pretty=format:"%h%x09%an%x09%ad%x09%s"	// 含 commit id 作者 修改時間 branchid commit_message
		--pretty=format:"%s" //only commit message

	only file
		git log --name-only --no-merges --pretty=format:"%h%x09%an%x09%ad%x09%s" release/2021-03-26-R...release/2020-12-11-A
		git log --name-only --no-merges --pretty=format: release/2021-03-26-R...release/2020-12-11-A

	含修改檔案的模式
		git log --name-status --no-merges --pretty=format: release/2021-03-26-R...release/2020-12-11-A
		git log --name-status --no-merges --pretty=format:"%h%x09%an%x09%ad%x09%s" release/2021-03-26-R...release/2020-12-11-A

	統計差異
		git log --stat --no-merges --pretty=format: release/2021-03-26-R...release/2020-12-11-A

==========================================================================================
==========================================差異操作========================================
==========================================================================================
git diff => 工作目錄 vs 索引
git diff HEAD => 工作目錄 vs HEAD
git diff --cached HEAD => 索引 vs HEAD
git diff --cached => 索引 vs HEAD
git diff HEAD^ HEAD => HEAD^ vs HEAD

比對 branch diff
	git diff <branchA>:<fileA> <branchB>:<fileB>,
	or if you want to compare the same file git diff <branchA> <branchB> -- <file>
		ex:  git diff issue/333 issue/342 -- ./RC/config/batchjob.xml
	git diff <commid較舊> <commid新>

與Head版本比對
	git diff HEAD

ex:
	git diff master origin/master

git diff [branchName] --exit-code
	#有差異回1
	#無差異回0

git diff --name-status origin/master origin/issue/[redmineId]

==========================================================================================
==========================================branch操作======================================
==========================================================================================
切換branch
	git checkout [遠端/branchName]

	git checkout [遠端/branchName] --track // 當名稱跑掉時

建立local分支
	git branch 	[branchName]

建立local分支 base on 特定branch
	git checkout [特定branch]
	git checkout -b DEVELOP/greenc108

建立 branch by tag
	git checkout -b <branchname> <tagname>

刪除遠端分支
	git push origin --delete [branchName]

刪除local分支
	git branch -D [branchName]

==========================================================================================
========================================== tag操作 =======================================
==========================================================================================
所有標籤
	git tag

列出全部的tag清單 to get tag_name
	git tag -l [option_tag_filter]

於當前 local branch tag
	git tag [tag_name]

於當前 local branch tag 註解的標籤
	git tag -a <tag_name> -m "your message"

顯示標籤所在的提交資訊
	git show <tag_name>

到某個commit 補標籤
	git tag -a <tag_name> <commit_id>

分享 local 指定標籤到遠端
	git push origin <tag_name>

分享 local 所有標籤不存在遠端的到遠端
	git push origin --tags

==========================================================================================
========================================= 還原操作 =======================================
==========================================================================================
https://stackoverflow.com/questions/1628088/reset-local-repository-branch-to-be-just-like-remote-repository-head
還原到遠端結果，會將已commit的未push移除，local尚未add的會留存
	git fetch origin
	git reset --hard origin/{targetBranch}
	並且清除本機尚未add
		git clean -fd

tracked file
	modify file 尚未 add 或 已 add 情形
		git checkout -- <file> // 還原該 branch 的FILE
		git checkout . // 還原該 branch 的所有FILE

untracked file
	尚未add 情形
		git clean -f // 將所有untracked file 的 file 移除
		git clean -f [file] // 指定 untracked file 的 file 移除

		git clean -f -d // 將所有untracked file 的 目錄和檔案 移除


已 commit file
	如何將某個 指定的檔案 還原到 指定的 Commit 的狀態
		git log
		git checkout <commitId> <file>

	綠色字變紅字
		git reset <commitId>

	remove history log 模式
		git reset <commId/tag:HEAD、master> --hard // 還原到 <commId/tag:HEAD、master> 並將目前節點到還原點 期間異動的程式移除清乾淨

	add history log to remove 模式
		git revert <commId/tag:HEAD、master>  // 增加節點回到環原點

	移除其中一個commit
		git revert --strategy resolve <sha-ish>
			Given a git log of A--B--C--D--E you can remove commit C using:

		git revert --strategy resolve <sha-of-C>
			Which will produce:
			A--B--C--D--E--REVERTC

==========================================================================================
==========================================暫存操作========================================
==========================================================================================

git status
aOn branch issue/203
Your branch is up to date with 'origin/issue/203'.

Changes not staged for commit:
  (use 'git add <file>...' to update what will be committed)
  (use 'git checkout -- <file>...' to discard changes in working directory)
		modified:   REPORTS/SERVER/sris3-report-server-exec/src/test/java/tw/gov/moi/ae/reporting/server/cli/ReportingServerCLITest.java

		顯示以上之類
放到暫存
	git stash

自訂名稱放到暫存
	git stash save 'my_stash'

列舉暫存
	git stash list

將最新暫存apply到當前branch
	git stash apply

指定 stash apply 到當前branch
	git stash apply stash@{2}

包含 untracked file 都加入 stash
	git stash save '自訂 stash name' --include-untracked

// https://stackoverflow.com/questions/5506339/how-can-i-git-stash-a-specific-file
指定檔案 存到 stash，如果檔案有 untracked，要先git add 後再執行如下指令
	git stash push -m 'assign file 1 3' test1 test3


簽出指定 stash，並移除指定 stash
	git stash pop stash@{?}

移除指定stash
	git stash drop	stash@{?}

	// To show files changed in the last stash only file
git stash show -p // to view the content of the most recent stash
git stash show -p stash@{1} // To view the content of an arbitrary stash

Move your stashes from one repo to another
  This was useful for me when we created a new branch for a new major release,
but were still working on our current version as well.
I cloned our repo again and kept the new project on our new branch, but also wanted to get my stashes there.

Download your stashes
	git stash show -p > [patchName]

	git stash show -p stash@{?} > [patchName]

  You'll have to specify your stash and name your file whatevery you want.
Do this for as all your stashes, and you'll have patch files in your pwd.

Apply your stashes
	cd /new/project/dir
	git apply /old/project/dir/[patchName]
	git stash

	使用 git stash apply [id] 也有可能衝突
	如內容出現
		<<<<<<< Updated upstream
						<mapping resource='tw/gov/moi/domain/Tcdf2102Type.hbm.xml' />
						<mapping resource='tw/gov/moi/domain/Tcdf2103Type.hbm.xml' />
						<mapping resource='tw/gov/moi/domain/Tcdf2200Type.hbm.xml' />
						<mapping resource='tw/gov/moi/domain/Tcdfc2o3Type.hbm.xml' />
		=======
		>>>>>>> Stashed changes

	Updated upstream 代表 上面的版本
	Stashed changes 代表 stash版本
	fix掉即可

// 參考 https://wincent.com/wiki/Git_merge_conflict_cheatsheet

// 含蓋 untracked-files to patch
// https://stackoverflow.com/questions/22818155/git-stash-to-patch-with-untracked-files

誤刪 stash drop/pop 想還原
	則下 for ref in `git fsck --unreachable | grep commit | cut -d' ' -f3`; do git show --summary $ref; done | less
	找到 stash log
	git stash apply {hash_id}

將當前 git status untracked file 壓縮成檔案

stash track and untrack to patch
	https://stackoverflow.com/questions/22818155/git-stash-to-patch-with-untracked-files

	// track stash
	git stash show -p stash@{?} > patch
	// untrack stash
	git diff 4b825dc642cb6eb9a060e54bf8d69288fbee4904 stash^3 >> patch

	cd /new/project/dir
	git apply /old/project/dir/[patchName]

==========================================================================================
================================== merge =================================================
==========================================================================================
git merge [branchName] --no-edit --no-ff
	https://stackoverflow.com/questions/24609146/stop-git-merge-from-opening-text-editor
		--no-edit // 代表 merge 時不會跳出編輯器的畫面
	https://medium.com/@fcamel/%E4%BD%95%E6%99%82%E8%A9%B2%E7%94%A8-git-merge-no-ff-d765c3a6bef5
	https://stackoverflow.com/questions/9069061/what-effect-does-the-no-ff-flag-have-for-git-merge
		--no-ff // 代表不 fastforward merge， ff 代表會縮減節點，讓節點比較乾淨而已

當 binary檔(doc pdf jar) merge 後有衝突
可使用

<<<<<<< HEAD
chocolate
=======
boycott
>>>>>>> upstream

# merge 後再下以誰為準指令
git checkout --ours word.txt    # => chocolate {<<<<<<< HEAD .... =======}
git checkout --theirs word.txt  # => boycott {======= .... >>>>>>> upstream}

merge 常例
	both modified
	both add
	deleted by them(一邊修改，一邊刪除)
		https://stackoverflow.com/questions/1380670/how-do-i-fix-a-merge-conflict-due-to-removal-of-a-file-in-a-branch

==========================================================================================
================================= git config =============================================
==========================================================================================
列舉設定
	git config --list

列舉設定與涵蓋原始目錄或類型
	https://stackoverflow.com/questions/60202175/what-is-the-difference-between-global-and-local-configuration-in-git
	顯示實際位置
		git config --list  --show-origin
	顯示配置類型(system、global、local)
		git config --list  --show-scpoe

	僅 system
		System: These variables are available for every user in the system
			[path]/etc/gitconfig.
				ex: C:/Program Files/Git/etc/gitconfig
					git config --list --system
	僅 global
		Global: Global configurations are available for the current users for all the projects
			~/.gitconfig or ~/.config/git/config
				ex: C:/Users/Username/.gitconfig
					git config --list --global
	僅 local
		Local: Local configs are available for the current repository only. You can make git read
			git config --list --local


設定 commit 的作者與 email
    git config --global user.name "Your Name"
    git config --global user.email you@example.com

改變預設 branch(master)
	git config --global ${your setting name} ${your setting value}
		ex:	git config --global init.defaultBranch main

移除設定
	git config --global --unset ${your setting name}
	or edit online
		git config --global --edit
==========================================================================================
==================================查看檔案================================================
==========================================================================================

git show [遠端branch/branch]:[file]
	ex:
		git show origin/issue/125:MC/sris-mc-core/src/main/java/tw/gov/moi/mc/job/MC4700Job.java
		git show issue/125:MC/sris-mc-core/src/main/java/tw/gov/moi/mc/job/MC4700Job.java

git blame <file> #關於file每行的所有commitId記錄的所有commitId記錄

git show [commid] [file]

==========================================================================================
================================== 查看當前 branch 資訊===================================
==========================================================================================
# 取得當前branch commit hash
	git rev-parse HEAD

# 取得當前branch 分支名稱
	git rev-parse --abbrev-ref HEAD

# 取得當前branch 分支完整名稱與路徑
	git rev-parse --abbrev-ref --symbolic-full-name HEAD

==========================================================================================
================================== 查看 repo =============================================
==========================================================================================
https://stackoverflow.com/questions/15715825/how-do-you-get-the-git-repositorys-name-in-some-git-repository
basename `git rev-parse --show-toplevel`
current_repo=$(basename `git rev-parse --show-toplevel`)

==========================================================================================
================================== git url ===============================================
==========================================================================================
#取得git url
	git remote -v	// url=

#驗證 url 是否有效
	git ls-remote <url>

==========================================================================================
================================== 清 cache ==============================================
==========================================================================================
$ git pull
Auto packing the repository in background for optimum performance.
See 'git help gc' for manual housekeeping.
Enumerating objects: 246601

then
	git gc
	git prune
就正常

==========================================================================================
================================== git config ============================================
==========================================================================================
列舉已設定
	git config --list

檢視部分key 內容
	git config <key>

編輯全域設定
	git config --global --edit

vi edit
	Checkout Windows-style, commit Unix-style
		core.autocrlf true
	Checkout as-is, commit Unix-style
		core.autocrlf input
	Checkout as-is, commit as-is
		core.autocrlf false

cmd edit
	git config --global core.autocrlf true
	git config --global core.autocrlf input
	git config --global core.autocrlf false

==========================================================================================
================================== git object 操作 =======================================
==========================================================================================
https://stackoverflow.com/questions/56867629/how-to-read-file-content-from-git-objects
	git cat-file -p <object name>
	git ls-tree
	git ls-files -s

==========================================================================================
==================================常見操作問題============================================
==========================================================================================
操作常見錯誤 當push後出現
https://dotblogs.com.tw/wasichris/2017/09/19/014354

Q:當push後出現
	error: failed to push some refs to 'https://sris.pj/git/greenc.git'
	hint: Updates were rejected because the remote contains work that you do
	hint: not have locally. This is usually caused by another repository pushing
	hint: to the same ref. You may want to first integrate the remote changes
	hint: (e.g., 'git pull ...') before pushing again.
	hint: See the 'Note about fast-forwards' in 'git push --help' for details.

A:原因:代表push的時候有其他人commit遠端最新版，造成本機最新版與遠端最新版有差異
	盡可能push記得先pull，避免要額外處理以下動作
	若忘記先pull，則會有以下兩種方法
		方法一
			1.git pull
			2.commit merge(遠端最新與本機最新)後再
			3.gi push
		方法二
			1.git pull --rebase
			2.gi push

Q:當push 上去發現其他額外警告訊息
	ex:
		== sris-rs-app[issue/546]: push ==
		....
		remote: - sris-rs-app -
		remote: warning: The last gc run reported the following. Please correct the root cause
		remote: and remove gc.log.
		remote: Automatic cleanup will not be performed until the file is removed.
		remote:

		remote: warning: There are too many unreachable loose objects; run 'git prune' to remove them.
		remote:
		To https://sris.pj/git/ris/sris-rs-app.git
	   7e808aa64..9676653b0  issue/546 -> issue/546

A:https://stackoverflow.com/questions/37732141/whole-team-gets-too-many-unreachable-loose-objects-messages
  https://confluence.atlassian.com/bitbucketserverkb/pushing-to-bitbucket-server-reports-there-are-too-many-unreachable-loose-objects-825788622.html
  https://stackoverflow.com/questions/41771089/trigger-git-prune-automatically-on-git-pull
		git prune
		git gc

Q: git clone git pull 出現 fatal: remote error: upload-pack: not our ref
	大概是傳輸到遠端git時中斷，遠端git 紀錄一半
	https://stackoverflow.com/questions/4111728/how-do-i-deal-with-corrupted-git-object-files
	於遠端git
		find . -size 0 -type f | grep objects | xargs ls -a
		會發現 0k 的 object/xx/yyyyyy 的檔案

		https://mirrors.edge.kernel.org/pub/software/scm/git/docs/user-manual.html#recovering-from-repository-corruption
		check 是否有異常
			git fsck --full --no-dangling
			發現是 jenkins merge issue DEVELOP/main ref 空的
A: cd 遠端 git
	rm -rf refs/heads/DEVELOP/main
	git pull
	git remote update origin --prune