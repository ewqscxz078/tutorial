bash shell
===================================================================
========================= 全域變數\區域變數 =======================
===================================================================
列舉區域變數
	set

列舉全域變數
	export
===================================================================
========================= cd ======================================
===================================================================
返回家目錄
	cd ~

返回上一次目錄
	cd -
	或
	cd $OLDPWD

===================================================================
========================= vi/vim ==================================
===================================================================
vi -b 顯示換行符號

gg 到第一頁
shift g 最後一頁
ctrl + f 下一頁
ctrl + b 上一頁

dd 刪除一行
dd 並游標到某行最後面後按下 p ，則會插入下一行

search
	next n
	before N

===================================================================
========================= ls ======================================
===================================================================
ls -p | grep -v /  # 僅顯示file
ls -d */  # 僅顯示folder

ls -l  |grep "^-"|wc -l #計算檔案數
ls -l  |grep "^d"|wc -l #計算目錄數


ls -lah `find . -xdev -type f -name "*.java" -size +250k` # 列出超出250k的java程式
	
===================================================================
========================= find ====================================
===================================================================
找出所有檔案有符合字串的檔案 // 常用
	find . -type f -exec grep -l [key word] {} +

找出字尾有space的檔案 // 透過正則表示法
	find . -type f -exec egrep -l " +$" {} \;

找出為檔案且檔名	
	find . -type f -name [fileName]
	
===================================================================
========================= grep ====================================
===================================================================
grep [-a –v –i –n –v ] '搜尋的字串' filename
-a : 把binary 檔案用 text 檔案的方式搜尋資料

-c : 計算找到 '搜尋字串' 的次數(count)

-i : 忽略大小寫的不同,也就是大小寫都會視為相同

-n : 輸出行號,在每行的前面加上行號ex: 1: 2: 3: (number)

-v : 反向選擇,也就是說顯示出沒有 '搜尋字串'內容的那一行(--invert-match)

-V : 大寫的V,顯示出來grep的版本跟相關的資訊(version)

找到window 換行符號

grep -r --exclude=*.{pdf,jpg,gif,png,ttf,keystore,jasper,xls} $'\r' * >> checkM.txt
grep -r --include=*.{java} *

大小寫不分
grep -i [key word] /d/SRIS_CODE/Greenc/.cache/issue.checkouted

all match file name
grep -iw [key word] /d/SRIS_CODE/Greenc/.cache/issue.checkouted

===================================================================
========================= if ======================================
===================================================================
# 一個條件判斷，分成功進行與失敗進行 (else)
if [ 條件判斷式 ]; then
	當條件判斷式成立時，可以進行的指令工作內容；
else
	當條件判斷式不成立時，可以進行的指令工作內容；
fi

if [ 條件判斷式一 ]; then
	當條件判斷式一成立時，可以進行的指令工作內容；
elif [ 條件判斷式二 ]; then
	當條件判斷式二成立時，可以進行的指令工作內容；
else
	當條件判斷式一與二均不成立時，可以進行的指令工作內容；
fi
===================================================================
========================= cp ======================================
===================================================================
# --reflink=auto 代表有使用到cow 的檔案系統 會加速 copy
	cp -r --reflink=auto "$fromdir" "$todir" 


cp sourcefile targetfile

===================================================================
========================= rm ======================================
===================================================================
\rm -rf # 有加\代表執行原生指令
rm -rf # 代表有可能執行alias 自訂簡碼

rm -r {fileName} # 含砍目錄


	
===================================================================
========================= $ =======================================
===================================================================
/path/to/scriptname  opt1  opt2  opt3  opt4
       $0             $1    $2    $3    $4
$# ：代表後接的參數『個數』，以上表為例這裡顯示為『 4 』；
$@ ：代表『 "$1" "$2" "$3" "$4" 』之意，每個變數是獨立的(用雙引號括起來)；
$* ：代表『 "$1c$2c$3c$4" 』，其中 c 為分隔字元，預設為空白鍵， 所以本例中代表『 "$1 $2 $3 $4" 』之意。

===================================================================
========================= shift ===================================
===================================================================
echo "Total parameter number is ==> $#"
echo "Your whole parameter is   ==> '$@'"
shift   # 進行第一次『一個變數的 shift 』
echo "Total parameter number is ==> $#"
echo "Your whole parameter is   ==> '$@'"
shift 3 # 進行第二次『三個變數的 shift 』
echo "Total parameter number is ==> $#"
echo "Your whole parameter is   ==> '$@'"

[dmtsai@study bin]$ sh shift_paras.sh one two three four five six <==給予六個參數
Total parameter number is ==> 6   <==最原始的參數變數情況
Your whole parameter is   ==> 'one two three four five six'
Total parameter number is ==> 5   <==第一次偏移，看底下發現第一個 one 不見了
Your whole parameter is   ==> 'two three four five six'
Total parameter number is ==> 2   <==第二次偏移掉三個，two three four 不見了
Your whole parameter is   ==> 'five six'

===================================================================
========================= > >> ===================================
===================================================================
清掉檔案裡內容並寫入file
	>
append 檔案最後面
	>>


===================================================================
========================= 特殊字眼處理 ============================
===================================================================
$()和 ` `
都是用来做命令替换用(commandsubstitution)的
各自的优缺点：
1. `  ` 基本上可用在全部的 unix shell 中使用，若写成 shell script ，其移植性比较高。但反单引号容易打错或看错。

2. $()并不是所有shell都支持。

===================================================================
========================= process  ===============================
===================================================================
執行shell 方式有兩種
一種產生新的shell，然後執行
另一種是當前shell下執行，不再啟用其他shell

exec
source 都屬builtins commands
可man exec
man source

source 會在當前shell下執行
exce 會把當前shell process 切換到後面的執行命令，可保持PID不變 $?


netstat -tuln 來取得目前主機有啟動的服務

stat fileName #可查看詳細建利情況 相對ls

command1 ; command2 # 批次執行
command1 & command2 # 並行執行


===================================================================
========================= netstat  ================================
===================================================================
找到 CLOSE_WAIT 個數
	netstat -n | grep "CLOSE_WAIT" | wc -l


===================================================================
========================= alias  ==================================
===================================================================
alias 列舉所有指令別名


===================================================================
========================= ps ======================================
===================================================================
查看cpu mem 占最多的資源列舉
	ps -eo pid,ppid,cmd,%mem,%cpu --sort=-%mem | head
	ps -eo pid,ppid,cmd,%mem,%cpu --sort=-%cpu | head

	ps aux | grep [key word] | awk '{ total += $6; } END { print total/1024"MB" }'
	
查看更進一步資訊	
	ps aux | grep [key word]
		ps aux | grep /etc/alternatives/java_sdk_
		ps aux | grep java-1.8.0-ope
	 
===================================================================
========================= /dev/null ===============================
===================================================================
#簡單來說就是垃圾桶/黑洞，只進不出
	ex:內容輸出到標準輸出(畫面)上
		cat test.log
		
	ex:內容不輸出到標準輸出上
		cat test.log > /dev/null
		
	ex:如果test.txt文件不存在時，使用"cat test.txt"命令時，會輸出"cat: test.txt: No such file or directory"	
		cat test.txt 2>/dev/null
			則就不會跳出錯誤輸出訊息
			
	ex:禁止標準輸出和標準錯誤的輸出
		cat filename 2>/dev/null >/dev/null

	ex:使用/dev/null 清除檔案內容
		cat /dev/null > [fileName]
 
===================================================================
========================= explorer ================================
=================================================================== 
以window folder方式導覽目錄開啟當前目錄
explorer . 