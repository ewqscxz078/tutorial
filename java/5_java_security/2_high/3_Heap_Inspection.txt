ref fortify

風險原因
	敏感資訊存放到 不可變 String，若被竊取 heap 會被拿走問題
		final char[] password = pf.getPassword();
		...
		String passwordAsString = new String(password);

建議方式
	final char[] password = pf.getPassword();
	// erase when finished
	Arrays.fill(password, ' ');

https://blog.csdn.net/lyxuefeng/article/details/103862926
	1.拿出 char[] password 後用 StringBuffer 處理

https://stackoverflow.com/questions/5513144/converting-char-to-byte
	若 char[] password = pf.getPassword(); 
		還要到 base64 轉換，要用byte[]轉換，不能用String 
			Base64.getDecoder().decode(String.valueOf(password))

		char[] chars = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'};
		byte[] bytes = toBytes(chars);
		/* do something with chars/bytes */
		Arrays.fill(chars, '\u0000'); // clear sensitive data
		Arrays.fill(bytes, (byte) 0); // clear sensitive data

		import java.nio.CharBuffer;
		import java.nio.ByteBuffer;
		import java.util.Arrays;

		byte[] toBytes(char[] chars) {
		  CharBuffer charBuffer = CharBuffer.wrap(chars);
		  ByteBuffer byteBuffer = Charset.forName("UTF-8").encode(charBuffer);
		  byte[] bytes = Arrays.copyOfRange(byteBuffer.array(),
					byteBuffer.position(), byteBuffer.limit());
		  Arrays.fill(byteBuffer.array(), (byte) 0); // clear sensitive data
		  return bytes;
		}