=================================================================================================================================================================
======================================== Builder Design Pattern =================================================================================================
=================================================================================================================================================================
https://www.digitalocean.com/community/tutorials/builder-design-pattern-in-java
特徵
	1.解決 實作 Abstract Factory 太多參數設值複雜問題，有些設定可能是可選，有些必須
	2.輕量化 client 呼叫的方式

方法
	1.First of all you need to create a static nested class and then copy all the arguments from the outer class to the Builder class. We should follow the naming convention and if the class name is Computer then builder class should be named as ComputerBuilder.
		建立一個 static 巢狀類別或是獨立類別 builder
	2.Java Builder class should have a public constructor with all the required attributes as parameters.
		僅一個公開建構所有參數 針對目標對象 返回目標對象
			xxxBuilder => xxx
				public xxx builder(){
					return new xxx(xxxBuilder);
				}
	3.Java Builder class should have methods to set the optional parameters and it should return the same Builder object after setting the optional attribute.
		builder 類別要有多個可選設定的方法並返回自己
		public class xxxBuilder{
			public xxxBuilder setYYY(yyy){
				this.yyy = yyy;
				return this;
			}
		}
	4.The final step is to provide a build() method in the builder class that will return the Object needed by client program. For this we need to have a private constructor in the Class with Builder class as argument.
			xxxBuilder => xxx
				private xxx(xxxBuilder builder){
					xxx參數 = builder.參數
					....
				}

public class Computer {

	//required parameters
	private String HDD;
	private String RAM;

	//optional parameters
	private boolean isGraphicsCardEnabled;
	private boolean isBluetoothEnabled;


	public String getHDD() {
		return HDD;
	}

	public String getRAM() {
		return RAM;
	}

	public boolean isGraphicsCardEnabled() {
		return isGraphicsCardEnabled;
	}

	public boolean isBluetoothEnabled() {
		return isBluetoothEnabled;
	}

	private Computer(ComputerBuilder builder) {
		this.HDD=builder.HDD;
		this.RAM=builder.RAM;
		this.isGraphicsCardEnabled=builder.isGraphicsCardEnabled;
		this.isBluetoothEnabled=builder.isBluetoothEnabled;
	}

	//Builder Class
	public static class ComputerBuilder{

		// required parameters
		private String HDD;
		private String RAM;

		// optional parameters
		private boolean isGraphicsCardEnabled;
		private boolean isBluetoothEnabled;

		public ComputerBuilder(String hdd, String ram){
			this.HDD=hdd;
			this.RAM=ram;
		}

		public ComputerBuilder setGraphicsCardEnabled(boolean isGraphicsCardEnabled) {
			this.isGraphicsCardEnabled = isGraphicsCardEnabled;
			return this;
		}

		public ComputerBuilder setBluetoothEnabled(boolean isBluetoothEnabled) {
			this.isBluetoothEnabled = isBluetoothEnabled;
			return this;
		}

		public Computer build(){
			return new Computer(this);
		}

	}

}

public class TestBuilderPattern {

	public static void main(String[] args) {
		//Using builder to get the object in a single line of code and
                //without any inconsistent state or arguments management issues
		Computer comp = new Computer.ComputerBuilder(
				"500 GB", "2 GB").setBluetoothEnabled(true)
				.setGraphicsCardEnabled(true).build();
	}

}