https://www.youtube.com/watch?v=RBxPeSCi7xU&list=PLmOn9nNkQxJHNyTuKHxQGdRVD_zJt8SMA&index=17&ab_channel=%E5%B0%9A%E7%A1%85%E8%B0%B7IT%E5%9F%B9%E8%AE%AD%E5%AD%A6%E6%A0%A1

算術運算符號
	https://www.youtube.com/watch?v=rMxSKrdpnCE&list=PLmOn9nNkQxJHNyTuKHxQGdRVD_zJt8SMA&index=19&ab_channel=%E5%B0%9A%E7%A1%85%E8%B0%B7IT%E5%9F%B9%E8%AE%AD%E5%AD%A6%E6%A0%A1
	二元運算 : + - * /
		算術表達式 = 元素1 二元運算 元素2，運算完的類型為 元素1、元素2中最大類型，最小使用類型為 int
			System.out.println(1 + 2); // 3
			System.out.println(2 - 2); // 0
			System.out.println(3 * 2); // 6
			System.out.println(4 / 2); // 2
			System.out.println(1 / 2); // 0(取整)，非0.5 (int, int) => int
			System.out.println(1.0 / 2); // 0.5 (double, int) => double
			System.out.println(5 % 2); // 1(取餘)

			byte b1 = 10;
			byte b2 = 20;
			int b3 = b1 + b1; // (int, int) = int
			byte b3 = (byte)(b1 + b1); // (int, int) => byte = byte

			System.out.println(1 + 2 * 3); // 7
			System.out.println((1 + 2) * 3); // 9，括號優先運算

	https://www.youtube.com/watch?v=5DwiByUUbEk&list=PLmOn9nNkQxJHNyTuKHxQGdRVD_zJt8SMA&index=20&ab_channel=%E5%B0%9A%E7%A1%85%E8%B0%B7IT%E5%9F%B9%E8%AE%AD%E5%AD%A6%E6%A0%A1
	一元運算 : ++ --，為了簡化操作
		++ 本質就是加 +1 操作的簡化，自增運算符
		-- 本質就是減 +1 操作的簡化，自減運算符
			String 簡化
				相對於字串 String temp = "temp";
					其實是 String temp; temp = "temp" 簡化組合
			int 簡化
				事後 + 1
					int i = 0;
					// int j = i; // j = 0
					// i = i + 1; // i = 1
					// 簡化
					int j = i++;
					System.out.println("i = " + i)
					System.out.println("j = " + j)

				事前 + 1
				int i = 0;
				// i = i + 1; // i = 1
				// int j = i; // j = 1
				// 簡化
				int j = ++i;
				System.out.println("i = " + i)
				System.out.println("j = " + j)

賦值運算符號 : = += -= *= /= %=
	等號就是賦值運算符;將等號右邊表達式的結果賦值給等號左邊的變量
		賦值運算符號需要考慮類型的關係，小的可以賦值給大的
			String name = "test";
			byte b = 10;
			short s = b;

		複合賦值運算符 : +=、-=、*=、/=、%=
			如果元素進行運算後重新賦值給自己，那麼可以將運算和賦值得符號進行簡化
				int i = 1;
				// i = i + 1;
				i += 1;	// i = 2
				System.out.println("i = " + i)
			如果使用了複合賦值運算符，那麼數據類型不會發生變化
				byte b1 =  10;
				// b1 = b1 + 20; // byte -> int + int  => result int . but b1 is byte. it fail
				b1 +=20; // b1 = 30，因為 數據類型不會發生變化

https://www.youtube.com/watch?v=35xGSmlkB4g&list=PLmOn9nNkQxJHNyTuKHxQGdRVD_zJt8SMA&index=22&ab_channel=%E5%B0%9A%E7%A1%85%E8%B0%B7IT%E5%9F%B9%E8%AE%AD%E5%AD%A6%E6%A0%A1
關係運算符號 : == != > >= < <=
	比較兩個資料之間關係的運算符
		元素1(資料1、表達式1) 關係運算符(== != > >= < <=) 元素2(資料2、表達式2)
		關係表達式結果為布林類型，預想結果相同則為 true; 反之 false
			int i = 10;
			int j = 20;
			System.out.println( i == j ); // false，是否相等
			System.out.println( i != j ); // true，是否不相等
			System.out.println( i > j ); // false，是否 i 大於 j
			System.out.println( i >= j ); // false，是否 i 大於或等於 j
			System.out.println( i < j ); // true，是否 i 小於 j
			System.out.println( i <= j ); // true，是否 i 小於或等於 j

邏輯運算符號
	表達多個表達式之間的關係
	變數 = (條件表達式1) 邏輯運算符 (條件表達式2)，結果為布林類型
	因條件表達式為布林類型，所以邏輯運算符也是布林類型，但有以下排列組合情形
		true false => ?
		true false => ?
		false true => ?
		false false => ?
		邏輯運算 : & | ^ !
			& 且運算，要求兩個條件表達式都必須算出結果，只有當兩個結果都為 true 時，最終結果才為 true，其他皆為 false
				int i = 10;
				System.out.println( (i > 5) & (i < 20) ); // true true => true
				System.out.println( (i > 5) & (i > 20) ); // true false => false
				System.out.println( (i < 5) & (i < 20) ); // false true => false
				System.out.println( (i < 5) & (i > 20) ); // false false => false
			| 或運算，要求兩個條件表達式都必須算出結果，其中一個結果都為 true 時，最終結果就為 true，其他皆為 false
				int i = 10;
				System.out.println( (i > 5) | (i < 20) ); // true true => true
				System.out.println( (i > 5) | (i > 20) ); // true false => true
				System.out.println( (i < 5) | (i < 20) ); // false true => true
				System.out.println( (i < 5) | (i > 20) ); // false false => false
			! 相反邏輯運算
				true = > false
				false = > true
					int i = 10;
					System.out.println( i == 10 );	// true
					System.out.println( !(i == 10) ); // false
		短路運算 : && ||
			根據第一個條件表達式是否執行下一個條件表達式
			&& 短路且運算，第一個條件表達式為 true，才執行下一個條件表達式，反之忽略下一個條件表達式。當全為 true，則結果為 true，可少運算條件表達式
				int i = 10;
				int j = 20;
				System.out.println( (i > 5) && (++j < 20) ); // true true => true
				System.out.println(j); // j = 21
				System.out.println( (i < 5) && (++j > 20) ); // false 略過 => false
				System.out.println(j); // j = 20
			|| 短路或運算，第一個條件表達式為 false，才執行下一個條件表達式，反之忽略下一個條件表達式。當其中一個為 true，則結果為 true，反之為 false，可少運算條件表達式
				int i = 10;
				int j = 20;
				System.out.println( (i == 10) || (++j > 30) ); // true 略過 => true
				System.out.println(j); // j = 20
				System.out.println( (i < 5) || (++j > 30) ); // false false => false
				System.out.println(j); // j = 21

https://www.youtube.com/watch?v=sX9JO7Ll3sw&list=PLmOn9nNkQxJHNyTuKHxQGdRVD_zJt8SMA&index=24&ab_channel=%E5%B0%9A%E7%A1%85%E8%B0%B7IT%E5%9F%B9%E8%AE%AD%E5%AD%A6%E6%A0%A1
三元運算符號
	三個元素參與運算的運算符
	(關係表達式 ? 表達式1 : 表達式2)
	變數 = (條件表達式) ? (任意表達式1) : (任意表達式2)
	運算規則 : 判斷條件表達式的結果, 如果為 true, 那們執行任意表達式1的值；反之執行任意表達式2的值
	int i = 10;
	int j = 20;
	int k = ( i == 10 ) ? 1+1 : 2+2;
	System.out.println(k); // k = 2
	int k = ( i > 10 ) ? 1+1 : 2+2;
	System.out.println(k); // k = 4