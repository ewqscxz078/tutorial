Apache Commons BeanUtils
	import org.apache.commons.beanutils.BeanUtils;

	SourceBean source = new SourceBean();
	TargetBean target = new TargetBean();

	try {
		BeanUtils.copyProperties(target, source);
	} catch (Exception e) {
		e.printStackTrace();
	}
	優點: 簡單易用，支持屬性名稱匹配。
	缺點: 性能較低（基於反射）。

Spring BeanUtils
	如果你的專案使用 Spring，org.springframework.beans.BeanUtils 是更好的選擇
		https://matthung0807.blogspot.com/2019/10/spring-beanutilscopyproperties-to-copy.html
			BeanUtils.copyProperties(Object source, Object target)方法把JavaBean/POJO物件的properties值複製到另一個物件。

			使用注意事項
				1.由於是利用反射來達到複製的效果，因此效能上會比手動寫set方法來得差。
				2.屬性的命名上必須統一，所以系統中各屬性的命名規則必須嚴格規範。
				3.不好除錯，例如屬性中有Enum型態，但資料庫為字串等型態不一致，或是Entity類與DTO類命名不一致等也會造成屬性結果為null的情況。

	import org.springframework.beans.BeanUtils;

	SourceBean source = new SourceBean();
	TargetBean target = new TargetBean();

	BeanUtils.copyProperties(source, target);
	優點: 比 Apache BeanUtils 更輕量化，效能稍高。
	缺點: 不支持深層複製（Deep Copy）。


ModelMapper
	import org.modelmapper.ModelMapper;

	ModelMapper modelMapper = new ModelMapper();
	TargetBean target = modelMapper.map(source, TargetBean.class);
	優點: 支援深層映射，靈活且功能強大。
	缺點: 引入額外依賴。

Java 8 Stream + Lambda
	如果只需要映射部分屬性，可以用 Stream 和 Lambda 實現簡單的轉換
		TargetBean target = new TargetBean();
		target.setName(source.getName());
		target.setAge(source.getAge());
		// 或者批量處理屬性
		Stream.of("name", "age")
			  .forEach(property -> {
				  // 使用反射進行自動映射
			  });
	優點: 適合小範圍轉換，無需額外庫。
	缺點: 代碼量仍較多，難以應對複雜對象。


簡單情境: 使用 Spring BeanUtils。
深層映射或複雜邏輯: 使用 ModelMapper。
自定義高靈活需求: 考慮註解加反射方式或手動編寫 Mapper 類。