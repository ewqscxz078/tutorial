https://mkyong.com/java/how-do-convert-java-object-to-from-json-format-gson-api/

<dependency>
	<groupId>com.google.code.gson</groupId>
	<artifactId>gson</artifactId>
</dependency>

public class Staff {

    private String name;
    private int age;
    private String[] position;              // array
    private List<String> skills;            // list
    private Map<String, BigDecimal> salary; // map

    //getters and setters
}

Convert Java objects to JSON
	Gson gson = new Gson();

	Staff obj = new Staff();

	// 1. Java object to JSON file
	gson.toJson(obj, new FileWriter("C:\\projects\\staff.json"));

	// 2. Java object to JSON string
	String jsonInString = gson.toJson(obj);

Convert JSON to Java objects
	Gson gson = new Gson();

	// 1. JSON file to Java object
	Staff staff = gson.fromJson(new FileReader("C:\\projects\\staff.json"), Staff.class);

	// 2. JSON string to Java object
	String json = "{'name' : 'mkyong'}";
	Staff staff = gson.fromJson(json, Staff.class);

	// 3. JSON file to JsonElement, later String
	JsonElement json = gson.fromJson(new FileReader("C:\\projects\\staff.json"), JsonElement.class);
    String result = gson.toJson(json);


Java Objects to JSON
    public static void main(String[] args) {

        Gson gson = new Gson();

        Staff staff = createStaffObject();

        // Java objects to String
        // String json = gson.toJson(staff);

        // Java objects to File
        try (FileWriter writer = new FileWriter("C:\\projects\\staff.json")) {
            gson.toJson(staff, writer);
        } catch (IOException e) {
            e.printStackTrace();
        }

    }

enable the pretty print mode :
	import com.google.gson.Gson;
	import com.google.gson.GsonBuilder;

		Gson gson = new GsonBuilder().setPrettyPrinting().create();


gson object to json string 指定部分欄位不顯示
	1.使用 transient 關鍵字
		這樣 Gson 在序列化時就會忽略這些屬性
			public class MyClass {
				private String visibleField;
				private transient String hiddenField;

				// 省略其他程式碼
			}
	2.使用 Gson 的 @Expose 註解 並搭配 excludeFieldsWithoutExposeAnnotation 使用
		import com.google.gson.annotations.Expose;

		public class MyClass {
			@Expose
			private String visibleField;

			@Expose(serialize = false)
			private String hiddenField;

			// 省略其他程式碼
		}

		Gson gson = new GsonBuilder().excludeFieldsWithoutExposeAnnotation().create();

	3.僅輸出 json str 限制不顯示: GsonBuilder.setExclusionStrategies
		class MyExclusionStrategy implements ExclusionStrategy {
			@Override
			public boolean shouldSkipField(FieldAttributes f) {
				// 在這裡自定義哪些字段應該被排除
				return f.getName().equals("hiddenField");
			}

			@Override
			public boolean shouldSkipClass(Class<?> clazz) {
				// 在這裡可以自定義是否排除整個類別
				return false;
			}
		}

        Gson gson = new GsonBuilder()
                .setExclusionStrategies(new MyExclusionStrategy())
                .create();