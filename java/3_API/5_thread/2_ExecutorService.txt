Java 5新增了Concurrency API，其利用T hread Pool（執行緒池）來減少每次產生新執行緒的成本，
	也就是用 ExecutorService 執行多執行緒的效能較好

java.util.concurrent.Executors
	已提供常用的幾個模式
		1. newCachedThreadPool創建一個可緩存線程池，如果線程池長度超過處理需要，可靈活回收空閒線程，若無可回收，則新建線程。
		2. newFixedThreadPool 創建一個定長線程池，可控制線程最大並發數，超出的線程會在隊列中等待。
		3. newScheduledThreadPool 創建一個定長線程池，支持定時及週期性任務執行。
		4. newSingleThreadExecutor 創建一個單線程化的線程池，它只會用唯一的工作線程來執行任務，保證所有任務按照指定順序(FIFO, LIFO, 優先級)執行。

		1.固定 pool
			Executors.newFixedThreadPool

		2.單一 pool
			Executors.newSingleThreadExecutor

		3.週期 pool
			Executors.newScheduledThreadPool

		4.單一週期 pool
			Executors.newSingleThreadScheduledExecutor

			public static void main(String[] args) {
				ExecutorService ex = Executors.newSingleThreadExecutor();
				// 執行一個新的執行緒a
				ex.execute(new Runnable() {
					@Override
					public void run() {
						System.out.println("執行緒a");
					}
				});
				// 執行一個新的執行緒b
				ex.execute(new Runnable() {
					@Override
					public void run() {
						System.out.println("執行緒b");
					}
				});
				ex.shutdown(); // 關閉ExecutorService的Thread pool
			}

		5.
			Executors.newCachedThreadPool