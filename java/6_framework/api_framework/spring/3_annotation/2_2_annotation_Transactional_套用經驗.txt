ref ChatGPT

1.@Transactional 應該標註在哪個層級？
	典型的三層架構（Controller → Service → DAO/Repository）中，最適合將 @Transactional 標註在 Service 層的方法上，原因如下
		Service 層是業務邏輯的核心，應該是交易的邊界，這樣可以確保同一個業務邏輯的所有 DB 操作都在同一個交易內。
		Controller 層不應該管理交易，它的責任應該是處理請求與響應，不應涉及交易管理。
		Repository 層（JPA Repository）也不應該標註 @Transactional，Spring Data JPA 內部已經有自己的機制來處理簡單的 CRUD 操作，它們應該由上層的 Service 層來控制交易範圍。

		範例
			@Service
			public class OrderService {

				@Transactional
				public void createOrder(OrderRequest request) {
					// 1. 檢查庫存
					inventoryService.checkStock(request.getProductId());

					// 2. 創建訂單
					Order order = new Order(request);
					orderRepository.save(order);

					// 3. 扣庫存
					inventoryService.deductStock(request.getProductId(), request.getQuantity());
				}
			}

2.@Transactional 需要標註在 class 還是 method？
	1.一般來說，標註在方法層級比較靈活，可以根據不同的方法設定不同的 propagation。
		@Service
		@Transactional // 這裡標註在 class 上，所有 public 方法都會啟用交易
		public class OrderService {
			public void createOrder(...) { ... }
			public void cancelOrder(...) { ... }
		}

	2.如果一個 class 裡的所有 public 方法都應該啟動交易，可以直接標註在 class 上。
		@Service
		public class OrderService {
			@Transactional
			public void createOrder(...) { ... }

			@Transactional(readOnly = true) // 查詢時使用 readOnly，可以提升效能
			public Order findOrder(...) { ... }
		}

3.@Transactional 在 Component 類別內使用？
	Spring 的 @Component 內部通常不建議直接使用 @Transactional，因為：
		1.如果 Component 內的方法沒有被 Service 層呼叫，而是自己內部呼叫自己，AOP 可能無法生效。
		2.這樣會讓交易控制變得難以維護
	最佳實踐：
		讓 Service 來控制交易，Component 只專注於功能模組。
		若一定要使用 @Transactional，請確保 Component 是由 Spring 管理，並且被 Service 以「外部方式」呼叫。
			@Component
			public class NotificationService {
				@Transactional
				public void sendEmail(...) {
					// 發送 email，這樣會啟動新的交易
				}
			}

			但如果 NotificationService.sendEmail() 是被自己內部方法呼叫，可能會因為 AOP 代理機制無法生效，導致 @Transactional 失效。

4. AOP 方式控制交易 vs. @Transactional
	AOP 方式確實可以用來控制交易，但要特別注意：
		1.維護成本高：開發人員需要熟悉 AOP，且 AOP 切面必須考慮到 Propagation。
		2.可能導致非預期的交易問題：如果沒寫好，可能會無法預測某個方法是否在交易內執行。
	建議做法：
		1.交易還是應該使用 @Transactional，AOP 可用來 監控交易行為（如記錄交易開始/結束、監測超時等）。
			示例：透過 AOP 監控交易狀態
				@Aspect
				@Component
				public class TransactionMonitorAspect {
					@Before("@annotation(org.springframework.transaction.annotation.Transactional)")
					public void beforeTransaction(JoinPoint joinPoint) {
						log.info("交易開始: " + joinPoint.getSignature());
					}

					@After("@annotation(org.springframework.transaction.annotation.Transactional)")
					public void afterTransaction(JoinPoint joinPoint) {
						log.info("交易結束: " + joinPoint.getSignature());
					}
				}

		2.除非有特殊需求，否則不建議完全依賴 AOP 來控制交易。


總結
	交易管理策略
		@Transactional 應該放哪裡？
			Service 層方法，不應該放在 Controller 或 Repository
		標註在 Class 還是 Method？
			Method 優先，如果所有方法都需交易可標註在 Class
		Propagation 設定？
			預設 REQUIRED，獨立交易用 REQUIRES_NEW，查詢用 readOnly = true
		Component 內部使用？
			透過 Service 層調用，避免自己調用自己導致 AOP 失效
		AOP 控制交易？
			不建議，但可用來監控交易行為


常見問題
	Q1:service class 上宣告 @Transactional 有些方法並非需要交易時會影響效能?
	A1:Service 類上全局宣告 @Transactional（即標註在 class 級別）時，所有公開方法（public）都會被 Spring 代理並套用交易，即使某些方法不需要交易。這樣可能會影響效能，主要原因如下：
		1. 影響效能的主要原因
			1.不必要的 Transaction Overhead
				每次執行這些方法時，Spring 仍會進行 交易的開始 (begin transaction) 和提交 (commit transaction)，即使該方法沒有數據庫寫入操作。
				這會增加 JDBC 連接的開銷，特別是對於查詢類 (findById() 這類) 方法。
			2.查詢操作多餘的 ACID 保證
				@Transactional 預設是 readOnly = false，會告知底層的 JPA（或 Hibernate）開啟一個 可寫入的交易，即使該方法只是執行查詢，這可能會導致：
					Hibernate 產生不必要的鎖（特別是 repeatable read 或 serializable 這類隔離級別）。
					影響資料庫效能，因為部分資料庫在 @Transactional 下可能會以一致性快照來執行查詢，導致額外的負擔。
			3.非交易方法仍被代理
				Spring 使用 AOP 代理 (CGLIB 或 JDK Dynamic Proxy) 來管理 @Transactional 方法，因此即使某些方法不需要交易，它們仍會被代理，帶來額外的代理層開銷。
		2. 解決方案：方法級別控制
			建議做法 是 僅在需要交易的方法上標註 @Transactional，不要在 class 上宣告，這樣可以避免非必要的交易開銷。
				例如：
					@Service
					public class OrderService {

						@Transactional // 需要交易
						public void createOrder(OrderRequest request) {
							// 1. 檢查庫存
							inventoryService.checkStock(request.getProductId());

							// 2. 創建訂單
							Order order = new Order(request);
							orderRepository.save(order);

							// 3. 扣庫存
							inventoryService.deductStock(request.getProductId(), request.getQuantity());
						}

						@Transactional(propagation = Propagation.REQUIRES_NEW) // 需要獨立交易
						public void processPayment(PaymentRequest request) {
							paymentRepository.save(request);
						}

						@Transactional(readOnly = true) // 查詢類應使用 readOnly 提高效能
						public Order findOrder(Long orderId) {
							return orderRepository.findById(orderId).orElse(null);
						}

						public void sendNotification(String message) {
							// 不需要交易的操作，例如發送通知
							notificationService.sendEmail(message);
						}
					}
				這樣做的好處：
					1.查詢方法 (findOrder()) 使用 readOnly = true，可讓 Hibernate 避免不必要的快取同步 (flush)，提升效能。
					2.非交易方法 (sendNotification()) 沒有 @Transactional，避免 Spring 代理導致的額外開銷。
					3.交易方法 (createOrder()、processPayment()) 仍有正確的交易管理。

		3. 什麼時候 @Transactional 標在 class 上比較適合？
			在某些場景下，仍然可以考慮將 @Transactional 標註在 class 級別：
				1.如果該 Service 的所有方法都確定需要交易
					例如「僅負責資料寫入、更新、刪除的 Service」，可以直接標註在 class：
						@Service
						@Transactional
						public class UserService {
							public void createUser(User user) { userRepository.save(user); }
							public void updateUser(User user) { userRepository.save(user); }
							public void deleteUser(Long userId) { userRepository.deleteById(userId); }
						}
						這種情況下，所有方法都涉及交易，標在 class 層級是可以接受的，因為省略方法級別的 @Transactional 並不會影響效能。
				2.批次作業（Batch Job）
					若整個批次作業都應該運行在 單一交易中，則可標註在 class 上：
						@Service
						@Transactional
						public class BatchProcessingService {
							public void processLargeDataset() {
								// 讀取 & 處理大量數據
								List<Data> dataList = dataRepository.findAll();
								dataList.forEach(this::processItem);
							}
							private void processItem(Data data) { ... }
						}
						在這種情況下，批次操作應該 一次提交，避免每筆資料都開啟/提交交易。
		4. @Transactional(readOnly = true) 真的有用嗎？
			特別是對於 使用 Hibernate 的 JPA 項目，readOnly = true 可以顯著提升效能，原因如下：
				1.避免 Hibernate 在 flush 階段同步變更（不會檢查 Entity 是否變更）。
				2.某些資料庫（如 PostgreSQL）會自動使用更輕量級的快取機制，因為它知道這個交易不會變更數據。

	Q2: @Transactional 在方法級別是否會覆蓋 class 級別？
	A2: 會！Spring 會按照以下優先順序來決定 @Transactional 設定：
		1.方法上的 @Transactional 設定優先。
		2.如果方法沒有 @Transactional，則使用 class 上的 @Transactional 設定。
		3.如果都沒有，則該方法不會啟用交易。
			@Service
			@Transactional // 預設所有方法都有交易 (readOnly = false)
			public class OrderService {

				@Transactional(readOnly = true) // 覆蓋 class 設定
				public Order findOrder(Long orderId) {
					return orderRepository.findById(orderId).orElse(null);
				}

				public void processOrder() {
					// 這裡仍然會使用 class 上的 @Transactional (預設 readOnly = false)
				}
			}

		 最佳設計建議:
			若 class 內大部分方法需要交易，但查詢類方法應該使用 readOnly = true，可以在 class 上標註 @Transactional，並在查詢方法上額外加 @Transactional(readOnly = true)。
			若 class 內有部分不需要交易的方法，則應在方法上個別標註 @Transactional，避免 class 上的設定影響非交易方法。

	Q3: class 宣告 @Transactional  都會影響 public、private、protected、default 方法?
	A3: @Transactional 只會影響 public 方法，不會影響 private 或 protected、default 方法。
		1.這是因為 Spring 使用 AOP 代理機制來管理 @Transactional，而 Spring AOP 只會代理 public 方法。
			為什麼只影響 public 方法？
				Spring 透過 動態代理 (Dynamic Proxy) 來攔截方法調用，而 JDK 代理 (JDK Dynamic Proxy) 只能代理 介面 (interface) 的 public 方法。
				如果使用 CGLIB 代理，它可以代理類 (class) 本身，但依然只會代理 public 方法，private 方法仍然不會被攔截。
		2. @Transactional 在內部方法調用時可能無效
			重點：如果同一個 class 內部的方法呼叫另一個 @Transactional 方法，可能會導致交易不生效！
				@Service
				@Transactional
				public class OrderService {

					public void createOrder() {
						System.out.println("Public method: 交易生效");
						processOrder(); // 內部呼叫，Transactional 不會生效！
					}

					@Transactional(propagation = Propagation.REQUIRES_NEW)
					public void processOrder() {
						System.out.println("Public method: 交易應該生效，但不會！");
					}
				}
				結果
					createOrder() ✅ 交易生效。
					processOrder() 🚨 不會開啟新的交易，因為它是由 createOrder() 內部直接調用，沒有經過 Spring 代理，所以 @Transactional(propagation = Propagation.REQUIRES_NEW) 無效！

			解法
				1.使用 self-injection
					透過 Spring 取得自己的代理物件，讓方法透過代理呼叫：
						@Service
						@Transactional
						public class OrderService {
							@Autowired
							private OrderService self; // 取得代理物件

							public void createOrder() {
								System.out.println("Public method: 交易生效");
								self.processOrder(); // 透過代理呼叫
							}

							@Transactional(propagation = Propagation.REQUIRES_NEW)
							public void processOrder() {
								System.out.println("Public method: 交易生效！");
							}
						}
				2.拆分成不同的 Service
					將 processOrder() 移到另一個 Service 內，確保方法是被外部 Bean 呼叫
						@Service
						public class OrderService {
							@Autowired
							private PaymentService paymentService;

							public void createOrder() {
								System.out.println("Public method: 交易生效");
								paymentService.processOrder();
							}
						}

						@Service
						public class PaymentService {
							@Transactional(propagation = Propagation.REQUIRES_NEW)
							public void processOrder() {
								System.out.println("Public method: 交易生效！");
							}
						}

