https://stackoverflow.com/questions/51811372/why-aop-does-not-work-in-my-spring-boot-application
為何 aop 沒有生效，檢查如下表列
	1.use @EnableAspectJAutoProxy without (proxyTargetClass = true)
	2.be sure your @Aspect annotation is scaned. you can use @ComponentScan("myAspectPackageContainer.*")
	3.you don't need @Component annotation when use @Aspect anymore.
	4.use method modifier in your expression "execution( public * com.example.demo..."
	5.at the end of your expression use "myPackage.*.*(..)"
	6.check with dependencies

AOP(Aspect-Oriented Programming)
	針對執行直線式執行程式方的方式，提供橫向式跨程式的統一附加寫法，與原始程式解偶的方法，常見於 log、監控、交易、統一附加處理...等等
		切面（Aspect）
		連線點（Joinpoint）
		通知（Advice）
		切入點（Pointcut）

範例

	1. add @EnableAspectJAutoProxy(proxyTargetClass = true)
		@SpringBootApplication
		@EnableAspectJAutoProxy(proxyTargetClass = true)
		public class DemoApplication {

			public static void main(String[] args) {
				SpringApplication.run(DemoApplication.class, args);
			}
		}

	2.切入方式
		https://ithelp.ithome.com.tw/articles/10279178
			@Aspect
			@Component
			public class MessageAspect {
				// 設定切入點
				@Pointcut("execution(* com.example.iThomeIronMan.controller..*(..))")
					public void pointcut() {
				}

				@Before("pointcut()")
				public void before(JoinPoint joinPoint) {
					System.out.println("=====Before advice starts=====");

					logger.info("訪問 " + joinPoint.getSignature().getName());
					Arrays.stream(joinPoint.getArgs()).forEach(System.out::println);

					System.out.println("=====Before advice ends=====");
				}

				@Around("pointcut()")
				public Object around(ProceedingJoinPoint joinPoint) throws Throwable {
					System.out.println("=====Around advice starts=====");

					long startTime = System.currentTimeMillis();

					// 呼叫proceed() 方法開始執行原方法
					Object result = joinPoint.proceed();
					long spentTime = System.currentTimeMillis() - startTime;
					logger.info("訪問 " + joinPoint.getSignature().getName() + " Time spent: " + spentTime);

					System.out.println("=====Around advice ends=====");

					return result;
				}

				@After("pointcut()")
				public void after(JoinPoint joinPoint) {
					System.out.println("=====After advice starts=====");

					logger.info("訪問 /" + joinPoint.getSignature().getName());
					Arrays.stream(joinPoint.getArgs()).forEach(System.out::println);

					System.out.println("=====After advice ends=====");
				}
			}


	3.執行後相對參考log結果
		@RestController
		public class MessageController {

			@RequestMapping(value = "/")
			public String mainMethod() {
				return "result from mainMethod";
			}
		}


動態 aop Pointcut
	DefaultPointcutAdvisor 
		https://blog.csdn.net/sinat_31396769/article/details/100980049
		自訂一個同@Around 效果的 by implements MethodInterceptor
			public class AroundAdvice implements MethodInterceptor {

				private static final org.slf4j.Logger LOGGER = org.slf4j.LoggerFactory.getLogger(AroundAdvice.class);
				private MDCSupport mdcSupport;

				public <T extends Annotation> AroundAdvice(final MDCSupport mdcSupport) {
					this.mdcSupport = mdcSupport;
				}

				@Override
				public Object invoke(final MethodInvocation invocation) throws Throwable {

					// 1.task 資訊 to threadlocal
					// 2.task 資訊 to mdc
					doMDC(invocation);

					try {
						LOGGER.trace("========= logback start =========");
						final Method method = invocation.getMethod();
						LOGGER.trace(
								"Call Method Name :" + method.toGenericString() + "| Args => " + Arrays.asList(invocation.getArguments()));
						return invocation.proceed();
					} finally {
						LOGGER.trace("========= logback end ============");
					}
				}

				private void doMDC(final MethodInvocation invocation) throws Exception {

					// try 反射方法 annotation.task get type => task
					// task instanceof GenericTask and 紀錄
					//        final String annotationClassName = this.annotationClass.getName();
					final String annotationClassName = invocation.getClass().getName();
					final Method method = invocation.getMethod();

					final Annotation[] annotations = method.getAnnotations();

					if (annotations != null && annotations.length > 0) {
						for (final Annotation annotation : annotations) {
							final Class<?> annotationType = annotation.annotationType();

							final Method[] annotationMethods = annotationType.getDeclaredMethods();
							boolean hasGenericTask = false;
							for (final Method annotationMethod : annotationMethods) {
								final String methodName = annotationMethod.getName();
								try {
									final Object value = annotationMethod.invoke(annotation);
									if (value instanceof GenericTask) {
										final GenericTask task = (GenericTask) value;

										// 應僅能一個 annotation 符合
										setupTask(task);
										hasGenericTask = true;
										return;
									}
								} catch (final IllegalAccessException e) {
									throw new LogbackMDCException(LogbackMDCMesg.TX_AF02_E, annotationClassName + " 呼叫 " + methodName + "異常",
											e);
								} catch (final IllegalArgumentException e) {
									throw new LogbackMDCException(LogbackMDCMesg.TX_AF04_E, annotationClassName + " 呼叫 " + methodName + "異常",
											e);
								} catch (final InvocationTargetException e) {
									throw new LogbackMDCException(LogbackMDCMesg.TX_AF05_E, annotationClassName + " 呼叫 " + methodName + "異常",
											e);
								}
							}
							// 確保有同一 task 介面，反之丟例外
							if (!hasGenericTask) {
								throw new LogbackMDCException(LogbackMDCMesg.TX_AF03_E,//
										annotationClassName + " 未實作 " + GenericTask.class.getName());
							}
						}

					}

				}

				protected void setupTask(final GenericTask task) {
					// taskCode 預設 UNKOWN，需自行填入 by method of annotation
					final String taskCode = task.getTaskCode();
					ThreadLocalUtil.setupTask(task);
					this.mdcSupport.setTaskMDC(task.getTaskCode());
					LOGGER.trace("taskCode : {} / taskName {}", taskCode, task.getTaskName());
				}
			}
		@Bean
		@ConditionalOnMissingBean
		DefaultPointcutAdvisor awTaskDefaultPointcutAdvisor(final LogbackMDCProperties logbackMDCProperties,
				final MDCSupport mDCSupport) {

			final Task task = logbackMDCProperties.getTask();
			final AspectJExpressionPointcut pointcut = new AspectJExpressionPointcut();
			pointcut.setExpression(task.getPointcutExpression());

			final DefaultPointcutAdvisor advisor = new DefaultPointcutAdvisor();
			advisor.setPointcut(pointcut);
			advisor.setAdvice(new AroundAdvice(mDCSupport));

			return advisor;
		}
		
	DynamicMethodMatcherPointcut
		https://blog.csdn.net/yangshangwei/article/details/77410891
		http://www.java2s.com/Code/Java/Spring/DynamicPointcutExample.htm