https://www.baeldung.com/spring-deferred-result

1.用途
	 於 Spring MVC 執行非同步請求程序 ( in Spring MVC to perform asynchronous request processing)

2.限制
	Servlet 3.0 中引入了非同步支持
	Spring 3.2 開始提供

3. Blocking REST Service
	@GetMapping("/process-blocking")
	public ResponseEntity<?> handleReqSync(Model model) { 
		// ...
		return ResponseEntity.ok("ok");
	}

4.Non-Blocking REST Using DeferredResult
	@GetMapping("/async-deferredresult")
	public DeferredResult<ResponseEntity<?>> handleReqDefResult(Model model) {
		LOG.info("Received async-deferredresult request");
		DeferredResult<ResponseEntity<?>> output = new DeferredResult<>();
		
		ForkJoinPool.commonPool().submit(() -> {
			LOG.info("Processing in separate thread");
			try {
				Thread.sleep(6000);
			} catch (InterruptedException e) {
			}
			output.setResult(ResponseEntity.ok("ok"));
		});
		
		LOG.info("servlet thread freed");
		return output;
	}
	
	[nio-8080-exec-6] com.baeldung.controller.AsyncDeferredResultController: Received async-deferredresult request
	[nio-8080-exec-6] com.baeldung.controller.AsyncDeferredResultController: Servlet thread freed
	[nio-8080-exec-6] java.lang.Thread : Processing in separate thread

5. DeferredResult Callbacks : completion, timeout and error callbacks
	completion
		deferredResult.onCompletion(() -> LOG.info("Processing complete"));
	
	timeout
		DeferredResult<ResponseEntity<?>> deferredResult = new DeferredResult<>(500l);
		deferredResult.onTimeout(() -> 
		  deferredResult.setErrorResult(
			ResponseEntity.status(HttpStatus.REQUEST_TIMEOUT)
			  .body("Request timeout occurred.")));

		// 模擬 timeout 超過5秒
		ForkJoinPool.commonPool().submit(() -> {
			LOG.info("Processing in separate thread");
			try {
				Thread.sleep(6000);
			} catch (InterruptedException e) {
				...
			}
			deferredResult.setResult(ResponseEntity.ok("OK")));
		});

		[nio-8080-exec-6] com.baeldung.controller.DeferredResultController: servlet thread freed
		[nio-8080-exec-6] java.lang.Thread: Processing in separate thread
		[nio-8080-exec-6] com.baeldung.controller.DeferredResultController: Request timeout occurred

	error
		deferredResult.onError((Throwable t) -> {
			deferredResult.setErrorResult(
			  ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
				.body("An error occurred."));
		});