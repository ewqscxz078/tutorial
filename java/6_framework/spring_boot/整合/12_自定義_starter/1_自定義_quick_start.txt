https://www.youtube.com/watch?v=gFz5MLFSQKQ&list=PLmOn9nNkQxJFKh2PMfWbGT7RVuMowsx-u&index=83&ab_channel=%E5%B0%9A%E7%A1%85%E8%B0%B7IT%E5%9F%B9%E8%AE%AD%E5%AD%A6%E6%A0%A1

https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#features.developing-auto-configuration.custom-starter

https://www.baeldung.com/spring-boot-custom-starter

1.這個場景需要使用的依賴是什麼
2.如何編寫自動配置

	@Configuration 		// 指定這個類是一個配置類
	@ConditionalOnXXX 	// 在指定條件成立的情況下自動配置類生效
	@AutoConfigureAfter // 指定自動配置類的順序
	@Bean 				// 給容器中增加組件

	@ConfigurationProperties // 結合相關 xxxProperties 類來綁定相關的配置
	@EnableConfigurationProperties // 讓 xxxProperties 生效加入到容器中

	自動配置類要能加載
		將需要啟動就加載的自動配置類，配置在
		META-INF/spring.factories => 後來的版本改成了 META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports
			org.springframework.boot.autoconfigure.EnableAutoConfiguration=\
			org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\
			org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\

			// 其檔案內容順序沒有直接影響，實際與 xxxxAutoConfiguration 上的相關依賴配置有關係，影響配置順序
3.模式:
啟動器(starter)
	啟動器模塊是一個空 jar文件，僅提供輔助性依賴管理，這些依賴可能用於自動裝配或著其他類庫
	專案命名規範:
		官方命名空間
			前墜: spring-boot-starter
			模式: spring-boot-starter-模塊名
			舉例: spring-boot-starter-web、
				  spring-boot-starter-actuator、
				  spring-boot-starter-jdbc、
		自定義命名空間
			後墜: -spring-boot-starter
			模式: 模塊名-spring-boot-starter
			舉例: mybatis-spring-boot-starter

	xxx-spring-boot-starter(client 引入 pom 用) -> xxx-spring-boot-autoconfigure(存放可設定化元件:常見有xxxAutoConfiguration、xxxProperties)
											可能會引用 xxx(常見含有xxxBuilder、xxxCustomizer)

	client 覆蓋方式
		by yml
		by 透過提供 @FunctionalInterface interface xxxCustomizer (xxxBuilder) 程式碼額外時做覆蓋方式
			example
				TaskExecutorCustomizer
				TaskSchedulerCustomizer

	3.1 建立專案 xxx-starter
		依賴 xxx-autoconfigure 專案
		pom.xml
			<dependencies>
				<dependency>
					<groupId>org.springframework.boot</groupId>
					<artifactId>xxx-autoconfigure</artifactId>
				</dependency>
			<dependencies>

	3.2 建立專案 xxx-autoconfigure 撰寫
		依賴基本
			pom.xml
				<dependency>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter</artifactId>
				</dependency>

				// 和該場景需要引入的其他依賴

		ex: 假設抽取出常用的 service 為例，並配置預設設定檔於 api 裡使用(也可以讓引用該場景的專案覆寫設定檔)
			建立一個 HelloService.java
				public class HelloService {

					HelloProperties helloProperties;

					public HelloProperties getHelloProperties(){
						return helloProperties;
					}

					public void setHelloProperties(HelloProperties helloProperties){
						this.helloProperties = helloProperties;
					}

					public String sayHelloAtguigu(String name){
						return helloProperties.getProfix() + "-" + name + helloProperties.getSuffix();
					}
				}

			建立一個 HelloProperties.java
				@ConfigurationProperties(prefix= "atguigu.hello")
				public class HelloProperties {
					private String prefix;
					private String suffix;

					getter/setter...
				}

			建立一個 HelloServiceAutoConfiguration.java
				@Configuration
				@ConfigurationOnWebApplication // web 應用才生效
				@EnableAutoConfiguration(HelloProperties.class) // 讓 HelloProperties 生效並自動加入到容器中
				public class HelloServiceAutoConfiguration {

					@AutoWired
					HelloProperties helloProperties;

					@ConditionalOnMissingBean(HelloService.class) // 容器不存在該組件才導入
					@Bean
					public HelloService helloService(){
						HelloService helloService = new HelloService();
						helloService.setHelloProperties(helloProperties);
						return helloService;
					}
				}

			新增 resources/META-INF/spring.factories
				org.springframework.boot.autoconfigure.EnableAutoConfiguration=\
				{HelloServiceAutoConfiguration.package路徑}

			test
				xxx-starter 專案 => maven install // to local
				xxx-autoconfigurer 專案 => maven install // to local

				create new 專案
					1.依賴 spring-boot-starter-web
					2.依賴 自訂義 xxx-starter
					3.撰寫個 controller 確認
						@RestController
						public class HelloController{
							@AutoWired
							HelloService helloService;

							@GetMapping("/hello")
							public String hello(){
								return helloService.sayHelloAtguigu( "haha" );
							}
						}
					4.resources/application.properties
						atguigu.hello.prefix=我是前墜
						atguigu.hello.suffix=我是後墜
					5.localhost:8080/hello
						我是前墜-haha我是後墜



https://www.amitph.com/spring-boot-nested-configuration-properties/
巢狀配置方式



預設自動化配置常見寫法
	綁定 properties 若有設定
		LdapAutoConfiguration
			@AutoConfiguration
			@ConditionalOnClass(ContextSource.class)
			@EnableConfigurationProperties(LdapProperties.class)
			public class LdapAutoConfiguration {
				@Bean
				@ConditionalOnMissingBean
				public LdapContextSource ldapContextSource(LdapProperties properties, Environment environment,
						ObjectProvider<DirContextAuthenticationStrategy> dirContextAuthenticationStrategy) {
					LdapContextSource source = new LdapContextSource();
					....
					PropertyMapper propertyMapper = PropertyMapper.get().alwaysApplyingWhenNonNull();
					propertyMapper.from(properties.getUsername()).to(source::setUserDn);
					....
					propertyMapper.from(properties.getBaseEnvironment())
						.to((baseEnvironment) -> source.setBaseEnvironmentProperties(Collections.unmodifiableMap(baseEnvironment)));
					return source;
				}
