https://www.baeldung.com/spring-data-jpa-query
	basic

https://blog.wuwii.com/jpa-specification.html
	特定 Specification 查詢 與 Criteria 查詢(提供不寫sql 模式純粹call api 方式)

https://medium.com/@AlexanderObregon/optimizing-queries-with-query-annotation-in-spring-data-jpa-fe213c8a60a

六大類呼叫方式
	1.Repository 內建 JPA API
		假設
			public interface UserRepository extends JpaRepository<User,Integer>{
			}

			1.若要交易管理
				userRepository.save(entity) // from JpaRepository

			2.不用交易管理直接寫入
				userRepository.saveAndFlush(entity)  //from JpaRepository

	2.QueryByExampleExecutor
		ref https://www.baeldung.com/spring-data-query-by-example
		根據實體的屬性值進行查詢，而不需要手動撰寫查詢語句
		適合的場景
			1.簡單查詢，靈活條件： 
				當你有一個實體對象，並希望根據其多個屬性進行查詢時
				而不需要手動編寫複雜的 JPQL 或 Criteria 查詢
			2.動態查詢需求：
				當查詢條件不是固定的，而是根據用戶輸入或動態條件進行變化時，使用 QueryByExampleExecutor 非常方便。
				例如，在一個搜索表單中，用戶可能會根據多個不同的欄位進行搜索，但不是每個欄位都會被填寫。
				QueryByExampleExecutor 可以根據用戶輸入自動生成查詢，省去手動處理動態查詢的麻煩。

			3.避免複雜的查詢邏輯：
				如果項目中需要經常根據對象的不同屬性進行查詢，QueryByExampleExecutor 可以幫助你減少大量手動編寫 JPQL 或 Criteria API 的工作，簡化開發流程。

			4.無需手寫查詢語句的簡單匹配查詢： 
				對於一些查詢場景，特別是條件較為靈活、動態的情況，QueryByExampleExecutor 能夠讓你快速進行簡單的查詢匹配（例如等值匹配），
				而不需要額外編寫 repository 方法或 SQL。
		不適合的場景
			複雜的關聯查詢： 
				如果你需要進行跨實體的關聯查詢或更複雜的條件（如子查詢、分組、排序等），QueryByExampleExecutor 可能不太適合，
				這時應該考慮使用 JPQL、Criteria API 或 Spring Data JPA 提供的其他查詢機制。

			精確控制查詢的效率： 
				由於 QueryByExampleExecutor 是基於實體範例的自動生成查詢邏輯，對於一些性能敏感的應用場景，
				你可能會希望對查詢進行更精細的控制（例如，使用原生 SQL 或優化的 JPQL 查詢），這樣可以避免自動生成查詢可能導致的效率問題。

		使用 QueryByExampleExecutor 的好處
			1.避免編寫動態 JPQL 查詢： 
				在動態查詢中，傳統做法是使用 Criteria API 或拼接動態 JPQL 語句，但這樣會導致程式碼變得冗長且難以維護。
				QueryByExampleExecutor 可以通過提供一個帶有查詢條件的實體範例來自動生成查詢邏輯，減少了繁瑣的查詢語句編寫
			2.自動處理屬性判斷： 
				QueryByExampleExecutor 會根據範例實體中的屬性來決定哪些屬性應該被包括在查詢中，
				避免了手動處理是否為 null 或默認值的邏輯
			3.結合 Matcher 擴展靈活性： 
				Spring Data 提供了 ExampleMatcher，可以讓你對查詢的匹配行為進行進一步配置。
				例如，你可以控制是否忽略大小寫、是否進行部分匹配（如前綴、後綴匹配）等。
					ExampleMatcher matcher = ExampleMatcher.matching()
										 .withIgnoreCase()
										 .withMatcher("username", ExampleMatcher.GenericPropertyMatchers.startsWith());
					Example<User> example = Example.of(probe, matcher);
					List<User> users = userRepository.findAll(example);
			4.與 Spring Data JPA 無縫整合： 
				QueryByExampleExecutor 與 Spring Data JPA 原生的 Repository 機制結合使用，讓查詢功能變得更自然且易於使用。
				你只需讓你的 repository 繼承 QueryByExampleExecutor，即可輕鬆使用這種查詢方式。

	3.Select_Method_Name_Resolution
		透過 method name 直接暗示動態轉換 sql，省去寫簡單的 SQL
			findByXXX
				findByXAndYorZOrderByA(X,Y,Z) // 暗示宣告 jpa 自動轉

			countByXXX
				ref https://www.baeldung.com/spring-data-jpa-row-count
					long countByUsername(String username);
					long countByPermission(Permission permission);
					long countByPermissionAndCreatedOnGreaterThan(Permission permission, Timestamp ts)
			deleteByXXX
	4.@Query
		適用場景：
			1.1.查詢結構相對固定。
			1.2.查詢語句比較簡單。
			1.3.不需要動態構建查詢。

		@Query 使用自訂 JPQL（Java Persistence Query Language） 或 SQL 查詢
			1.使用 JPQL
				佔位符號方式
					import org.springframework.data.jpa.repository.Query;
					import org.springframework.data.repository.query.Param;

					public interface YourEntityRepository extends JpaRepository<YourEntity, Long> {

						@Query("SELECT e FROM YourEntity e WHERE e.yourProperty = ?1")
						List<YourEntity> findByYourProperty(String yourValue);

						// 使用命名參數
						@Query("SELECT e FROM YourEntity e WHERE e.yourProperty = :yourValue")
						List<YourEntity> findByYourPropertyNamed(@Param("yourValue") String yourValue);
					}
			2.使用 原生 SQL
				@Query(value = "SELECT * FROM employees WHERE last_name = :lastName", nativeQuery = true)
				List<Employee> findCustomByLastName(@Param("lastName") String lastName);

	5.Specification 和 Criteria API
		適用場景：
			1.1.需要動態構建查詢。
			1.2.查詢條件較為複雜，需要靈活處理。
			1.3.需要在運行時決定查詢條件。

		透過 自訂義多條件 分頁查詢 Specification
			https://juejin.cn/post/6985573675764285477
				詳述
			https://blog.csdn.net/john_1023/article/details/118087600
			https://www.cnblogs.com/summerday152/p/14182138.html
				簡易

	6.Criteria API
		適用場景：
			1.1.需要高度自定義查詢。
			1.2.查詢邏輯複雜且需要靈活處理。
			1.3.需要動態構建查詢但不想使用 Specification。
			1.4.有使用資料庫專屬函數 api
			1.5.不被專屬 repository 限定 entity/bean 綁住問題
			1.6.條件式更新、刪除或新增
		待補對應案例 TODO
			EntityManager.createQuery(JPQL)
				主要操作實體，與實體模型緊密結合。
				限制於 JPQL 的功能，對特定資料庫的函數支持有限。
			EntityManager.createNativeQuery(原生 SQL)
				直接操作數據庫表，允許使用所有特定資料庫的功能和函數。
				更加靈活，適合需要使用特定 SQL 功能的情況。


jpa 沒有 update
	https://blog.csdn.net/liu_rockefeller/article/details/97282130
		1.JpaRepository.save
			jpa 會依據 entity Id 有無存在
				若存在則 insert
				不存在則 update
				所以 jpa JpaRepository 僅提供 save 名稱，含有新增或更新的意思
		2.手寫 update sql
			https://www.baeldung.com/spring-data-jpa-modifying-annotation
			https://stackoverflow.com/questions/11881479/how-do-i-update-an-entity-using-spring-data-jpa
			// @Query 可以 update、delete
			@Modifying
			@Query("update entity e set e.xxx = :xxx where e.yyy = :yyy")
			int updateField(@Param("xxx") String xxx, @Param("yyy") String yyy);
					或
			@Modifying
			@Query("update table_name set columnA = :xxx where columnB = :yyy", natiiveQuery = true)
			int updateField(@Param("xxx") String xxx, @Param("yyy") String yyy);
					注意宣告 @Modifying 僅能回傳 void or int/Integer