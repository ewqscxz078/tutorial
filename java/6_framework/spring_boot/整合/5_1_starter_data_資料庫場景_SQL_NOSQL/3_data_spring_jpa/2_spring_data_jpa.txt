https://www.baeldung.com/the-persistence-layer-with-spring-data-jpa

1.引入 spring-boot-starter-data-jpa
2.配置文件打印sql 語句
3.創建 Entity 標註 JPA 註解
4.創建 Repository 接口繼承 JpaRepository
5.測試方法


Repository
	RevisionRepository
	CrudRepository
		PagingAndSortingRepository
			JpaRepository

1.application.yml
	撰寫 dataSource 資料庫來源設定
	spring:
	  dataSource:
	    url: jdbc:mysql://localhost/jpa
		username:root
		password:123456
		driver-class-name: com.mysql.jdbc.Driver


2.編寫一個實體類(bean)和資料表對應進行映射
	src/main/java/.../entity/

		@Entity // 告訴JPA這是一個實體類
		@Table(name= "tbl_user") // 指定對應資料庫的 table name，若省略默認就是user
		public class user{

			@Id // 這是一個主鍵
			@GeneratedValue(strategy = GeneratedType.IDENTITY) // 自增主鍵
			private Integer id;

			@Column(name = "last_name", length = 50) // 這是和資料表對應的一個列
			private String lastName;

			@Column // 省略默認就是屬性名
			private String email
		}

3.編寫一個 DAO 接口來操作實體類對應的資料表(Repository)
	src/main/java/.../repository/
		繼承 JpaRepository 來完成資料庫的操作
		private interface UserRepository extends JpaRepository<User,Integer>{

		}

4.基本配置
	application.yml
		spring:
		  jpa:
			show-sql: true # console顯示 sql 預設 false
			hibernate:
			  #ddl-auto: # 更新或創建資料表 : update 預設 none
			  use-new-id-generator-mappings: false # 使用 hiberate 4 預設 id 生成策略 / 預設 true
			properties
			  hibernate:
			    format_sql: true # real pretty sql format
		logging.level.org.hibernate.type: trace # 可以看到 sql 佔位符號的實際值
5.
	src/main/java/.../controller/

		@RestController
		public class UserController {
			@Autowired
			UserRepository userRepository;

			@GetMapping("/user/{id}")
			public User getUser(@PathVariable("id") Integer id){
				User user = userRepository.findOne(id);
				return user;
			}
			@GetMapping("/user")
			public User insertUser(User user){
				User user = userRepository.save(user);
				return user;
			}
		}
6. browser test
	http://localhost:8080/user/1

	http://localhost:8080/user?lastName=lisi&email=aa


7. 預設 spring boot jpa 會自動掃 @Repository、@Entity 讓其 spring bean ioc 納管
	若 相關 @Repository 在非預期預設位置，想自已指定掃描變 spring bean ioc 納管
		@EnableJpaRespositories(basePackages = "你的 Repository package 路徑")

	若 相關 @Entity 在非預期預設位置，想自已指定掃描變 spring bean ioc 納管
		@EntityScan(basePackages = "你的 Entity package 路徑")

8. JPA 寫 SQL 方式
	1.JpaRepository 已存在 api
		save
	2.方法名解析 Method Name Resolution
		findByXXXX
			findByXAndYorZOrderByA(X,Y,Z) // 暗示宣告 jpa 自動轉換
		deleteByXXXX
		countByXXXX
	3.@Query with entity SQL
	4.@Query with native SQL
	5.@Query 撈取部分欄位
		1.with projections
		2.select part Columns and return Object[]
		3.select 單一欄位 return String/int/long
		4.@EntityGraph
		5.自訂 bean 並且在 @Query 撈取欄位寫 new yourPackagePath.CustomBean(建構參數...)
	6.條件式查詢 Specification
		單一entity : JpaSpecificationExecutor by Specification
			(root, criteriaQuery, criteriaBuilder) -> {
				....
			}
		多個 entity join 與取得部分欄位至DTO/VO : EntityManager with createTupleQuery、createQuery 後的 CriteriaQuery