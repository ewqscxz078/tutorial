https://www.baeldung.com/spring-data-jpa-query
	basic

https://blog.wuwii.com/jpa-specification.html
	特定 Specification 查詢 與 Criteria 查詢(提供不寫sql 模式純粹call api 方式)

https://medium.com/@AlexanderObregon/optimizing-queries-with-query-annotation-in-spring-data-jpa-fe213c8a60a

三大類呼叫 JPA API
	1.@Query 於 repository 注解
		適用場景：
			1.1.查詢結構相對固定。
			1.2.查詢語句比較簡單。
			1.3.不需要動態構建查詢。

		假設
			public interface UserRepository extends JpaRepository<User,Integer>{
			}

			1.若要交易管理
				UserRepository.save(entity)

			2.不用交易管理直接寫入
				UserRepository.saveAndFlush(entity)  //from JpaRepository.api

		@Query 使用自訂 JPQL（Java Persistence Query Language） 或 SQL 查詢
			使用 JPQL
				佔位符號方式
					import org.springframework.data.jpa.repository.Query;
					import org.springframework.data.repository.query.Param;

					public interface YourEntityRepository extends JpaRepository<YourEntity, Long> {

						@Query("SELECT e FROM YourEntity e WHERE e.yourProperty = ?1")
						List<YourEntity> findByYourProperty(String yourValue);

						// 使用命名參數
						@Query("SELECT e FROM YourEntity e WHERE e.yourProperty = :yourValue")
						List<YourEntity> findByYourPropertyNamed(@Param("yourValue") String yourValue);
					}
			使用 原生 SQL
				@Query(value = "SELECT * FROM employees WHERE last_name = :lastName", nativeQuery = true)
				List<Employee> findCustomByLastName(@Param("lastName") String lastName);

	2.Specification 和 Criteria API
		適用場景：
			1.1.需要動態構建查詢。
			1.2.查詢條件較為複雜，需要靈活處理。
			1.3.需要在運行時決定查詢條件。

	3.Criteria API
		適用場景：
			1.1.需要高度自定義查詢。
			1.2.查詢邏輯複雜且需要靈活處理。
			1.3.需要動態構建查詢但不想使用 Specification。
			1.4.有使用資料庫專屬函數 api
			1.5.不被專屬 repository 限定 entity/bean 綁住問題
			1.6.條件式更新、刪除或新增
		待補對應案例 TODO
			EntityManager.createQuery(JPQL)
				主要操作實體，與實體模型緊密結合。
				限制於 JPQL 的功能，對特定資料庫的函數支持有限。
			EntityManager.createNativeQuery(原生 SQL)
				直接操作數據庫表，允許使用所有特定資料庫的功能和函數。
				更加靈活，適合需要使用特定 SQL 功能的情況。

透過 自訂義多條件 分頁查詢 Specification
	https://juejin.cn/post/6985573675764285477
		詳述
	https://blog.csdn.net/john_1023/article/details/118087600
	https://www.cnblogs.com/summerday152/p/14182138.html
		簡易

jpa 沒有 update
	https://blog.csdn.net/liu_rockefeller/article/details/97282130
		1.JpaRepository.save
			jpa 會依據 entity Id 有無存在
				若存在則 insert
				不存在則 update
				所以 jpa JpaRepository 僅提供 save 名稱，含有新增或更新的意思
		2.手寫 update sql
			https://www.baeldung.com/spring-data-jpa-modifying-annotation
			https://stackoverflow.com/questions/11881479/how-do-i-update-an-entity-using-spring-data-jpa
			// @Query 有 update、delete
			@Modifying
			@Query("update entity e set e.xxx = :xxx where e.yyy = :yyy")
			int updateField(@Param("xxx") String xxx, @Param("yyy") String yyy);

Q&A
	Q: 嘗試使用 repository.save(entity)
		出現錯誤
			com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Table 'test.hibernate_sequence' doesn't exist

	A:
		https://stackoverflow.com/questions/32968527/hibernate-sequence-doesnt-exist
			application.yml
				spring.jpa.hibernate.use-new-id-generator-mappings: false # 等於原本 hibernate 4 預設 id 生成策略
