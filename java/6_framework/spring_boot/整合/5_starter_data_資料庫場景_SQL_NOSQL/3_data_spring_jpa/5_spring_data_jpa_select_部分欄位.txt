https://stackoverflow.com/questions/22007341/spring-jpa-selecting-specific-columns

https://www.w3docs.com/snippets/java/spring-jpa-selecting-specific-columns.html
	1.使用 @Query 
		指定 entity 部分欄位轉換到 Object[]
			@Repository
			public interface UserRepository extends JpaRepository<User, Long> {
				@Query("SELECT u.id, u.username FROM User u")
				List<Object[]> findAllProjectedBy();
			}

	2.使用 @EntityGraph
		// return a list of User entities, but only the id and username attributes will be fetched from the database
			@Repository
			public interface UserRepository extends JpaRepository<User, Long> {
				@EntityGraph(attributePaths = {"id", "username"})
				List<User> findAll();
			}

https://www.javaguides.net/2023/08/spring-data-jpa-specific-columns.html
	3.另外定義 bean 並搭配 @Query
		原始 entity
			@Entity
			public class Persion {
				@Id
				@GenerateValue(strategy = GenerationType.IDENTITY)
				private Long id;
				
				private String firstName;
				private String lastName;
				private Date dateOfBirth;
				// getter ,setter, etc
			}
		部分欄位 entity
			public class PersionLite {
				private final String firstName;
				private final String lastName;
				
				public PersionLite(String firstName,String lastName){
					this.firstName = firstName;
					this.lastName = lastName;
				}
				// getter
			}
		Repository
			public interface PersionRepository extends JpaRepository<Persion, Long> {
				@Query("select new yourPackagePath.PersionLite(p.firstName, p.lastName) from Persion P")
				List<PersionLite> findAllNames();
			}

https://www.baeldung.com/spring-data-jpa-projections
或 ref charGPT
	4.JPA projections
		使用方法名稱慣例：根據方法名稱慣例，您可以在Repository介面中定義一個方法，並使用特定的命名規則來指定要查詢的欄位。
			指定了要查詢的欄位field1和field2。請注意，YourEntityProjection是一個自定義的投影介面，用於映射查詢結果
				@Entity
				public class Address {
				 
					@Id
					private Long id;
				 
					@OneToOne
					private Person person;
					
					....
					
					private String zipCode;

					// getters and setters
				}

				public interface AddressView {
					String getZipCode();
				}
				
				public interface AddressRepository extends Repository<Address, Long> {
					List<AddressView> getAddressByState(String state);
				}
