========================================================================================================================
================================= ref ==================================================================================
https://medium.com/@heather_programming/spring-security-%E5%B8%B3%E8%99%9F%E5%AF%86%E7%A2%BC%E9%A9%97%E8%AD%89-98a4bfd03abe
========================================================================================================================

1.實作 UserDetails : 讓 spring security 操作 登入使用者詳細資訊的 bean
	public class MyUser implements UserDetails {

		private final MemberPo memberPo;

		public MyUser(MemberPo memberPo) {
			this.memberPo = memberPo;
		}

		@Override
		public List<SimpleGrantedAuthority> getAuthorities() {
			List<SimpleGrantedAuthority> authorities =
				Arrays.stream(memberPo.getAuthority().split(",")).map(
				SimpleGrantedAuthority::new).collect(Collectors.toList());
			return authorities;
		}

		@Override
		public String getPassword() {
			return memberPo.getPassword();
		}

		@Override
		public String getUsername() {
			return memberPo.getUsername();
		}

		public String getEmail() {
			return memberPo.getEmail();
		}

		@Override
		public boolean isAccountNonExpired() {
			return true;
		}

		@Override
		public boolean isAccountNonLocked() {
			return true;
		}

		@Override
		public boolean isCredentialsNonExpired() {
			return true;
		}

		@Override
		public boolean isEnabled() {
			return true;
		}
	}
2.實作 UserDetailsService 如何用帳號取得 登入使用者詳細資訊的 bean
	@Service
	public class MyUserDetailsService implements UserDetailsService {

		@Autowired
		private MemberRepo memberRepo;

		@Override
		public MyUser loadUserByUsername(String username)
					  throws UsernameNotFoundException {
			MemberPo memberPo = memberRepo.findByUsername(username);
			return new MyUser(memberPo);
		}

3. Configuration 配置設定 : SecurityFilterChain
	@Configuration
	@EnableWebSecurity
	public class SecurityConfig {

		@Bean
		public SecurityFilterChain securityFilterChain(HttpSecurity http)
			   throws Exception {
			return http
				.authorizeRequests()
				.antMatchers(HttpMethod.GET, "/getEmail/*").authenticated()
				.antMatchers(HttpMethod.GET, "/admin/**").hasAuthority("ADMIN")
				.antMatchers(HttpMethod.GET, "/user/**").hasAuthority("USER")
				.antMatchers(HttpMethod.GET, "/guest").permitAll()
				.anyRequest().authenticated()
				.and()
				.formLogin()
				.and()
				.csrf().disable()
				.build();
		}
	}

4.設定驗證的方法 : AuthenticationManager
	...
	public class SecurityConfig {
		原本上面
		@Bean
		SecurityFilterChain securityFilterChain(HttpSecurity http)
			   throws Exception {
			....
			.authenticationManager(authenticationManager())
			...
		}
		@Bean
		AuthenticationManager authenticationManager() {
			return new ProviderManager(daoAuthenticationProvider());
			// 若有多個驗證方式，可使用：
			// List.of(daoAuthenticationProvider(), customAuthenticationProvider())
		}

		@Bean
		DaoAuthenticationProvider daoAuthenticationProvider() {
			DaoAuthenticationProvider authenticationProvider
									  = new DaoAuthenticationProvider();
			authenticationProvider.setUserDetailsService(myUserDetailsService);
			authenticationProvider.setPasswordEncoder(new BCryptPasswordEncoder());
			return authenticationProvider;
		}