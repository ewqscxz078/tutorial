========================================================================================================================
================================= ref ==================================================================================
========== https://docs.spring.io/spring-security/reference/5.7/servlet/authentication/session-management.html =========
========================================================================================================================
1.Force Eager Session Creation : 建立 session 方式
	@Bean
	public SecurityFilterChain filterChain(HttpSecurity http) {
		http
			.sessionManagement(session -> session
				.sessionCreationPolicy(SessionCreationPolicy.ALWAYS)
			);
		return http.build();
	}

	IF_REQUIRED（預設）：適合傳統的有狀態 Web 應用，會根據需要創建 session。
	ALWAYS：適合重度依賴 session 的應用。
	NEVER：適合主要無狀態，但需要手動創建 session 的混合場景。
	STATELESS：適合純無狀態的 REST API 應用，不需要 session 支持。

2.Detecting Timeouts
	@Bean
	public SecurityFilterChain filterChain(HttpSecurity http) {
		http
			.sessionManagement(session -> session
				.invalidSessionUrl("/invalidSession.htm")
			);
		return http.build();
	}
	@Bean
	public SecurityFilterChain filterChain(HttpSecurity http) {
		http
			.logout(logout -> logout
				.deleteCookies("JSESSIONID")
			);
		return http.build();
	}
3.Concurrent Session Control
	@Bean
	public HttpSessionEventPublisher httpSessionEventPublisher() {
		return new HttpSessionEventPublisher();
	}
	// 限制只能一個使用者登入
		@Bean
		public SecurityFilterChain filterChain(HttpSecurity http) {
			http
				.sessionManagement(session -> session
					.maximumSessions(1) 
				);
			return http.build();
		}
	// 防止多個瀏覽器登入相同使用者第二次
		@Bean
		public SecurityFilterChain filterChain(HttpSecurity http) {
			http
				.sessionManagement(session -> session
					.maximumSessions(1)
					//.maxSessionsPreventsLogin(true)
					// 預設 false 第二次已登入的人會踢掉第一次已登入為登出的人
					// true 代表 無法超過 session 已登入的次數
				);
			return http.build();
		}

	若 maximumSessions != null 
		則預設 SessionManagementConfigurer.configure 會協助建立 ConcurrentSessionFilter
	

4.Session Fixation Attack Protection
	控制 session 固定保護策略
		session 固定攻擊（Session Fixation Attack）是一種利用 session ID 劫持用戶 session 的攻擊方式。sessionFixation 提供了幾種不同的保護策略來防止這類攻擊。
			1.migrateSession()（預設）: 
				當用戶成功登入時，創建一個新的 session，並將舊的 session 屬性遷移到新 session。
			2.none(): 
				不執行任何 session 保護措施，僅用於不需要 session 固定保護的場景。
			3.newSession(): 
				用戶登入時創建一個全新的 session，且不保留任何原先 session 的屬性。
			4.changeSessionId(): 
				使用 Servlet 規範中的 changeSessionId() 方法更改 session ID，適用於 Servlet 3.1+ 的應用。

	一般建議使用 migrateSession() 
		這是 Spring Security 的預設配置，兼顧安全性和 session 屬性的保留。
	高安全性需求選擇 newSession()
		適合敏感數據或要求高度隔離的場景。
	Servlet 3.1+ 環境可考慮使用 changeSessionId()
		在保持 session 屬性不變的情況下改變 session ID。
	無狀態應用選擇 none()
		適用於不需要 session 的 REST API 等場景。
	
	預設 5.7.11 自動配置使用
		SessionManagementConfigurer 當如果未配置 sessionManagement.sessionAuthenticationStrategy()
			則會預設使用 ChangeSessionIdAuthenticationStrategy
				private static SessionAuthenticationStrategy createDefaultSessionFixationProtextionStrateg(){
					return new ChangeSessionIdAuthenticationStrategy();
				}
	
5.SessionManagementFilter

6.SessionAuthenticationStrategy
	自訂 session 驗證策略；通常不用特別配置因為預設總共會有 
		當 maximumSessions != null
			CsrfAuthenticationStrategy
			ConcurrentSessionControlAuthenticationStrategy
			+ 使用者若有設定 sessionAuthenticationStrategy(...);
				若使用者無設定則預設設定 sessionFixationAuthenticationStrategy
			RegisterSessionAuthenticationStrategy
		反之
			+ 使用者若有設定 sessionAuthenticationStrategy(...);
				若使用者無設定則預設設定 sessionFixationAuthenticationStrategy
	http.sessionManagement()
			.sessionAuthenticationStrategy(new CustomSessionAuthenticationStrategy());
	
7.Concurrency Control

========================================================================================================================
===================================================== 範例 =============================================================
========================================================================================================================
// session 管理需要
@Bean
public HttpSessionEventPublisher httpSessionEventPublisher() {
	return new HttpSessionEventPublisher();
}

// 管理用戶 session 需要
@Bean
public SessionRegistry sessionRegistry() {
	return new SessionRegistryImpl();
}

http.sessionManagement(session -> session
		//.sessionCreationPolicy(SessionCreationPolicy.IF_REQUIRED)) // default
		//.sessionAuthenticationStrategy(new CustomSessionAuthenticationStrategy()) // 通常不用特別設定，預設的策略就足夠
		.invalidSessionUrl("/session-invalid") //
			觸發場景：當用戶的 session 無效時，會觸發 invalidSessionStrategy。無效 session 通常是指以下幾種情況：
				1.非法 session ID：用戶的 session ID 並非合法的 ID，例如使用過期或偽造的 session ID 來嘗試訪問。
				2.失效的 session ID：用戶曾經登入，但由於某些原因（如 session ID 過期或被清除），導致 session 不再有效。
				3.服務器端 session 失效：例如服務器重啟或 session 被手動清除，導致 session ID 不再有效。
		// .invalidSessionStrategy(InvaildSessionStrategy)
			// 若僅設定 invalidSessionUrl 無特別設定 expiredSessionStrategy 則預設會 new SimpleRedirectSessionInformationInvalidStrategy(invalidSessionUrl)

		.maximumSessions(1) //
		.expriedUrl("/session-expried")
			觸發場景：當用戶的 session 因超過時限或達到最大登入數量而過期時，會觸發 expiredSessionStrategy。這通常出現在以下情況：
				1.session 被新的登入頂替（通常用於限制同一帳號的同時登入數量）。
		// .expiredSessionStrategy(SessionInformationExpiredStrategy) 

		.sessionRegistry(sessionRegistry())          // 使用 SessionRegistry 管理 session
	);

========================================================================================================================
===================================================== 備註 =============================================================
========================================================================================================================
可搭配 yml 設定 session 多久timeout 測試
	server:
	  servlet:
		session:
		  timeout: 30s #10m 

當 csrf 未特別設定 sessionAuthicationStrategy 
	則預設會使用 new CsrfAuthenticationStrategy() 經 addSessionAuthenticationStrategy(sessionAuthicationStrategy)
		加到 sessionManagementConfigurer 
			private SessionAuthenticationStrategy getSessionAuthenticationStrategy(H http){
				....
				List<SessionAuthenticationStrategy> delegateStrategies = this.sessionAuthicationStrategy
				....
			}

invalidSessionUrl 和 authenticationEntryPoint 定位類似的差異
	invalidSessionUrl：用於處理特定情況下的無效 session，例如：
		1.session ID 無效或過期。
		2.用戶有一個 session，但該 session 不再有效（可能由於長時間未活動等原因）。
		在這種情況下，invalidSessionUrl 可以提供一個專門的處理頁面，向用戶顯示「您的 session 無效，請重新登入」之類的消息。

	authenticationEntryPoint：用於處理所有未經認證的訪問。例如：
		1.用戶尚未登入，沒有 session 嘗試訪問受保護的資源。
		2.在 REST API 中，返回 401 狀態碼而不是重定向到登入頁面。