========================================================================================================================
================================= ref ==================================================================================
官網
	https://docs.spring.io/spring-security/reference/5.8/features/authentication/password-storage.html
========================================================================================================================

Password Storage
	PasswordEncoder 介面(自適應單向函數介面)
		1.主要用於加密用戶密碼或敏感資料
		2.用於執行密碼的單向轉換，以安全地儲存密碼
		3.對資料庫進行身份驗證的憑證時，它並不適用。
			自適應單向函數：
				自適應單向函數每次加密同樣的明文和相同的鹽值（如果使用了鹽值）時，結果是一樣的。也就是說，相同的輸入產生相同的輸出。這使得它們可用於進行身份驗證，因為兩個相同的密碼會產生相同的加密結果。
				但是，自適應單向函數的加密結果對於同樣的輸入和不同的鹽值是不同的。這是為了防止彩虹表攻擊，即攻擊者事先計算出所有可能的輸入和對應的加密結果。
				對稱加密：
			對稱加密:
				每次使用相同的密鑰加密同樣的明文時，結果確實是一樣的。解密同樣也需要使用相同的密鑰才能得到原始的明文。

DelegatingPasswordEncoder
	Spring Security 5.0之前，預設的PasswordEncoder是NoOpPasswordEncoder，它需要純文字密碼。
	提供兼容舊系統新系統密碼編碼的處理

	PasswordEncoder passwordEncoder = PasswordEncoderFactories.createDelegatingPasswordEncoder();
		預設使用 BCrypt : BCryptPasswordEncoder
			從其方法內得知
				String encodingId = "bcrypt";
				....
				return new DelegatingPasswordEncoder(encodingId, encoders);

	custom instance
		String idForEncode = "bcrypt";
		Map encoders = new HashMap<>();
		encoders.put(idForEncode, new BCryptPasswordEncoder());
		encoders.put("noop", NoOpPasswordEncoder.getInstance());
		encoders.put("pbkdf2", Pbkdf2PasswordEncoder.defaultsForSpringSecurity_v5_5());
		encoders.put("pbkdf2@SpringSecurity_v5_8", Pbkdf2PasswordEncoder.defaultsForSpringSecurity_v5_8());
		encoders.put("scrypt", SCryptPasswordEncoder.defaultsForSpringSecurity_v4_1());
		encoders.put("scrypt@SpringSecurity_v5_8", SCryptPasswordEncoder.defaultsForSpringSecurity_v5_8());
		encoders.put("argon2", Argon2PasswordEncoder.defaultsForSpringSecurity_v5_2());
		encoders.put("argon2@SpringSecurity_v5_8", Argon2PasswordEncoder.defaultsForSpringSecurity_v5_8());
		encoders.put("sha256", new StandardPasswordEncoder());

		PasswordEncoder passwordEncoder = new DelegatingPasswordEncoder(idForEncode, encoders);

Password Storage Format
	general format
		{id}encodedPassword
		id 是用來尋找應使用哪個 PasswordEncoder 的標識符，encodedPassword 是所選 PasswordEncoder 的原始編碼密碼。
		id 必須位於密碼的開頭，以 { 開頭並以 } 結尾。
		如果找不到 id，則 id 將為空。
		例如，以下可能是使用不同 id 編碼的密碼清單。 所有的原始密碼都是「password」。
			{bcrypt}$2a$10$dXJ3SW6G7P50lGmMkkmwe.20cQQubK3.HZWzG3YB1tlRy.fqvM/BG
				對應 BCryptPasswordEncoder
			{noop}password
				對應 NoOpPasswordEncoder
			{pbkdf2}5d923b44a6d129f3ddf3e3c8d29412723dcbde72445e8ef6bf3b508fbf17fa4ed4d6b99ca763d8dc
				對應 Pbkdf2PasswordEncoder
			{scrypt}$e0801$8bWJaSu2IKSn9Z9kM+TPXfOc/9bdYSrN1oD9qfVThWEwdRTnO7re7Ei+fUZRJ68k9lTyuTeUp4of4g24hHnazw==$OAOec05+bXxvuu/1qZ6NUR+xQYvYv7BeL1QxwRpY5Pc=
				對應 SCryptPasswordEncoder
			{sha256}97cde38028ad898ebc02e690819fa220e88c62e0699403e94fff291cfffaf8410849f27605abcbc0
				對應 StandardPasswordEncoder

Password Matching
	預設透過 {id} 讓其 match 使用了哪種自適應單向函數
		bcrypt、noop、pbkdf2、scrypt、sha256
	若要自訂 match則可透過
		DelegatingPasswordEncoder.setDefaultPasswordEncoderForMatches(PasswordEncoder)

測試用: 不適合正式用
	建構 user
		User user = User.withDefaultPasswordEncoder()
		  .username("user")
		  .password("password")
		  .roles("user")
		  .build();
		System.out.println(user.getPassword());
		// {bcrypt}$2a$10$dXJ3SW6G7P50lGmMkkmwe.20cQQubK3.HZWzG3YB1tlRy.fqvM/BG

	multiple users
		UserBuilder users = User.withDefaultPasswordEncoder();
		User user = users
		  .username("user")
		  .password("password")
		  .roles("USER")
		  .build();
		User admin = users
		  .username("admin")
		  .password("password")
		  .roles("USER","ADMIN")
		  .build();

正式用模式
	 PasswordEncoder encoder = PasswordEncoderFactories.createDelegatingPasswordEncoder();
	 // outputs {bcrypt}$2a$10$dXJ3SW6G7P50lGmMkkmwe.20cQQubK3.HZWzG3YB1tlRy.fqvM/BG
	 // remember the password that is printed out and use in the next step
	 System.out.println(encoder.encode("password"));

	 UserDetails user = User.withUsername("user")
		 .password("{bcrypt}$2a$10$dXJ3SW6G7P50lGmMkkmwe.20cQQubK3.HZWzG3YB1tlRy.fqvM/BG")
		 .roles("USER")
		 .build();


Encode with Spring Boot CLI
	spring encodepassword password
	{bcrypt}$2a$10$X5wFBtLrL/kHcmrOGGTrGufsBX8CJ0WpQpF3pgeuxBB/H73BK1DW6

BCryptPasswordEncoder 演示
	// Create an encoder with strength 16
	BCryptPasswordEncoder encoder = new BCryptPasswordEncoder(16);
	String result = encoder.encode("myPassword");
	assertTrue(encoder.matches("myPassword", result));

spring secrity 4.x 轉移到 5.x以上，若當初使用純密碼模式時
	@Bean
	public static PasswordEncoder passwordEncoder() {
		return NoOpPasswordEncoder.getInstance();
	}
	但建議應該改成有保護密碼的預設模式 DelegatingPasswordEncoder


Change Password Configuration
	預設
		http.passwordManagement(Customizer.withDefaults())
	應改成自己改變密碼 url 的方式
		當到 /.well-known/change-password 介面觸發更改密碼到 will redirect to /update-password
		http.passwordManagement((management) -> management
				.changePasswordPage("/update-password")
			)

		ref 底層
			public HttpSecurity passwordManagement(
					Customizer<PasswordManagementConfigurer<HttpSecurity>> passwordManagementCustomizer) throws Exception {
				passwordManagementCustomizer.customize(getOrApply(new PasswordManagementConfigurer<>()));
				return HttpSecurity.this;
			}