常見於: 表單提交、AJAX請求和某些情況下的普通連結點擊

https://docs.spring.io/spring-security/reference/features/exploits/csrf.html
https://www.baeldung.com/spring-security-csrf
	若使用 spring boot 2 security 自動帶的 csrf
		1.表單 form 要使用 spring form 才會自動代入，缺點要一個 form bind 一個 model 繁瑣問題(但經測試不用特別bind 也可以送出，除非無屬性綁定)
			若使用一般 form 則要自己手動加入
				<input type="hidden" name="${_csrf.parameterName}" value="${_csrf.token}"/>

		2.json 為從 html meta 取得設定並到 requestHeader 塞入，比如前端動態處理後ajax送到後端、一堆link
			<meta name="_csrf" content="${_csrf.token}"/>
			<meta name="_csrf_header" content="${_csrf.headerName}"/>
			javascript ajax 使用其 spring csrf token 為例
				var header = $("meta[name='_csrf_header']").attr("content");
				var token = $("meta[name='_csrf']").attr("content");
				$(document).ajaxSend(function(e, xhr, options) { // 設定成每個 ajax 送到後端都有
					xhr.setRequestHeader(header, token);
				});
			jquery ajax
				var header = $("meta[name='_csrf_header']").attr("content");
				var token = $("meta[name='_csrf']").attr("content");

				$.ajax({
					url: 'https://api.example.com/data', // 要請求的 URL
					type: 'POST', // HTTP 請求方法
					dataType: 'json', // 預期從伺服器返回的數據類型
					contentType: 'application/json', // 傳送數據的內容類型
					data: JSON.stringify({ key: 'value' }), // 傳送到伺服器的數據
					beforeSend: function(xhr) {
						// 在請求發送前設置 CSRF token
						xhr.setRequestHeader(header, token);
					},
					success: function(response) {
						// 請求成功時執行的回調函數
						console.log(response);
					},
					error: function(xhr, status, error) {
						// 請求失敗時執行的回調函數
						console.error('Error: ' + error);
					}
				});
			jquery ajax 全局設定(可相對上方設定方式省力很多不用散在各個地方設定)
				$.ajaxSetup({
				  beforeSend: function(xhr) {
					var header = $("meta[name='_csrf_header']").attr("content")
					var sToken= $("meta[name='_csrf']").attr("content")
					xhr.setRequestHeader(header,sToken)
				  }
				});
		3. html form 手動放入 spring security csrf token，於 CsrfRequestDataValueProcessor 可以看到 ${_csrf.parameterName}、${_csrf.token} 處理
			<head>
				<!-- 其他頭部內容 -->
				<script type="text/javascript">
					var csrfToken = "${_csrf.token}";
					var csrfHeader = "${_csrf.headerName}";
				</script>
			</head>
			<body>
				<!-- 其他HTML內容 -->
				<form id="myForm" action="/yourFormAction" method="post">
					<!-- 其他表單元素 -->
					<input type="hidden" name="${_csrf.parameterName}" value="${_csrf.token}"/>
					<button type="submit">Submit</button>
				</form>

				<!-- 其他JavaScript內容 -->
			</body>
			</html>
		4.menu link 透過 javascript onclick post form
			<script>
				function logout() {
					document.getElementById("logoutForm").submit();
				}
			</script>
			<a href="#" onclick="logout()">點擊投稿</a>
			<form id="logoutForm" method="post" action="/logout">
				<input type="hidden" name="${_csrf.parameterName}" value="${_csrf.token}"/>
			</form>


csrf 處理方式
	https://stackoverflow.com/questions/52363487/what-is-the-reason-to-disable-csrf-in-spring-boot-web-application
		開發的專案為 web
			預設使用 csrf 保護
		開發的專案為後端服務
			應該使用 csrf().disable()

無登入入口
	@Bean
	public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
		http.authorizeHttpRequests(
				....
			)
			.formLogin().disable().htpBasic();
		return http.build();
	}


預設 csrf token 會與 session timeout 有關係，預設 session timeout 三十分鐘
	若要調整
		server:
		  servlet:
			session:
			  timeout: 60m  # 設定為一小時
 