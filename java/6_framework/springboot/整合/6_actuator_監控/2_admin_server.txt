https://www.youtube.com/watch?v=yFI4QwPZMew&list=PLmOn9nNkQxJFKh2PMfWbGT7RVuMowsx-u&index=80&ab_channel=%E5%B0%9A%E7%A1%85%E8%B0%B7IT%E5%9F%B9%E8%AE%AD%E5%AD%A6%E6%A0%A1

說明文件
	https://codecentric.github.io/spring-boot-admin/current/


Spring Boot Admin server
	pom.xml
		<dependency>
			<groupId>de.codecentric</groupId>
			<artifactId>spring-boot-admin-starter-server</artifactId>
			<!-- <version>2.4.0-SNAPSHOT</version> -->
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

	application.properties
		server.port=8888

	SpringBootAdminApplication.java
		@Configuration
		@EnableAutoConfiguration
		@EnableAdminServer
		public class SpringBootAdminApplication {
			public static void main(String[] args) {
				SpringApplication.run(SpringBootAdminApplication.class, args);
			}
		}


Spring Boot Admin Client
	pom.xml
		<dependency>
			<groupId>de.codecentric</groupId>
			<artifactId>spring-boot-admin-starter-client</artifactId>
			<!-- <version>2.4.0-SNAPSHOT</version> -->
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>

	application.properties
		# 註冊 spring boot admin server url
		spring.boot.admin.client.url=http://localhost:8080
		management.endpoints.web.exposure.include=*
		management.endpoint.health.show-details=always

	SecurityPermitAllConfig.java
		@Configuration
		public static class SecurityPermitAllConfig extends WebSecurityConfigurerAdapter {
			@Override
			protected void configure(HttpSecurity http) throws Exception {
				http.authorizeRequests().anyRequest().permitAll()
					.and().csrf().disable();
			}
		}

開啟 Spring Boot Admin server 啟動
	http://localhost:8888/


Security Configuration
	Spring Boot Admin server
		pom.xml
			<dependency>
				<groupId>de.codecentric</groupId>
				<artifactId>spring-boot-admin-server-ui-login</artifactId>
				<!-- <version>1.5.7</version> -->
			</dependency>
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-security</artifactId>
				<!-- <version>2.4.0</version> -->
			</dependency>

		WebSecurityConfig.java
			@Configuration
			@EnableWebSecurity
			public class WebSecurityConfig {
				private final AdminServerProperties adminServer;

				public WebSecurityConfig(AdminServerProperties adminServer) {
					this.adminServer = adminServer;
				}

				@Bean
				public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
					SavedRequestAwareAuthenticationSuccessHandler successHandler =
					  new SavedRequestAwareAuthenticationSuccessHandler();
					successHandler.setTargetUrlParameter("redirectTo");
					successHandler.setDefaultTargetUrl(this.adminServer.getContextPath() + "/");

					http
						.authorizeRequests()
							.antMatchers(this.adminServer.getContextPath() + "/assets/**").permitAll()
							.antMatchers(this.adminServer.getContextPath() + "/login").permitAll()
							.anyRequest().authenticated()
							.and()
						.formLogin()
							.loginPage(this.adminServer.getContextPath() + "/login")
							.successHandler(successHandler)
							.and()
						.logout()
							.logoutUrl(this.adminServer.getContextPath() + "/logout")
							.and()
						.httpBasic()
							.and()
						.csrf()
							.csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse())
							.ignoringRequestMatchers(
							  new AntPathRequestMatcher(this.adminServer.getContextPath() +
							   "/instances", HttpMethod.POST.toString()),
							  new AntPathRequestMatcher(this.adminServer.getContextPath() +
							   "/instances/*", HttpMethod.DELETE.toString()),
							  new AntPathRequestMatcher(this.adminServer.getContextPath() + "/actuator/**"))
							.and()
						.rememberMe()
							.key(UUID.randomUUID().toString())
							.tokenValiditySeconds(1209600);
					return http.build();
				}
			}

	Spring Boot Admin Client
		application.properties
			spring.boot.admin.client.url=http://localhost:8080
			spring.application.name=${SYS_NAME}
			spring.boot.admin.client.username=${spring.security.server.user.name}
			spring.boot.admin.client.password=${spring.security.server.password}

	Spring Boot Admin server
		application.properties
			# 告訴 Admin server 如何去 client 登入抓取監控指標
			spring.security.user.name=client
			spring.security.user.password=client

			spring.boot.admin.client.instance.metadata.user.name=${spring.security.user.name}
			spring.boot.admin.client.instance.metadata.user.password=${spring.security.user.password}