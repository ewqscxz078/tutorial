https://www.youtube.com/watch?v=-wkJ6yGN1Wg&list=PLmOn9nNkQxJFKh2PMfWbGT7RVuMowsx-u&index=85&ab_channel=%E5%B0%9A%E7%A1%85%E8%B0%B7IT%E5%9F%B9%E8%AE%AD%E5%AD%A6%E6%A0%A1

SpringBoot原理 : 整體重點
	Spring原理【Spring註解】、SpringMVC原理、自動配置原理、SpringBoot啟動過程原理

	幾個重要複寫函數
		配置在 META-INF/spring.factories
			ApplicationContextInitializer
			SpringApplicationRunListener
		只需要放在ioc容器中
			ApplicationRunner
			CommandLineRunner

	1.SpringBoot 啟動過程
		創建 SpringApplication

	2.Application Events ands Listeners
		ApplicationContextInitializer
		ApplicationListener
		SpringApplicationRunListener

	3.ApplicationRunner 與 CommandLineRunner

SpringBoot 啟動過程
	1.建立 SpringApplication 實例
		SpringApplication.java
			public static ConfigurableApplicationContext run(Object[] sources, String[] args){
				return new SpringApplication(sources).run(args);
			}

			@SuppressWarnings({ "unchecked", "rawtypes" })
			public SpringApplication(ResourceLoader resourceLoader, Class<?>... primarySources) {
				// 保存一些信息。
				this.resourceLoader = resourceLoader;
				Assert.notNull(primarySources, "PrimarySources must not be null");
				this.primarySources = new LinkedHashSet<>(Arrays.asList(primarySources));

				// 判定當前應用的類型。 ClassUtils。 Servlet
				this.webApplicationType = WebApplicationType.deduceFromClasspath();

				// bootstrappers：初始啟動引導器（List<Bootstrapper>）：去spring.factories文件中找 org.springframework.boot.Bootstrapper
				// org.springframework.boot.Bootstrapper
				this.bootstrapRegistryInitializers = new ArrayList<>(
						getSpringFactoriesInstances(BootstrapRegistryInitializer.class));

				// 從類路徑下找到 META-INF/spring.factories 配置的所有 ApplicationContextInitializer;然後保存起來
				setInitializers((Collection) getSpringFactoriesInstances(ApplicationContextInitializer.class));

				// 從類路徑下找到 META-INF/spring.factories 配置的所有 ApplicationListener;然後保存起來
				setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));

				// 從多個類中找到第一個有 main 方法的主配置類
				this.mainApplicationClass = deduceMainApplicationClass();
			}

	2.運行 run
		public ConfigurableApplicationContext run(String... args){
			StopWatch stopWatch = new StopWatch();
			stopWatch.start();
			ConfigurableApplicationContext context = null;
			FailureAnalyzers analyzers = null;
			configureHeadlessProperty();

			// 從類路徑下找到 META-INF/spring.factories 配置的所有 SpringApplicationRunListener;然後保存起來
			SpringApplicationRunListener listeners = getRunListeners(args);

			// 呼叫所有獲取 SpringApplicationRunListener.starting()方法
			listeners.starting();
			try{
				// 封裝命令行參數
				ApplicationArguments applicationArguments = new DefaultApplicationArguments(args);

				// 準備環境
				ConfigurableEnvironment environment = prepareEnvironment(listeners,applicationArguments);
				// 創建環境完成後回調 SpringApplicationRunListener.environmentPrepared(); 表示環境準備完成


				Banner printedBanner = printBanner(environment);

				// 創建 ApplicationContext ;決定創建web的ioc還是普通的ioc
				context = createApplicationContext();

				analyzers = new FailureAnalyzers(context);

				// 準備上下文環境;將 environment保存到ioc中;而且 applyInitializers()
				// applyInitializers(); 回調之前保存的所有的 ApplicationContextInitializer的 initialize方法
				// 回調所有的SpringApplicationRunListener的 contextPrepared();
				prepareContext(context, environment, listeners, applicationArguments, printedBanner);
				// prepareContext運行完成以後回調所有的SpringApplicationRunListener的 contextLoaded();

				// 刷新容器，ioc容器初始化(如果是web應用還會創建嵌入式的tomcat)
				// 掃描、創建、加載所有組件的地方(配置類、組件、自動配置)
				refreshContext(context);

				// 從IOC容器中獲取所有的ApplicationRunner和CommandLineRunner進行回調
				// ApplicationListener先回調,CommandLineRunner再回調
				afterRefresh(context,applicationArguments);

				// 所有SpringApplicationRunListener回調finished方法
				listeners.finished(context, null);
				stopWatch.stop();
				if(this.logStartupInfo){
					new StartupInfoLogger(this.mainApplicationClass)
						.logStarted(getApplicationLog(), stopWatch);
				}

				return context;
			} catch (Throwable ex){
				handleRunFailure(context,listeners,analyzers,ex);
				throw new IllegalStateException(ex);
			}

		}