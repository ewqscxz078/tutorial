1.這個廠景需要使用的依賴是什麼
2.如何編寫自動配置

@Configuration 		// 指定這個類是一個配置類
@ConditionalOnXXX 	// 在指定條件成立的情況下自動配置類生效
@AutoConfigureAfter // 指定自動配置類的順序
@Bean 				// 給容器中增加組件

@ConfigurationProperties // 結合相關 xxxProperties類來綁定相關的配置
@EnableConnfigurationProperties // 讓 xxxProperties 生效加入到容器中


自動配置類要能加載
將需要啟動就加載的自動配置類，配置在 META-INF/spring.factories
org.springframework.boot.autoconfigure.EnableAutoConfiguration=\
org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\
org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\

3.模式:
啟動器(starter)
	啟動器模塊是一個空 jar文件，僅提供輔助性依賴管理，這些依賴可能用於自動裝配或著其他類庫
	命名規範:
		官方命名空間
			前墜: spring-boot-starter
			模式: spring-boot-starter-模塊名
			舉例: spring-boot-starter-web、
				  spring-boot-starter-actuator、
				  spring-boot-starter-jdbc、
		定義命名空間
			後墜: -spring-boot-starter
			模式: 模塊名-spring-boot-starter
			舉例: mybatis-spring-boot-starter

	xxx-starter -> xxx-starter-autoconfigurer

	3.1 建立專案 xxx-starter
		依賴 xxx-starter-autoconfigurer
	3.2 建立專案 xxx-starter-autoconfigurer 撰寫
		依賴基本
			<groupId>org.springframework.boot
			<artifactId>spring-boot-starter

		ex:
			建立一個 HelloService.java
				public class HelloService {

					HelloProperties helloProperties;

					public HelloProperties getHelloProperties(){
						return helloProperties;
					}

					public void setHelloProperties(HelloProperties helloProperties){
						this.helloProperties = helloProperties;
					}

					public String sayHelloAtguigu(String name){
						return helloProperties.getProfix() + "-" + name + helloProperties.getSuffix();
					}
				}

			建立一個 HelloProperties.java
				@ConfigurationProperties(prefix= "atguigu.hello")
				public class HelloProperties {
					private String prefix;
					private String suffix;

					getter/setter...
				}

			建立一個 HelloServiceAutoConfiguration.java
				@Configuration
				@ConfigurationOnWebApplication // web 應用才生效
				@EnableAutoConfiguration(HelloProperties.class)
				public class HelloServiceAutoConfiguration {

					@AutoWired
					HelloProperties helloProperties;

					@Bean
					public HelloService helloService(){
						HelloService helloService = new HelloService();
						helloService.setHelloProperties(helloProperties);
						return helloService;
					}
				}

			新增 resources/META-INF/spring.factories
				org.springframework.boot.autoconfigure.EnableAutoConfiguration=\
				{HelloServiceAutoConfiguration.package路徑}

			test
				xxx-starter 專案 => maven install to local
				xxx-starter-autoconfigurer => maven install to local

				create new 專案
					1.依賴 spring-boot-starter-web
					2.依賴 自訂義 xxx-starter
					3.撰寫個 controller 確認
						@RestController
						public class HelloController{
							@AutoWired
							HelloService helloService;

							@GetMapping("/hello")
							public String hello(){
								return helloService.sayHelloAtguigu( name:"haha");
							}
						}
					4.resources/application.properties
						atguigu.hello.prefix=我是前墜
						atguigu.hello.suffix=我是後墜
					5.localhost:8080/hello
						我是前墜-haha我是後墜