外部配置文件載入位置與順序

https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#features.external-config

https://www.youtube.com/watch?v=Eic1OfY_1ZY&list=PLmOn9nNkQxJFKh2PMfWbGT7RVuMowsx-u&index=82&ab_channel=%E5%B0%9A%E7%A1%85%E8%B0%B7IT%E5%9F%B9%E8%AE%AD%E5%AD%A6%E6%A0%A1

統體以下覆蓋優先順序由小到大，指定環境優先，外部優先，後面的可以覆蓋前面的同名配置項
	1.Default properties (specified by setting SpringApplication.setDefaultProperties).
	2.@PropertySource annotations on your @Configuration classes. Please note that such property sources are not added to the Environment until the application context is being refreshed. This is too late to configure certain properties such as logging.* and spring.main.* which are read before refresh begins.
	3.Config data (such as application.properties files).
	4.A RandomValuePropertySource that has properties only in random.*.
	5.OS environment variables.
	6.Java System properties (System.getProperties()).
	7.JNDI attributes from java:comp/env.
	8.ServletContext init parameters.
	9.ServletConfig init parameters.
	10.Properties from SPRING_APPLICATION_JSON (inline JSON embedded in an environment variable or system property).
	11.Command line arguments.
	12.properties attribute on your tests. Available on @SpringBootTest and the test annotations for testing a particular slice of your application.
	13.@TestPropertySource annotations on your tests.
	14.Devtools global settings properties in the $HOME/.config/spring-boot directory when devtools is active.

外部配置源
	常用：Java properties、yaml/yml、env parameters(環境變數)、cmd parameters(命令參數)
		一般常用 1、2、3、5、6、11
		單元測試會用到 4、5、6、12、13、14

	常見配置文件查找位置與覆蓋方式 ( 與 1、3、11 相關 )
		(1) classpath 根路徑
			- classpath:/application.(properties/yml)、application-${profile}.(properties/yml)
		(2) classpath 根路徑下config目錄
			- classpath:/config/application.(properties/yml)、application-${profile}.(properties/yml)
		(3) jar 當前目錄
			- file:./application.(properties/yml)、application-${profile}.(properties/yml)
		(4) jar 當前目錄的config目錄
			- file:./config/application.(properties/yml)、application-${profile}.(properties/yml)
		(5) jar 當前目錄/config子目錄的直接子目錄，也就是巢狀config，// unix 限定
			- file:./config/${自訂名稱}/config/application.(properties/yml)、application-${profile}.(properties/yml)
		(6) 外部環境 命令參數:修改配置值 --${application.config.name}=${override value}
		(7) 外部環境 命令參數:修改預設檔名設定檔 --spring.config.location，修改預設抓取的 application -> 別的名字，寫在 application.properties 相關的不同層則不會生效

		1.案例 classpath
			${projectName}/src/main/resources
				application.properties
					server.port=8081 => 執行時為 server.port=8081
			${projectName}/src/main/resources/config
				application.properties
					server.port=8082 => 執行時為 server.port=8082

		2.案例 file，且含有上述 1.案例檔案
			${projectName}/
				application.properties
					server.port=8083 => 執行時為 server.port=8083
			${projectName}/config/
				application.properties
					server.port=8084 => 執行時為 server.port=8084
					# spring boot 1.x
					#server.context-path=/boots
					# spring boot 2.x
					#server.servlet.context-path=/boots

		3.案例 命令參數:修改配置值，且含有上述 1、2 案例檔案
			java -jar ${projectName}.jar --server.port=8087 => 執行時為 server.port=8087

		4.案例 命令參數:修改預設檔名設定檔 --spring.config.location，且含有上述 1、2、3 案例檔案
			專案打包好時，用命令列參數形式設定 => 執行時為 server.port=8085
				${application.properties.path}
					server.port=8085

				java -jar ${projectName}.jar --spring.config.location=${application.properties.path}
					則執行則會涵蓋原本設定檔加上外部加載的設定檔
					假設 ${application.properties.path} = myApplication 則會依據上述案例 application.properties 皆不會吃到，而是改吃 myApplication.properties 相關配置設定檔
						=>用於除錯、或是環境差異覆蓋原始設定檔