只有一個抽象方法的Interface
	把它想像成傳函數的意思，只是依據有無傳入參數與回傳值的差別分三種
	相對於泛行傳參數型態

Consumer
	1.通常設計在自我函數裡提供，
	2.或是inner new object to accept it
	3.不然就是要傳 參數T t 與對應的Consumer<T> consumer
		consumer.accept(t)

	接受一個引數，處理後不傳回值
		Iterable上的forEach方法：
		default void forEach(Consumer<? super T> action) {
			Objects.requireNonNull(action);
			for (T t : this) {
				action.accept(t);
			}
		}

Function
	接受一個引數，以該引數進行計算後傳回結果
Predicate
	接受一個引數，然後只傳回boolean值
	long count = Stream.of(fileNames)
					   .filter(name -> name.endsWith("txt"))
					   .count();
Supplier
	不接受任何引數，然後傳回值