temp file : 臨時文件建立與刪除
	try (OutputStream out = Files.newOutputStream(Files.createTempFile("prefix-", ".suffix"))) {
		// 使用臨時文件進行文件操作
	} // 臨時文件在這裡被自動刪除

nio2 path file
	https://codertw.com/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80/282/#outline__1_1
	https://stackoverflow.com/questions/189094/how-to-scan-a-folder-in-java
	https://docs.oracle.com/javase/tutorial/essential/io/walk.html
	https://docs.oracle.com/javase/tutorial/displayCode.html?code=https://docs.oracle.com/javase/tutorial/essential/io/examples/Copy.java
	https://jakubstas.com/paths_in_nio_2/#.Yag_UNBBw5v
	https://www.baeldung.com/java-io-vs-nio
	https://ithelp.ithome.com.tw/articles/10102562
	https://programdoubledragon.blogspot.com/2018/12/java-nio2.html
Files.

Path path = Paths.get(...)

zip a file
	https://mkyong.com/java/how-to-compress-files-in-zip-format/


File to Path
	File file = new File(....);
	Path path = file.toPath();

Path to File
	File path.toFile();

Path 標準正常化 : 要目的是消除路徑中的冗餘部分，並將其轉換為標準形式。它執行以下操作：
	path.normalize()
		1.移除路徑中的多餘分隔符：它將路徑中連續的多個分隔符替換為單個分隔符。例如，/dir//file.txt將被規範化為/dir/file.txt。

		2.處理.（當前目錄）和..（上級目錄）：它解析路徑中的.和..符號，並將其轉換為對應的實際目錄。例如，/dir/./file.txt將被規範化為/dir/file.txt，而/dir/../file.txt將被規範化為/file.txt。

		3.處理符號鏈接：如果路徑中存在符號鏈接，它將嘗試解析符號鏈接，將其轉換為實際目標路徑。

	注意事項: 只進行路徑的規範化處理，並不檢查路徑是否存在或是否有效。它僅對路徑字符串進行處理，並不對底層文件系統進行任何操作
	功能類似於 spring 裡的 StringUtils.cleanPath，但功能略於它
