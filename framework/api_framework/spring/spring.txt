@Configuration
public class RS_TABLES {

    private static final String RSDFZ = "rsdfz.+";
    @Bean
    public TableConversionRule RS_TABLES_RSDFZ() {
        final AliasTableConversionRule rule = new AliasTableConversionRule();
		....
        return rule;
    }
}

单

RS_TABLES.xml
	<beans>
		<bean id="RS_TABLES_RSDFZ" class="com.iisigroup.ude.tools.codegen.db.rule.TableConversionRule">
			....
		<bean/>
	</beans>

==================================================================================================================
========================================== spring init
========================================== http://www.zhongtiancai.com/post-149.html
========================================== https://segmentfault.com/a/1190000014105687
==================================================================================================================
bean constructor
bean method  @PostConstruct
xml  init-method=[something method name]
bean implements InitializingBean

初始化順序
Constructor > @PostConstruct > InitializingBean > init-method

ex:
	public class InitSequenceBean implements InitializingBean {

		public InitSequenceBean() {
		   System.out.println("InitSequenceBean: constructor");
		}

		@PostConstruct
		public void postConstruct() {
		   System.out.println("InitSequenceBean: postConstruct");
		}

		public void initMethod() {
		   System.out.println("InitSequenceBean: init-method");
		}

		@Override
		public void afterPropertiesSet() throws Exception {
		   System.out.println("InitSequenceBean: afterPropertiesSet");
		}
	}
==================================================================================================================
spring factory
==================================================================================================================
spring BeanPostProcessor
==================================================================================================================

==================================================================================================================
========================================= spring config
==================================================================================================================
https://www.tutorialspoint.com/spring/spring_java_based_configuration.htm

@Configuration
public class HelloWorldConfig {
   @Bean
   public HelloWorld helloWorld(){
      return new HelloWorld();
   }
}
单

<beans>
   <bean id = "helloWorld" class = "com.tutorialspoint.HelloWorld" />
</beans>

==================================================================================================================
======================================= PropertyPlaceholderConfigurer
======================================= properties
==================================================================================================================
beans-config.xml
	<beans>
		<bean id="configBean"
	 class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
			<property name="location">
				<value>hello.properties</value>
			</property>
		</bean>

		<bean id="helloBean" class="onlyfun.caterpillar.HelloBean">
			<property name="helloWord">
				<value>${onlyfun.caterpillar.helloWord}</value>
			</property>
		</bean>
	</beans>

hello.properties
	onlyfun.caterpillar.helloWord=Welcome!

==================================================================================================================
======================================= PropertyPlaceholderConfigurer tag xml
======================================= properties
==================================================================================================================
<util:properties id="envProperties" location="env.properties"/>
<util:properties id="properties" location="#{envProperties.getProperty('env.app.type')}.properties"/>

<context:property-placeholder properties-ref="envProperties" ignore-unresolvable="true" ignore-resource-not-found="true"/>
<context:property-placeholder properties-ref="properties" ignore-unresolvable="true"/>