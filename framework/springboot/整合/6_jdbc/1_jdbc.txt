
pom.xml
	<dependency>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-jdbc</artifactId>
	</dependency>

application.yml
	spring:
		datasource:
			username: ${your_username}
			password: ${your_password}
			url: ${your_url}
			driver-class-name: com.mysql.jdbc.Driver

src/test/java/		
	@RunWith(SpringRunner.class)
	@SpringBootTest
	public class SpringBootDataJdbcApplicationTest {
		@Autowired
		DataSource datasource;

		@Test
		public void testContextLoads() throws SQLException {
			System.out.println(datasource.getClass());
			
			Connection connection = datasource.getConection();
			System.out.println(connection);
			connection.close();
		}
	}
	
效果
	默認是用 org.apache.tomcat.jdbc.pool.DataSource 作為數據來源
	數據源的相關配置都在 DataSourceProperties 裡面
	
自動配置
	org.springframework.boot.autoconfigure.jdbc:
		1.參考 DataSourceConfiguration，根據配置資料來源，默認使用 Tomcat 連接池；可以使用 spring.datasource.type 指定自訂義的數據源類型
		2.spring boot 默認支持；
			org.apache.tomcat.jdbc.pool.DataSource
			HikariDataSource
			BasicDataSource
		3.自訂義資料來源
			繼承 spring.datasource.type
			透過 static class Generic
				DataSourceBuilder 建構生成，利用反射建立對應type的數據源，並且綁定相關屬性
				properties.initalizeDataSourceBuilder().build();
		4.DataSouceIinitalizer:ApplicationListener；
			作用
				1.runSchemaScripts()；運行 sql 建表語句
					默認只需要將文件命名為: schema-*.sql(schema.sql、schema-all.sql)
					可以指定位置
						schema:
							-classpath: xxxx.sql
							
				2.runDataScripts()；運行 insert sql 語句
					默認只需要將文件命名為: data-*.sql
		5.操作數據庫:自動配置了 jdbcTemplate 
			@Controller
			public class HelloController {
				@Autowired
				JdbcTemplate jdbcTemplate;
				
				@ResponseBody
				@GetMapping("/query")
				public Map<String, Object> map(){
					List<Map<String,Object>>> list = jdbcTemplate.queryForList( sql: "select * from table");
					return list.get(0);
				}
			}
		