1、響應JSON
	1.1、jackson.jar + @ResponseBody
		jackson.jar(
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-web</artifactId>
			</dependency>
				<dependency>
				  <groupId>org.springframework.boot</groupId>
				  <artifactId>spring-boot-starter-json</artifactId>
				  <version>2.7.1</version>
				  <scope>compile</scope>
				</dependency>
					... 一系列引用 jackson jar ...
					<dependency>
					  <groupId>com.fasterxml.jackson.core</groupId>
					  <artifactId>jackson-databind</artifactId>
					  <version>2.13.3</version>
					  <scope>compile</scope>
					</dependency>
					<dependency>
					  <groupId>com.fasterxml.jackson.datatype</groupId>
					  <artifactId>jackson-datatype-jdk8</artifactId>
					  <version>2.13.3</version>
					  <scope>compile</scope>
					</dependency>
					<dependency>
					  <groupId>com.fasterxml.jackson.datatype</groupId>
					  <artifactId>jackson-datatype-jsr310</artifactId>
					  <version>2.13.3</version>
					  <scope>compile</scope>
					</dependency>
					<dependency>
					  <groupId>com.fasterxml.jackson.module</groupId>
					  <artifactId>jackson-module-parameter-names</artifactId>
					  <version>2.13.3</version>
					  <scope>compile</scope>
					</dependency>
		)

		XXXXController.java
			@ResponseBody
			@GetMapping("/custom/person")
			public Person getPerson() {
				final Person person = new Person();
				person.setAge(18);
				person.setBirth(new Date());
				person.setUserName("zhangsan");
				return person;
			}

HandlerMethodReturnValueHandler
	● 1、返回值處理器判斷是否支持這種類型返回值 supportsReturnType
	● 2、返回值處理器調用 handleReturnValue 進行處理
	JSON
		● 3、RequestResponseBodyMethodProcessor 可以處理返回值標了@ResponseBody 註解的。 (JSON解析)
		  ○ 1.  利用 MessageConverters 進行處理 將數據寫為json
			■ 1、內容協商（瀏覽器默認會以請求頭的方式告訴服務器他能接受什麼樣的內容類型）
			■ 2、服務器最終根據自己自身的能力，決定服務器能生產出什麼樣內容類型的數據，
			■ 3、SpringMVC會挨個遍歷所有容器底層的 HttpMessageConverter ，看誰能處理？
			  ● 1、得到 MappingJackson2HttpMessageConverter 可以將對象寫為json
			  ● 2、利用 MappingJackson2HttpMessageConverter 將對象轉為json再寫出去。


返回值處理器支援類型
	HandlerMethodReturnValueHandler (interface)
		AbstractMessageConverterMethodProcessor
			HttpEntityMethodProcessor
			RequestResponseBodyMethodProcessor
		AsyncTaskMethodReturnValueHandler
		CallableMethodReturnValueHandler
		DeferredResultMethodReturnValueHandler
		HandlerMethodReturnValueHandlerComposite
		HttpHeadersReturnValueHandler
		MapMethodProcessor
		ModelAndViewMethodReturnValueHandler
		ModelAndViewResolverMethodReturnValueHandler
		ModelAttributeMethodProcessor
			ServletModelAttributeMethodProcessor
		ModelMethodProcessor
		ResponseBodyEmitterReturnValueHandler
		StreamingResponseBodyReturnValueHandler
		ViewMethodReturnValueHandler
		ViewNameMethodReturnValueHandler
		AsyncHandlerMethodReturnValueHandler

因此支援返回值類型有
	ModelAndView
	Model
	View
	ResponseEntity
	ResponseBodyEmitter
	StreamingResponseBody
	HttpEntity
	HttpHeaders
	Callable
	DeferredResult
	ListenableFuture
	CompletionStage
	WebAsyncTask
	有 @ModelAttribute 且為對像類型的
	@ResponseBody 註解 ---> RequestResponseBodyMethodProcessor；


1.3、HTTPMessageConverter 原理 (MessageConverters)

	1、規範
		boolean canRead(Class<?> clazz, @Nullable MediaType mediaType);
		boolean canWrite(Class<?> clazz, @Nullable MediaType mediaType);
		List<MediaType> getSupportedMediaTypes();
		List<MediaType> getSupportedMediaTypes(Class<?> clazz)
		T read(Class<? extends T> clazz, HttpInputMessage inputMessage)
		void write(T t, @Nullable MediaType contentType, HttpOutputMessage outputMessage)

		HttpMessageConverter: 看是否支持將 此 Class類型的對象，轉為MediaType類型的數據。
			例子：Person對象轉為JSON。或者 JSON轉為Person

	實作類
		0 org.springframework.http.converter.ByteArrayHttpMessageConverter@1aac24a
		1 org.springframework.http.converter.StringHttpMessageConverter@4808b7b
		2 org.springframework.http.converter.StringHttpMessageConverter@8d4f4ef
		3 org.springframework.http.converter.ResourceHttpMessageConverter@2e6e029
		4 org.springframework.http.converter.ResourceRegionHttpMessageConverter@5c9e5082
		5 org.springframework.http.converter.xml.SourceHttpMessageConverter@bf161c9
		6 org.springframework.http.converter.support.AllEncompassingFormHttpMessageConverter@24ad9fd4
		7 org.springframework.http.converter.json.MappingJackson2HttpMessageConverter@286ad300
		8 org.springframework.http.converter.json.MappingJackson2HttpMessageConverter@117fd4c0
		9 org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter@3f4b8c2d

	對應實作類實際支持返回類型
		0 - 只支持Byte類型的
		1 - String
		2 - String
		3 - Resource
		4 - ResourceRegion
		5 - DOMSource.class \ SAXSource.class) \ StAXSource.class \StreamSource.class \Source.class
		6 - MultiValueMap
		7 - true
		8 - true
		9 - 支持註解方式xml處理的。


2、內容協商
	根據客戶端接收能力不同，返回不同媒體類型的數據。
		1. url path 副檔名方式決定回傳型別
		2. url 參數方式決定回傳型別
		3. url accept Header 決定回傳型別
	https://www.baeldung.com/spring-mvc-content-negotiation-json-xml
		2.6.x之後該功能作法被調整，且預設不支援xml

		1、引入xml依賴
			<dependency>
				<groupId>com.fasterxml.jackson.dataformat</groupId>
				<artifactId>jackson-dataformat-xml</artifactId>
			</dependency>
		2、postman分別測試返回json和xml
			只需要改變請求頭中Accept字段。 Http協議中規定的，告訴服務器本客戶端可以接收的數據類型。
		3、開啟瀏覽器參數方式內容協商功能
			為了方便內容協商，開啟基於請求參數的內容協商功能。
			spring:
				mvc.contentnegotiation:
				  favor-parameter: true  #開啟請求參數內容協商模式

			開啟副檔名決定回傳型別，預設false
				spring.mvc.pathmatch.use-suffix-pattern=true
				spring.mvc.pathmatch.matching-strategy=ant-path-matcher


			發請求：
				http://localhost:8080/test/person?mediaType=json
				http://localhost:8080/test/person?mediaType=xml


			確定客戶端接收什麼樣的內容類型；
				1、Parameter策略優先確定是要返回json數據（獲取請求頭中的format的值）
				2、最終進行內容協商返回給客戶端json即可。

			controller.java
				@ResponseBody
				@GetMapping(value = "/custom/multiReturn")
				public Person getMultiReturn() {
					....
				}

			config.java
				new WebMvcConfigurer() {
					@Override
					public void extendMessageConverters(final List<HttpMessageConverter<?>> converters) {
						converters.add(new CustomMessageConverter());
					}

					@Override
					public void configureContentNegotiation(final ContentNegotiationConfigurer configurer) {
						configurer.favorPathExtension(true) // 支援路徑檔名回傳型別
								.favorParameter(true) // 支援參數模式指定回傳型別，預設 format
								.parameterName("mediaType") // 自訂支援參數模式名稱
								.ignoreAcceptHeader(false) // 是否支援 AcceptHeader 處理對應的回傳型別
					....
				}

			自訂 messageConvertor
				public class CustomMessageConverter implements HttpMessageConverter<Person> {
					@Override
					public boolean canRead(final Class<?> clazz, final MediaType mediaType) {
						return false;
					}
					@Override
					public boolean canWrite(final Class<?> clazz, final MediaType mediaType) {
						return clazz.isAssignableFrom(Person.class);
					}
					/**
					 * 服務器要統計所有 messageConverter 都能寫出那些內容類型
					 *
					 * application/x-custom
					 *
					 */
					@Override
					public List<MediaType> getSupportedMediaTypes() {
						return MediaType.parseMediaTypes("application/x-custom");
					}
					@Override
					public Person read(final Class<? extends Person> clazz, final HttpInputMessage inputMessage)
							throws IOException, HttpMessageNotReadableException {
						return null;
					}
					@Override
					public void write(final Person person, final MediaType contentType, final HttpOutputMessage outputMessage)
							throws IOException, HttpMessageNotWritableException {

						final String data = person.getUserName() + ";" + person.getAge() + ";" + person.getBirth();

						// 寫出去
						final OutputStream body = outputMessage.getBody();
						body.write(data.getBytes());
					}
				}